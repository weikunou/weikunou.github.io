<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Unity3D UI 嵌套滚动视图</title>
    <link href="/2024/12/01/unity-ui-nested-scrollview/"/>
    <url>/2024/12/01/unity-ui-nested-scrollview/</url>
    
    <content type="html"><![CDATA[<p>Unity3D 解决 UI 嵌套滚动视图滑动问题。</p><span id="more"></span><h1 id="嵌套滚动视图"><a href="#嵌套滚动视图" class="headerlink" title="嵌套滚动视图"></a>嵌套滚动视图</h1><h2 id="滑动问题"><a href="#滑动问题" class="headerlink" title="滑动问题"></a>滑动问题</h2><p>在游戏开发中，我们常常会遇到一种情况，在一个滚动视图列表中，每个 item 还包含了一个内嵌的滚动视图。</p><p>这样，当我们在滑动外层的滚动视图时，如果点击位置在内嵌的滚动视图上，很可能滑不动，内外层滚动视图的滑动事件出现了冲突。</p><p>如下图所示，点击位置在奖励文本上时，是可以正常滑动的。但是，点击位置在奖励列表时，滑动方向变成了左右，而不是期望的上下滑动。</p><p><img src="/../images/unity-ui-nested-scrollview/%E6%BB%91%E5%8A%A8%E5%86%B2%E7%AA%81.gif"></p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>通常的解决方案是，根据拖拽的增量，判断滑动的方向，如果方向与内层的方向相同，则优先滑动内层；如果方向不同，则传递滑动事件给外层的滚动视图。</p><p>为此，我们创建一个脚本 <code>CustomScrollRect.cs</code>，继承 <code>ScrollRect</code>，并重写它的一些方法。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> UnityEngine;<br><span class="hljs-keyword">using</span> UnityEngine.EventSystems;<br><span class="hljs-keyword">using</span> UnityEngine.UI;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">CustomScrollRect</span> : <span class="hljs-title">ScrollRect</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Awake</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-keyword">base</span>.Awake();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnBeginDrag</span>(<span class="hljs-params">PointerEventData eventData</span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-keyword">base</span>.OnBeginDrag(eventData);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnDrag</span>(<span class="hljs-params">PointerEventData eventData</span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-keyword">base</span>.OnDrag(eventData);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnEndDrag</span>(<span class="hljs-params">PointerEventData eventData</span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-keyword">base</span>.OnEndDrag(eventData);<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnScroll</span>(<span class="hljs-params">PointerEventData eventData</span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-keyword">base</span>.OnScroll(eventData);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>首先，在 <code>Awake</code> 中，获取父节点的 <code>CustomScrollRect</code> 组件。</p><p>这里使用的 <code>GetComponentInParent</code>，会从当前节点开始查找，递归遍历其父节点。</p><p>所以要从 <code>transform.parent</code> 开始遍历，避免获取到自己身上的 <code>CustomScrollRect</code> 组件。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> UnityEngine;<br><span class="hljs-keyword">using</span> UnityEngine.EventSystems;<br><span class="hljs-keyword">using</span> UnityEngine.UI;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">CustomScrollRect</span> : <span class="hljs-title">ScrollRect</span><br>&#123;<br>    CustomScrollRect parent;<br><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Awake</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-keyword">base</span>.Awake();<br><br>        <span class="hljs-keyword">if</span> (parent == <span class="hljs-literal">null</span>)<br>        &#123;<br>            parent = transform.parent.GetComponentInParent&lt;CustomScrollRect&gt;();<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>同时，在类内部定义一个方向枚举，在 <code>Awake</code> 时，记录当前的方向。</p><p>这里仅判断是水平还是垂直，通常不会有两个方向都能滑动的情况。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> UnityEngine;<br><span class="hljs-keyword">using</span> UnityEngine.EventSystems;<br><span class="hljs-keyword">using</span> UnityEngine.UI;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">CustomScrollRect</span> : <span class="hljs-title">ScrollRect</span><br>&#123;<br>    CustomScrollRect parent;<br><br>    <span class="hljs-built_in">enum</span> Direction<br>    &#123;<br>        horizontal,<br>        vertical<br>    &#125;<br><br>    Direction curDirection;<br>    Direction dragDirection;<br><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Awake</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-keyword">base</span>.Awake();<br><br>        <span class="hljs-keyword">if</span> (parent == <span class="hljs-literal">null</span>)<br>        &#123;<br>            parent = transform.parent.GetComponentInParent&lt;CustomScrollRect&gt;();<br>        &#125;<br><br>        curDirection = horizontal ? Direction.horizontal : Direction.vertical;<br>    &#125;<br>    <br>    <span class="hljs-comment">// ..</span><br>&#125;<br></code></pre></td></tr></table></figure><p>然后在开始拖拽时，根据 <code>eventData.delta</code> 的 <code>x</code> 和 <code>y</code> 变量增幅哪个较大，判断滑动的方向。</p><p>当拖拽的方向和当前方向不同，且有外层滚动视图时，把 <code>beginDragHandler</code> 传递给外层，如果不符合条件，则执行自身的 <code>OnBeginDrag</code> 事件。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> UnityEngine;<br><span class="hljs-keyword">using</span> UnityEngine.EventSystems;<br><span class="hljs-keyword">using</span> UnityEngine.UI;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">CustomScrollRect</span> : <span class="hljs-title">ScrollRect</span><br>&#123;<br>    <span class="hljs-comment">// ...</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnBeginDrag</span>(<span class="hljs-params">PointerEventData eventData</span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-comment">// 判断拖拽的方向</span><br>        dragDirection = Mathf.Abs(eventData.delta.x) &gt; Mathf.Abs(eventData.delta.y)<br>        ? Direction.horizontal : Direction.vertical;<br><br>        <span class="hljs-comment">// 拖拽的方向和当前方向不同，且有外层滚动视图</span><br>        <span class="hljs-keyword">if</span> (dragDirection != curDirection &amp;&amp; parent != <span class="hljs-literal">null</span>)<br>        &#123;<br>            <span class="hljs-comment">// 把 beginDragHandler 传递给外层</span><br>            ExecuteEvents.Execute(parent.gameObject, eventData,<br>            ExecuteEvents.beginDragHandler);<br><br>            <span class="hljs-comment">// 不执行自身的 OnBeginDrag 事件</span><br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 执行自身的 OnBeginDrag 事件</span><br>        <span class="hljs-keyword">base</span>.OnBeginDrag(eventData);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>依此类推，在其他方法中也加上这样的判断（<code>dragDirection</code> 可以仅在开始拖拽时赋值）。</p><p>需要注意的是，</p><ul><li><code>OnBeginDrag</code> 方法传递的事件是 <code>beginDragHandler</code></li><li><code>OnDrag</code> 方法传递的事件是 <code>dragHandler</code></li><li><code>OnEndDrag</code> 方法传递的事件是 <code>endDragHandler</code></li><li><code>OnScroll</code> 方法传递的事件是 <code>scrollHandler</code></li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> UnityEngine;<br><span class="hljs-keyword">using</span> UnityEngine.EventSystems;<br><span class="hljs-keyword">using</span> UnityEngine.UI;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">CustomScrollRect</span> : <span class="hljs-title">ScrollRect</span><br>&#123;<br>    <span class="hljs-comment">// ...</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnDrag</span>(<span class="hljs-params">PointerEventData eventData</span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-keyword">if</span> (dragDirection != curDirection &amp;&amp; parent != <span class="hljs-literal">null</span>)<br>        &#123;<br>            ExecuteEvents.Execute(parent.gameObject, eventData,<br>            ExecuteEvents.dragHandler);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">base</span>.OnDrag(eventData);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnEndDrag</span>(<span class="hljs-params">PointerEventData eventData</span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-keyword">if</span> (dragDirection != curDirection &amp;&amp; parent != <span class="hljs-literal">null</span>)<br>        &#123;<br>            ExecuteEvents.Execute(parent.gameObject, eventData,<br>            ExecuteEvents.endDragHandler);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">base</span>.OnEndDrag(eventData);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnScroll</span>(<span class="hljs-params">PointerEventData eventData</span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-keyword">if</span> (dragDirection != curDirection &amp;&amp; parent != <span class="hljs-literal">null</span>)<br>        &#123;<br>            ExecuteEvents.Execute(parent.gameObject, eventData,<br>            ExecuteEvents.scrollHandler);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">base</span>.OnScroll(eventData);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h2><p>移除掉原来的 <code>ScrollRect</code> 组件，换上 <code>CustomScrollRect</code> 组件。</p><p>记得要拖拽 Viewport 和 Content 节点。</p><p>内外层滚动视图都需要换上 <code>CustomScrollRect</code> 组件。</p><p><img src="/../images/unity-ui-nested-scrollview/%E6%9B%B4%E6%8D%A2%E7%BB%84%E4%BB%B6.gif"></p><p>最终效果如图：</p><p><img src="/../images/unity-ui-nested-scrollview/%E6%9C%80%E7%BB%88%E6%95%88%E6%9E%9C.gif"></p><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><p><code>CustomScrollRect.cs</code></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> UnityEngine;<br><span class="hljs-keyword">using</span> UnityEngine.EventSystems;<br><span class="hljs-keyword">using</span> UnityEngine.UI;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">CustomScrollRect</span> : <span class="hljs-title">ScrollRect</span><br>&#123;<br>    CustomScrollRect parent;<br><br>    <span class="hljs-built_in">enum</span> Direction<br>    &#123;<br>        horizontal,<br>        vertical<br>    &#125;<br><br>    Direction curDirection;<br>    Direction dragDirection;<br><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Awake</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-keyword">base</span>.Awake();<br><br>        <span class="hljs-keyword">if</span> (parent == <span class="hljs-literal">null</span>)<br>        &#123;<br>            parent = transform.parent.GetComponentInParent&lt;CustomScrollRect&gt;();<br>        &#125;<br><br>        curDirection = horizontal ? Direction.horizontal : Direction.vertical;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnBeginDrag</span>(<span class="hljs-params">PointerEventData eventData</span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-comment">// 判断拖拽的方向</span><br>        dragDirection = Mathf.Abs(eventData.delta.x) &gt; Mathf.Abs(eventData.delta.y)<br>        ? Direction.horizontal : Direction.vertical;<br><br>        <span class="hljs-comment">// 拖拽的方向和当前方向不同，且有外层滚动视图</span><br>        <span class="hljs-keyword">if</span> (dragDirection != curDirection &amp;&amp; parent != <span class="hljs-literal">null</span>)<br>        &#123;<br>            <span class="hljs-comment">// 把 beginDragHandler 传递给外层</span><br>            ExecuteEvents.Execute(parent.gameObject, eventData,<br>            ExecuteEvents.beginDragHandler);<br><br>            <span class="hljs-comment">// 不执行自身的 OnBeginDrag 事件</span><br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 执行自身的 OnBeginDrag 事件</span><br>        <span class="hljs-keyword">base</span>.OnBeginDrag(eventData);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnDrag</span>(<span class="hljs-params">PointerEventData eventData</span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-keyword">if</span> (dragDirection != curDirection &amp;&amp; parent != <span class="hljs-literal">null</span>)<br>        &#123;<br>            ExecuteEvents.Execute(parent.gameObject, eventData,<br>            ExecuteEvents.dragHandler);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">base</span>.OnDrag(eventData);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnEndDrag</span>(<span class="hljs-params">PointerEventData eventData</span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-keyword">if</span> (dragDirection != curDirection &amp;&amp; parent != <span class="hljs-literal">null</span>)<br>        &#123;<br>            ExecuteEvents.Execute(parent.gameObject, eventData,<br>            ExecuteEvents.endDragHandler);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">base</span>.OnEndDrag(eventData);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnScroll</span>(<span class="hljs-params">PointerEventData eventData</span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-keyword">if</span> (dragDirection != curDirection &amp;&amp; parent != <span class="hljs-literal">null</span>)<br>        &#123;<br>            ExecuteEvents.Execute(parent.gameObject, eventData,<br>            ExecuteEvents.scrollHandler);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">base</span>.OnScroll(eventData);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Unity3D</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Unity3D 截图</title>
    <link href="/2024/11/24/unity-screenshot-tool/"/>
    <url>/2024/11/24/unity-screenshot-tool/</url>
    
    <content type="html"><![CDATA[<p>使用 Unity3D 自带的截图接口，制作截图工具。</p><span id="more"></span><h1 id="截图"><a href="#截图" class="headerlink" title="截图"></a>截图</h1><p>有时候我们想对 Unity 的窗口进行截图，如果直接使用一些截图工具，很难截取到一张完整分辨率的图片（例如，我们想要截取一张 1920 * 1080 的图片）。</p><p>其实 Unity 有提供截图的接口，我们只需要写一个脚本，把截图接口做成简单的菜单栏工具即可。</p><h2 id="创建工具脚本"><a href="#创建工具脚本" class="headerlink" title="创建工具脚本"></a>创建工具脚本</h2><p>创建脚本 <code>ScreenshotTool.cs</code>，写一个 <code>CaptureFull</code> 方法，调用 Unity 提供的 <code>ScreenCapture.CaptureScreenshot</code> 方法即可。</p><p>截图时，为了方便找到，保存的路径是 Assets 文件夹（<code>Application.dataPath</code>），截图的名称是 Screenshot 拼接了当前的时间（如果名称一样，每次截图都会覆盖原来的图片）。</p><p>我们在 <code>CaptureFull</code> 方法上面添加一个 <code>MenuItem</code>，就可以在菜单栏找到它，也可以使用 Alt + Q 快捷键（即路径末尾的 <code>&amp;Q</code>）。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> System;<br><span class="hljs-keyword">using</span> UnityEngine;<br><span class="hljs-keyword">using</span> UnityEditor;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title">ScreenshotTool</span><br>&#123;<br>    [<span class="hljs-meta">MenuItem(<span class="hljs-meta-string">&quot;截图/截取全屏 &amp;Q&quot;</span>)</span>]<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">CaptureFull</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-built_in">string</span> time = DateTime.Now.ToString(<span class="hljs-string">&quot;yyyy-MM-dd_HH-mm-ss&quot;</span>);<br>        <span class="hljs-built_in">string</span> path = <span class="hljs-string">$&quot;<span class="hljs-subst">&#123;Application.dataPath&#125;</span>/Screenshot_<span class="hljs-subst">&#123;time&#125;</span>.png&quot;</span>;<br>        ScreenCapture.CaptureScreenshot(path);<br>        Debug.Log(<span class="hljs-string">&quot;Screenshot saved at: &quot;</span> + path);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="截图效果"><a href="#截图效果" class="headerlink" title="截图效果"></a>截图效果</h2><p>如图，菜单栏出现按钮，并且有快捷键的描述。</p><p>运行游戏时，点击菜单栏按钮，或者按下 Alt + Q，控制台会打印截图的保存路径。</p><p>当 Unity 资源文件夹刷新时，也会看到 Assets 文件夹下多出来一张图片，尺寸是 1920 * 1080（当前 Game 窗口的分辨率）。</p><p><img src="/../images/unity-screenshot-tool/%E6%88%AA%E5%9B%BE%E6%95%88%E6%9E%9C.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Unity3D</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Unity3D UI 双击和长按</title>
    <link href="/2024/11/10/unity-ui-double-click-and-long-press/"/>
    <url>/2024/11/10/unity-ui-double-click-and-long-press/</url>
    
    <content type="html"><![CDATA[<p>Unity3D 实现 UI 元素双击和长按功能。</p><span id="more"></span><h1 id="UI-双击和长按"><a href="#UI-双击和长按" class="headerlink" title="UI 双击和长按"></a>UI 双击和长按</h1><p>上一篇文章实现了拖拽接口，这篇文章来实现 UI 的双击和长按。</p><h2 id="双击"><a href="#双击" class="headerlink" title="双击"></a>双击</h2><p>创建脚本 <code>UIDoubleClick.cs</code>，创建一个 Image，并把脚本挂载到它身上。</p><p>在脚本中，继承 <code>IPointerClickHandler</code> 接口，实现 <code>OnPointerClick</code> 点击方法。</p><p>第一次点击时，记录点击的时间，如果第二次点击的时间，和上次点击时间的间隔非常短，则判定为双击。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> UnityEngine;<br><span class="hljs-keyword">using</span> UnityEngine.EventSystems;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">UIDoubleClick</span> : <span class="hljs-title">MonoBehaviour</span>, <span class="hljs-title">IPointerClickHandler</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">float</span> doubleClickThreshold = <span class="hljs-number">0.2f</span>; <span class="hljs-comment">// 双击的时间间隔</span><br>    <span class="hljs-built_in">float</span> lastClickTime = <span class="hljs-number">0f</span>; <span class="hljs-comment">// 记录上次点击的时间</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnPointerClick</span>(<span class="hljs-params">PointerEventData eventData</span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-comment">// 获取当前点击的时间</span><br>        <span class="hljs-built_in">float</span> currentTime = Time.time;<br><br>        <span class="hljs-comment">// 判断两次点击时间间隔是否在阈值范围内</span><br>        <span class="hljs-keyword">if</span> (currentTime - lastClickTime &lt; doubleClickThreshold)<br>        &#123;<br>            OnDoubleClick();<br>        &#125;<br><br>        <span class="hljs-comment">// 更新上一次点击的时间</span><br>        lastClickTime = currentTime;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OnDoubleClick</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        Debug.Log(<span class="hljs-string">&quot;双击&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行效果：</p><p><img src="/../images/unity-ui-double-click-and-long-press/%E5%8F%8C%E5%87%BB.gif"></p><h2 id="长按"><a href="#长按" class="headerlink" title="长按"></a>长按</h2><p>创建脚本 <code>UILongPress.cs</code>，并挂载到 Image 身上。</p><p>在脚本中，继承 <code>IPointerDownHandler</code> 和 <code>IPointerUpHandler</code> 接口，实现 <code>OnPointerDown</code>（按下）和 <code>OnPointerUp</code>（抬起）方法。</p><p>按下时，记录按下的时间和按住的状态，在 <code>Update</code> 中检查长按的时间和状态，达到长按的时间阈值后，执行一次长按的逻辑，并把长按状态重置。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> UnityEngine;<br><span class="hljs-keyword">using</span> UnityEngine.EventSystems;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">UILongPress</span> : <span class="hljs-title">MonoBehaviour</span>, <span class="hljs-title">IPointerDownHandler</span>, <span class="hljs-title">IPointerUpHandler</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">float</span> longPressThreshold = <span class="hljs-number">1.0f</span>; <span class="hljs-comment">// 长按的时间阈值</span><br>    <span class="hljs-built_in">float</span> pressStartTime; <span class="hljs-comment">// 按下的时间</span><br>    <span class="hljs-built_in">bool</span> isPressing = <span class="hljs-literal">false</span>; <span class="hljs-comment">// 是否按住</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnPointerDown</span>(<span class="hljs-params">PointerEventData eventData</span>)</span><br><span class="hljs-function"></span>    &#123;<br>        isPressing = <span class="hljs-literal">true</span>;<br>        pressStartTime = Time.time;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnPointerUp</span>(<span class="hljs-params">PointerEventData eventData</span>)</span><br><span class="hljs-function"></span>    &#123;<br>        isPressing = <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Update</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-comment">// 检查是否在长按状态</span><br>        <span class="hljs-keyword">if</span> (isPressing &amp;&amp; (Time.time - pressStartTime) &gt; longPressThreshold)<br>        &#123;<br>            OnLongPress();<br>            isPressing = <span class="hljs-literal">false</span>; <span class="hljs-comment">// 只触发一次长按事件</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OnLongPress</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        Debug.Log(<span class="hljs-string">&quot;长按&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行效果：</p><p><img src="/../images/unity-ui-double-click-and-long-press/%E9%95%BF%E6%8C%89.gif"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Unity3D</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Unity3D UI 拖拽</title>
    <link href="/2024/11/03/unity-ui-drag/"/>
    <url>/2024/11/03/unity-ui-drag/</url>
    
    <content type="html"><![CDATA[<p>Unity3D 实现 UI 元素拖拽功能。</p><span id="more"></span><h1 id="UI-拖拽"><a href="#UI-拖拽" class="headerlink" title="UI 拖拽"></a>UI 拖拽</h1><p>通常画布上的 UI 元素都是固定位置的，我们可以通过实现拖拽接口，让 UI 元素可以被拖拽到其他位置。</p><h2 id="拖拽接口"><a href="#拖拽接口" class="headerlink" title="拖拽接口"></a>拖拽接口</h2><p>创建一个脚本 <code>UIDrag.cs</code>，在默认继承的 <code>MonoBehaviour</code> 后面，再继承三个接口。</p><ul><li><code>IBeginDragHandler</code>（开始拖拽）</li><li><code>IDragHandler</code>（拖拽中）</li><li><code>IEndDragHandler</code>（结束拖拽）</li></ul><p>继承接口之后，要在脚本中实现接口中定义的方法，即 <code>OnBeginDrag</code>、<code>OnDrag</code>、<code>OnEndDrag</code>。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> UnityEngine;<br><span class="hljs-keyword">using</span> UnityEngine.EventSystems;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">UIDrag</span> : <span class="hljs-title">MonoBehaviour</span>, <span class="hljs-title">IBeginDragHandler</span>, <span class="hljs-title">IDragHandler</span>, <span class="hljs-title">IEndDragHandler</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnBeginDrag</span>(<span class="hljs-params">PointerEventData eventData</span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnDrag</span>(<span class="hljs-params">PointerEventData eventData</span>)</span><br><span class="hljs-function"></span>    &#123;<br>        transform.position = eventData.position;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnEndDrag</span>(<span class="hljs-params">PointerEventData eventData</span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里先在 <code>OnDrag</code> 方法中，把 <code>eventData.position</code> 赋值给 <code>transform.position</code>。</p><p>然后创建一个 Image，把 <code>UIDrag</code> 脚本拖拽到 Image 上。</p><p><img src="/../images/unity-ui-drag/%E6%8C%82%E8%BD%BD%E7%BB%84%E4%BB%B6.png"></p><p>运行游戏，点击拖拽图片。</p><p><img src="/../images/unity-ui-drag/%E6%8B%96%E6%8B%BD%E6%95%88%E6%9E%9C.gif"></p><h2 id="画布渲染模式"><a href="#画布渲染模式" class="headerlink" title="画布渲染模式"></a>画布渲染模式</h2><p>上述的拖拽实现，是基于画布的 Overlay 模式。</p><p><img src="/../images/unity-ui-drag/Overlay%E6%A8%A1%E5%BC%8F.png"></p><p>如果把画布渲染模式改成 Camera 模式，上述的代码实现就会出现问题。</p><p>因为 Camera 模式的画布会被缩小到相机的视野范围内，坐标的数值会变得很小。</p><p><img src="/../images/unity-ui-drag/Camera%E6%A8%A1%E5%BC%8F.png"></p><p>此时的运行效果，拖拽后图片飞到了离画布很远的位置，坐标错误。</p><p><img src="/../images/unity-ui-drag/%E5%9D%90%E6%A0%87%E9%94%99%E8%AF%AF.gif"></p><p>所以我们需要对拖拽时获得的坐标位置进行转换。</p><h2 id="坐标转换"><a href="#坐标转换" class="headerlink" title="坐标转换"></a>坐标转换</h2><p>首先，定义一个 <code>RectTransform</code> 变量，在 <code>Awake</code> 时进行赋值。</p><p>然后利用 <code>RectTransformUtility.ScreenPointToWorldPointInRectangle</code> 方法，把自身的 <code>rect</code>、<code>eventData.position</code>、<code>eventData.pressEventCamera</code> 传入，如果坐标转换正常，则会返回转换后的 <code>worldPoint</code>，把这个坐标赋值给 <code>rect.position</code> 就可以了。</p><p>这个方法可以把屏幕空间坐标转换成 UI 元素所在的世界坐标。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> UnityEngine;<br><span class="hljs-keyword">using</span> UnityEngine.EventSystems;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">UIDrag</span> : <span class="hljs-title">MonoBehaviour</span>, <span class="hljs-title">IBeginDragHandler</span>, <span class="hljs-title">IDragHandler</span>, <span class="hljs-title">IEndDragHandler</span><br>&#123;<br>    RectTransform rect;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Awake</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        rect = GetComponent&lt;RectTransform&gt;();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnBeginDrag</span>(<span class="hljs-params">PointerEventData eventData</span>)</span><br><span class="hljs-function"></span>    &#123;<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnDrag</span>(<span class="hljs-params">PointerEventData eventData</span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-keyword">if</span> (RectTransformUtility.ScreenPointToWorldPointInRectangle(rect, eventData.position,<br>        eventData.pressEventCamera, <span class="hljs-keyword">out</span> Vector3 worldPoint))<br>        &#123;<br>            rect.position = worldPoint;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnEndDrag</span>(<span class="hljs-params">PointerEventData eventData</span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>修改代码后，无论画布是 Overlay 还是 Camera 模式，都可以正常拖拽。</p><p><img src="/../images/unity-ui-drag/%E5%88%87%E6%8D%A2%E6%A8%A1%E5%BC%8F.gif"></p><h2 id="开始与结束拖拽"><a href="#开始与结束拖拽" class="headerlink" title="开始与结束拖拽"></a>开始与结束拖拽</h2><p>单纯的拖拽，只需要 <code>OnDrag</code> 方法，而 <code>OnBeginDrag</code> 和 <code>OnEndDrag</code> 可以为拖拽操作添加更多的逻辑处理。</p><p>例如，在场景中添加两个 Image，修改名字，改变颜色和不透明度，放置到左右两边。</p><p><img src="/../images/unity-ui-drag/%E6%B7%BB%E5%8A%A0%E5%AE%B9%E5%99%A8.png"></p><p>然后在代码中添加更多的逻辑，添加一个 <code>raycastResults</code> 用于保存射线检测到的 UI 元素列表，通过 <code>EventSystem.current.RaycastAll</code> 方法，把鼠标经过的 UI 元素都添加到列表中（包含 Image 自己）。</p><p>如果鼠标经过的 UI 元素的名字包含 Container，就把目标元素赋值给 <code>target</code>；如果列表中只有 Image 自己，则 <code>target</code> 为空。</p><p>我们可以在 <code>OnBeginDrag</code> 中，把 Image 原来的位置保存起来。在 <code>OnEndDrag</code> 中，检查 <code>target</code> 为空时，把原来的位置赋值给 Image，回到原位。只有在 <code>target</code> 不为空时，Image 才会移动到目标容器位置。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> System.Collections.Generic;<br><span class="hljs-keyword">using</span> UnityEngine;<br><span class="hljs-keyword">using</span> UnityEngine.EventSystems;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">UIDrag</span> : <span class="hljs-title">MonoBehaviour</span>, <span class="hljs-title">IBeginDragHandler</span>, <span class="hljs-title">IDragHandler</span>, <span class="hljs-title">IEndDragHandler</span><br>&#123;<br>    RectTransform rect;<br><br>    List&lt;RaycastResult&gt; raycastResults;<br>    GameObject target;<br>    Vector3 originPos;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Awake</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        rect = GetComponent&lt;RectTransform&gt;();<br><br>        raycastResults = <span class="hljs-keyword">new</span> List&lt;RaycastResult&gt;();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnBeginDrag</span>(<span class="hljs-params">PointerEventData eventData</span>)</span><br><span class="hljs-function"></span>    &#123;<br>        originPos = transform.position;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnDrag</span>(<span class="hljs-params">PointerEventData eventData</span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-keyword">if</span> (RectTransformUtility.ScreenPointToWorldPointInRectangle(rect, eventData.position,<br>        eventData.pressEventCamera, <span class="hljs-keyword">out</span> Vector3 worldPoint))<br>        &#123;<br>            rect.position = worldPoint;<br>        &#125;<br><br>        <span class="hljs-comment">// 清空上一次的射线检测结果</span><br>        raycastResults.Clear();<br><br>        <span class="hljs-comment">// 进行射线检测</span><br>        EventSystem.current.RaycastAll(eventData, raycastResults);<br>        <br>        <span class="hljs-comment">// 包含两个 UI 元素以上</span><br>        <span class="hljs-keyword">if</span> (raycastResults.Count &gt; <span class="hljs-number">1</span>)<br>        &#123;<br>            <span class="hljs-comment">// 遍历检测结果</span><br>            <span class="hljs-keyword">foreach</span> (RaycastResult result <span class="hljs-keyword">in</span> raycastResults)<br>            &#123;<br>                <span class="hljs-comment">// 跳过自身对象的检测</span><br>                <span class="hljs-keyword">if</span> (result.gameObject == gameObject) <span class="hljs-keyword">continue</span>;<br><br>                <span class="hljs-comment">// 检测到目标容器</span><br>                <span class="hljs-keyword">if</span> (result.gameObject.name.Contains(<span class="hljs-string">&quot;Container&quot;</span>))<br>                &#123;<br>                    target = result.gameObject;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 只包含自己，没有目标</span><br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            target = <span class="hljs-literal">null</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnEndDrag</span>(<span class="hljs-params">PointerEventData eventData</span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-keyword">if</span> (target == <span class="hljs-literal">null</span>)<br>        &#123;<br>            transform.position = originPos;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            transform.position = target.transform.position;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行效果：</p><p><img src="/../images/unity-ui-drag/%E6%8B%96%E5%88%B0%E5%AE%B9%E5%99%A8.gif"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Unity3D</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Unity3D 面试题收录</title>
    <link href="/2024/10/20/unity-interview-questions/"/>
    <url>/2024/10/20/unity-interview-questions/</url>
    
    <content type="html"><![CDATA[<p>Unity3D 客户端面试题收录（持续更新~）</p><span id="more"></span><h1 id="面试题收录"><a href="#面试题收录" class="headerlink" title="面试题收录"></a>面试题收录</h1><p>本文收录一些对于 Unity3D 客户端可能遇到的面试题（持续更新~），答案仅出于个人理解，如有偏差，希望指正。</p><h2 id="Unity3D"><a href="#Unity3D" class="headerlink" title="Unity3D"></a>Unity3D</h2><hr><h3 id="MonoBehaviour-生命周期的各个回调函数"><a href="#MonoBehaviour-生命周期的各个回调函数" class="headerlink" title="MonoBehaviour 生命周期的各个回调函数"></a>MonoBehaviour 生命周期的各个回调函数</h3><ul><li><code>Awake()</code>：初始化，早于 <code>Start()</code> 调用。</li><li><code>Start()</code>：依赖其他对象时的初始化。</li><li><code>FixedUpdate()</code>：每个固定时间步长调用，处理物理更新。</li><li><code>Update()</code>：每帧调用，处理大多数游戏逻辑。</li><li><code>LateUpdate()</code>：每帧调用，在 <code>Update()</code> 之后，通常用于相机跟随。</li><li><code>OnEnable()</code> 和 <code>OnDisable()</code>：在组件启用和禁用时调用。</li><li><code>OnDestroy()</code>：在对象销毁时调用。</li></ul><hr><h3 id="Prefab-是什么，有何作用"><a href="#Prefab-是什么，有何作用" class="headerlink" title="Prefab 是什么，有何作用"></a>Prefab 是什么，有何作用</h3><p>Prefab（预制体） 是一种存储和复用游戏对象（<code>GameObject</code>）及其组件的模板。它允许你创建一个游戏对象的原型，并可以在场景中反复实例化这个对象。</p><hr><h3 id="Unity-常用的资源文件夹有哪些"><a href="#Unity-常用的资源文件夹有哪些" class="headerlink" title="Unity 常用的资源文件夹有哪些"></a>Unity 常用的资源文件夹有哪些</h3><ul><li><code>Resources</code>：任何放在 <code>Resources</code> 文件夹中的资源可以通过 <code>Resources.Load()</code> 方法在运行时加载。该文件夹的内容会被 Unity 打包进最终的游戏构建中。</li><li><code>StreamingAssets</code>：该文件夹用于存放在运行时需要直接访问的文件（如视频、配置文件等）。在构建时，Unity 不会对其内容进行压缩或转换，保持原始格式。访问这些文件时需要使用文件路径。</li><li><code>Editor</code>：该文件夹用于存放编辑器扩展脚本。这些脚本只能在 Unity 编辑器中使用，而不会包含在最终的游戏构建中。</li><li><code>Plugins</code>：用于存放插件（如 DLL 文件或第三方库）。在 Unity 中，放在这个文件夹下的库会被自动识别为插件。</li></ul><hr><h2 id="C"><a href="#C" class="headerlink" title="C#"></a>C#</h2><hr><h3 id="封装、继承、多态三大面向对象特性"><a href="#封装、继承、多态三大面向对象特性" class="headerlink" title="封装、继承、多态三大面向对象特性"></a>封装、继承、多态三大面向对象特性</h3><p>封装是将对象的属性和行为封装在一起，通过访问控制机制（如 <code>private</code>、<code>protected</code>、<code>public</code> 等修饰符）来隐藏对象的内部实现细节。外部只能通过公开的方法（即公共接口）与对象进行交互，而不能直接访问对象的内部数据。这种机制提高了代码的安全性和可维护性。</p><p>继承是通过定义一个类来基于已有类扩展其功能的能力。通过继承，子类可以继承父类的属性和方法，并可以重写或扩展这些功能。继承支持代码的复用和逻辑的扩展。</p><p>多态允许不同类型的对象以统一的接口进行操作。C# 中的多态性主要体现在方法的重载（编译时多态）和方法的重写（运行时多态）。通过多态，父类的引用可以指向子类的对象，执行子类重写的方法。</p><hr><h3 id="值类型和引用类型的区别"><a href="#值类型和引用类型的区别" class="headerlink" title="值类型和引用类型的区别"></a>值类型和引用类型的区别</h3><p>值类型</p><ul><li>存储位置：栈</li><li>数据存储：直接存储数据</li><li>赋值行为：复制数据（相互独立）</li><li>常见类型：<code>int</code>、<code>float</code>、<code>struct</code>、<code>enum</code></li><li>性能：快，分配和回收速度高</li></ul><p>引用类型</p><ul><li>存储位置：堆（数据）、栈（引用）</li><li>数据存储：存储引用（指向堆中的数据）</li><li>赋值行为：复制引用（指向同一数据，互相影响）</li><li>常见类型：<code>class</code>、<code>interface</code>、<code>array</code>、<code>string</code></li><li>性能：相对较慢（涉及垃圾回收）</li></ul><hr><h3 id="浅拷贝和深拷贝的区别"><a href="#浅拷贝和深拷贝的区别" class="headerlink" title="浅拷贝和深拷贝的区别"></a>浅拷贝和深拷贝的区别</h3><p>浅拷贝</p><ul><li>复制内容：仅复制对象的直接字段，对于引用类型字段，只复制引用，不复制引用指向的对象。</li><li>实现方式：可以通过 <code>MemberwiseClone()</code> 方法实现。</li><li>效果：原对象和新对象中的引用类型字段指向同一个内存地址，因此修改其中一个的引用类型字段会影响另一个。值类型字段则互不影响。</li></ul><p>深拷贝</p><ul><li>复制内容：递归复制所有引用类型的对象，生成一个完全独立的新对象。</li><li>实现方式：可以使用自定义拷贝方法、序列化&#x2F;反序列化、第三方库等方式来实现。</li><li>效果：原对象和新对象完全独立，修改其中一个不会影响另一个。</li></ul><blockquote><p>注意：如果直接使用 <code>=</code> 将一个对象赋值给另一个对象变量，并不是严格意义上的浅拷贝，而是赋值引用，让两个变量指向同一个对象实例，修改其中一个的属性会影响另一个。</p><p>使用 <code>MemberwiseClone()</code> 进行浅拷贝，会创建一个新对象实例，值类型字段会被复制，引用类型字段会共享引用。</p></blockquote><hr><h3 id="重载和重写的区别"><a href="#重载和重写的区别" class="headerlink" title="重载和重写的区别"></a>重载和重写的区别</h3><p>重载是一种在同一个类中定义多个同名方法，但参数不同。它提供编译时的多态性，允许方法在同名的情况下处理不同的输入。</p><p>重写是子类通过 <code>override</code> 关键字重新定义父类中的虚方法。它提供运行时的多态性，允许子类提供特定的实现，取代父类的行为。</p><hr><h3 id="委托和事件的区别"><a href="#委托和事件的区别" class="headerlink" title="委托和事件的区别"></a>委托和事件的区别</h3><p>委托是 C# 中的一种类型，类似于函数指针。它允许将方法作为参数进行传递和调用。通过委托，你可以存储对方法的引用，并在需要时执行这些方法。</p><p>事件是基于委托的封装，适用于发布-订阅场景。事件只能在声明它的类内部触发，外部类不能直接调用事件，只能使用 <code>+=</code> 或 <code>-=</code> 进行注册和取消订阅，防止了事件的误用。</p><hr><h2 id="Lua"><a href="#Lua" class="headerlink" title="Lua"></a>Lua</h2><hr><h3 id="pairs-和-ipairs-的区别"><a href="#pairs-和-ipairs-的区别" class="headerlink" title="pairs 和 ipairs 的区别"></a>pairs 和 ipairs 的区别</h3><p><code>pairs</code> 用于遍历所有键值对，适用于不规则的表或键为字符串的关联表，遍历顺序不固定。</p><p><code>ipairs</code> 用于遍历数组形式的表，适用于数值键为连续索引的场合（从 1 开始），并在遇到第一个 <code>nil</code> 时停止。</p><hr><h3 id="如何判断一个-table-为空"><a href="#如何判断一个-table-为空" class="headerlink" title="如何判断一个 table 为空"></a>如何判断一个 table 为空</h3><p>在 Lua 中判断一个 <code>table</code> 是否为空并没有内置的函数，但可以通过遍历 <code>table</code> 来判断其中是否有任何元素。</p><p>一个常见的方法是使用 <code>next()</code> 函数来检查 <code>table</code> 中是否存在任何键值对。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isTableEmpty</span><span class="hljs-params">(t)</span></span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">next</span>(t) == <span class="hljs-literal">nil</span><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p><code>next(t)</code>：返回 <code>t</code> 中的第一个键值对。如果 <code>t</code> 中没有任何元素，则返回 <code>nil</code>。</p><blockquote><p>注意：不能直接通过 <code>#t</code>（长度运算符）来判断表是否为空，因为 <code>#t</code> 只对具有 <strong>连续整数键</strong> 的数组部分有效。</p><p>也不能简单判断 <code>t == nil</code>，因为要判断的是 table 里面是否有元素，而不是 t 变量是否有引用。</p></blockquote><hr><h3 id="if-0-的结果"><a href="#if-0-的结果" class="headerlink" title="if 0 的结果"></a>if 0 的结果</h3><p>在 Lua 中，只有 <strong><code>false</code></strong> 和 <strong><code>nil</code></strong> 被认为是 <code>假</code>，其他所有值（包括 <code>0</code> 和空字符串 <code>&quot;&quot;</code>）都被认为是 <code>真</code>。</p><hr><h3 id="loadfile、dofile、require-的区别"><a href="#loadfile、dofile、require-的区别" class="headerlink" title="loadfile、dofile、require 的区别"></a>loadfile、dofile、require 的区别</h3><p><code>loadfile</code></p><ul><li>编译但不执行代码。</li><li>返回编译好的函数，需要手动调用来执行。</li></ul><p><code>dofile</code></p><ul><li>立即加载并执行代码。</li><li>不缓存结果，每次调用都重新加载和执行文件。</li></ul><p><code>require</code></p><ul><li>专为模块系统设计。</li><li>仅加载和执行一次模块，后续调用返回缓存结果。</li><li>支持基于 package.path 和 package.cpath 查找模块。</li></ul><hr><h3 id="如何实现面向对象"><a href="#如何实现面向对象" class="headerlink" title="如何实现面向对象"></a>如何实现面向对象</h3><p>Lua 并不直接支持面向对象编程，我们可以通过 <code>table</code> 和 <code>metatable</code> 来模拟面向对象。</p><p>通常会用一个 <code>table</code> 表示类，把它的 <code>__index</code> 元方法指向自己，定义一个 <code>new</code> 构造函数，在构造函数中创建一个新的 <code>table</code> 作为对象，通过 <code>setmetatable</code> 为对象设置元表，最后返回实例对象。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs lua">Person = &#123;&#125;  <span class="hljs-comment">-- 定义一个类 Person</span><br>Person.<span class="hljs-built_in">__index</span> = Person  <span class="hljs-comment">-- 设置 __index 元方法</span><br><br><span class="hljs-comment">-- 类的构造函数</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person:new</span><span class="hljs-params">(name, age)</span></span><br>    <span class="hljs-keyword">local</span> obj = &#123;&#125;  <span class="hljs-comment">-- 创建一个新表来表示对象</span><br>    <span class="hljs-built_in">setmetatable</span>(obj, Person)  <span class="hljs-comment">-- 设置 metatable，表示 obj 是 Person 类的实例</span><br>    obj.name = name <span class="hljs-keyword">or</span> <span class="hljs-string">&quot;Unknown&quot;</span><br>    obj.age = age <span class="hljs-keyword">or</span> <span class="hljs-number">0</span><br>    <span class="hljs-keyword">return</span> obj<br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">-- 定义一个方法</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person:speak</span><span class="hljs-params">()</span></span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;name = &quot;</span> .. <span class="hljs-built_in">self</span>.name .. <span class="hljs-string">&quot;, age = &quot;</span> .. <span class="hljs-built_in">self</span>.age)<br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">-- 创建对象</span><br><span class="hljs-keyword">local</span> p1 = Person:new(<span class="hljs-string">&quot;Alice&quot;</span>, <span class="hljs-number">10</span>)<br><span class="hljs-keyword">local</span> p2 = Person:new(<span class="hljs-string">&quot;Bob&quot;</span>, <span class="hljs-number">20</span>)<br><br>p1:speak()  <span class="hljs-comment">-- 输出：name = Alice, age = 10</span><br>p2:speak()  <span class="hljs-comment">-- 输出：name = Bob, age = 20</span><br></code></pre></td></tr></table></figure><p>这里之所以把类的 <code>__index</code> 元方法指向自己，是为了实现 Lua 的查找机制。当我们试图访问一个对象上不存在的字段或方法时，Lua 会查找该对象的元表（<code>metatable</code>），并尝试调用其 <code>__index</code> 元方法。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Unity3D</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Unity3D 观察者模式</title>
    <link href="/2024/10/13/unity-observer/"/>
    <url>/2024/10/13/unity-observer/</url>
    
    <content type="html"><![CDATA[<p>Unity3D 泛型事件系统</p><span id="more"></span><h1 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h1><p>观察者模式是一种行为设计模式，通过订阅机制，可以让对象触发事件时，通知多个其他对象。</p><p>在游戏逻辑中，UI 界面通常会监听一些事件，当数据层发生变化时，通过触发事件，通知 UI 界面进行刷新。</p><h2 id="定义事件类型"><a href="#定义事件类型" class="headerlink" title="定义事件类型"></a>定义事件类型</h2><p>先进行简单的一步，创建 <code>GameEventType.cs</code> 脚本，定义一个枚举类型，可以在枚举中添加多个事件名。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-built_in">enum</span> GameEventType<br>&#123;<br>    PlayerAttack,  <span class="hljs-comment">// 玩家攻击</span><br>    PlayerDeath,   <span class="hljs-comment">// 玩家阵亡</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="事件管理器"><a href="#事件管理器" class="headerlink" title="事件管理器"></a>事件管理器</h2><p>接着，创建 <code>EventManager.cs</code> 脚本，定义多个泛型委托，这里声明了单参数和两个参数的委托，参数类型是泛型 T。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> System;<br><span class="hljs-keyword">using</span> System.Collections.Generic;<br><br><span class="hljs-comment">// 单参数事件处理委托</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">delegate</span> <span class="hljs-keyword">void</span> <span class="hljs-title">EventDelegate</span>&lt;<span class="hljs-title">T</span>&gt;(<span class="hljs-params">T param</span>)</span>;<br><br><span class="hljs-comment">// 两个参数的事件处理委托</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">delegate</span> <span class="hljs-keyword">void</span> <span class="hljs-title">EventDelegate</span>&lt;<span class="hljs-title">T1</span>, <span class="hljs-title">T2</span>&gt;(<span class="hljs-params">T1 param1, T2 param2</span>)</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">EventManager</span><br>&#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>在 EventManager 类中，定义两个字典，分别存储单参数和两个参数的委托列表。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">EventManager</span><br>&#123;<br>    <span class="hljs-comment">// 单参数事件的字典，键是事件类型，值是对应的事件处理器</span><br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-title">Dictionary</span>&lt;<span class="hljs-title">int</span>, <span class="hljs-title">Delegate</span>&gt; eventTableSingle</span> = <span class="hljs-keyword">new</span> Dictionary&lt;<span class="hljs-built_in">int</span>, Delegate&gt;();<br><br>    <span class="hljs-comment">// 两个参数事件的字典</span><br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-title">Dictionary</span>&lt;<span class="hljs-title">int</span>, <span class="hljs-title">Delegate</span>&gt; eventTableDouble</span> = <span class="hljs-keyword">new</span> Dictionary&lt;<span class="hljs-built_in">int</span>, Delegate&gt;();<br>&#125;<br></code></pre></td></tr></table></figure><p>然后分别添加三个接口：订阅、取消订阅、触发。</p><ul><li>订阅，接收事件名和函数，判断字典中是否存在事件名，不存在则添加新的事件，然后把函数连接到委托中。</li><li>取消订阅，接收事件名和函数，判断字典中是否存在事件名，存在则从委托中移除函数。</li><li>触发，接收事件名和参数，判断字典中是否存在事件名，存在则取出委托并调用。</li></ul><p>如果后续还需要三个参数，可以依此类推，添加字典和接口。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">EventManager</span><br>&#123;<br>    <span class="hljs-comment">// ...</span><br>    <br>    <span class="hljs-comment">// 订阅单参数事件</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">AddListener</span>&lt;<span class="hljs-title">T</span>&gt;(<span class="hljs-params">GameEventType gameEventType, EventDelegate&lt;T&gt; handler</span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-built_in">int</span> eventType = (<span class="hljs-built_in">int</span>)gameEventType;<br>        <span class="hljs-keyword">if</span> (!eventTableSingle.ContainsKey(eventType))<br>        &#123;<br>            eventTableSingle.Add(eventType, <span class="hljs-literal">null</span>);<br>        &#125;<br>        eventTableSingle[eventType] = (EventDelegate&lt;T&gt;)eventTableSingle[eventType] + handler;<br>    &#125;<br><br>    <span class="hljs-comment">// 取消订阅单参数事件</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">RemoveListener</span>&lt;<span class="hljs-title">T</span>&gt;(<span class="hljs-params">GameEventType gameEventType, EventDelegate&lt;T&gt; handler</span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-built_in">int</span> eventType = (<span class="hljs-built_in">int</span>)gameEventType;<br>        <span class="hljs-keyword">if</span> (eventTableSingle.ContainsKey(eventType))<br>        &#123;<br>            eventTableSingle[eventType] = (EventDelegate&lt;T&gt;)eventTableSingle[eventType] - handler;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 触发单参数事件</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Trigger</span>&lt;<span class="hljs-title">T</span>&gt;(<span class="hljs-params">GameEventType gameEventType, T param</span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-built_in">int</span> eventType = (<span class="hljs-built_in">int</span>)gameEventType;<br>        <span class="hljs-keyword">if</span> (eventTableSingle.ContainsKey(eventType))<br>        &#123;<br>            <span class="hljs-keyword">var</span> callback = eventTableSingle[eventType] <span class="hljs-keyword">as</span> EventDelegate&lt;T&gt;;<br>            callback?.Invoke(param);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 订阅双参数事件</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">AddListener</span>&lt;<span class="hljs-title">T1</span>, <span class="hljs-title">T2</span>&gt;(<span class="hljs-params">GameEventType gameEventType, EventDelegate&lt;T1, T2&gt; handler</span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-built_in">int</span> eventType = (<span class="hljs-built_in">int</span>)gameEventType;<br>        <span class="hljs-keyword">if</span> (!eventTableDouble.ContainsKey(eventType))<br>        &#123;<br>            eventTableDouble.Add(eventType, <span class="hljs-literal">null</span>);<br>        &#125;<br>        eventTableDouble[eventType] = (EventDelegate&lt;T1, T2&gt;)eventTableDouble[eventType] + handler;<br>    &#125;<br><br>    <span class="hljs-comment">// 取消订阅双参数事件</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">RemoveListener</span>&lt;<span class="hljs-title">T1</span>, <span class="hljs-title">T2</span>&gt;(<span class="hljs-params">GameEventType gameEventType, EventDelegate&lt;T1, T2&gt; handler</span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-built_in">int</span> eventType = (<span class="hljs-built_in">int</span>)gameEventType;<br>        <span class="hljs-keyword">if</span> (eventTableDouble.ContainsKey(eventType))<br>        &#123;<br>            eventTableDouble[eventType] = (EventDelegate&lt;T1, T2&gt;)eventTableDouble[eventType] - handler;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 触发双参数事件</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Trigger</span>&lt;<span class="hljs-title">T1</span>, <span class="hljs-title">T2</span>&gt;(<span class="hljs-params">GameEventType gameEventType, T1 param1, T2 param2</span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-built_in">int</span> eventType = (<span class="hljs-built_in">int</span>)gameEventType;<br>        <span class="hljs-keyword">if</span> (eventTableDouble.ContainsKey(eventType))<br>        &#123;<br>            <span class="hljs-keyword">var</span> callback = eventTableDouble[eventType] <span class="hljs-keyword">as</span> EventDelegate&lt;T1, T2&gt;;<br>            callback?.Invoke(param1, param2);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="添加和移除监听"><a href="#添加和移除监听" class="headerlink" title="添加和移除监听"></a>添加和移除监听</h2><p>创建 <code>PlayerEvent.cs</code> 脚本，在场景中也创建一个游戏物体，挂载该脚本。</p><p><img src="/../images/unity-observer/%E6%B7%BB%E5%8A%A0%E4%BA%8B%E4%BB%B6%E7%9B%91%E5%90%AC.png"></p><p>在 OnEnable 方法中，调用 <code>EventManager.AddListener</code> 添加事件监听。</p><p>在 OnDisable 方法中，调用 <code>EventManager.RemoveListener</code> 移除事件监听。</p><p>此时可以确定泛型参数的实际类型，并在回调函数中接收参数，进行逻辑处理。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> System.Collections;<br><span class="hljs-keyword">using</span> System.Collections.Generic;<br><span class="hljs-keyword">using</span> UnityEngine;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">PlayerEvent</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OnEnable</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        EventManager.AddListener&lt;<span class="hljs-built_in">int</span>&gt;(GameEventType.PlayerAttack, OnPlayerAttack);<br>        EventManager.AddListener&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">int</span>&gt;(GameEventType.PlayerDeath, OnPlayerDeath);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OnDisable</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        EventManager.RemoveListener&lt;<span class="hljs-built_in">int</span>&gt;(GameEventType.PlayerAttack, OnPlayerAttack);<br>        EventManager.RemoveListener&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">int</span>&gt;(GameEventType.PlayerDeath, OnPlayerDeath);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OnPlayerAttack</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> damage</span>)</span><br><span class="hljs-function"></span>    &#123;<br>        Debug.Log(<span class="hljs-string">$&quot;玩家发起攻击，造成伤害 <span class="hljs-subst">&#123;damage&#125;</span>&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OnPlayerDeath</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> reason, <span class="hljs-built_in">int</span> damage</span>)</span><br><span class="hljs-function"></span>    &#123;<br>        Debug.Log(<span class="hljs-string">$&quot;玩家阵亡，原因 <span class="hljs-subst">&#123;reason&#125;</span>，受到伤害 <span class="hljs-subst">&#123;damage&#125;</span>&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="触发事件"><a href="#触发事件" class="headerlink" title="触发事件"></a>触发事件</h2><p>创建 <code>PlayerEventTest.cs</code> 脚本，在 Update 方法中，根据键盘按键，触发不同的事件。</p><p>这里定义 <code>PlayerEvent</code> 变量，按下 E 键对其游戏物体进行显示隐藏，是为了测试事件的添加和移除。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> System.Collections;<br><span class="hljs-keyword">using</span> System.Collections.Generic;<br><span class="hljs-keyword">using</span> UnityEngine;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">PlayerEventTest</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-keyword">public</span> PlayerEvent playerEvent;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Update</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-keyword">if</span> (Input.GetKeyDown(KeyCode.Q))<br>        &#123;<br>            EventManager.Trigger(GameEventType.PlayerAttack, <span class="hljs-number">100</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (Input.GetKeyDown(KeyCode.W))<br>        &#123;<br>            EventManager.Trigger(GameEventType.PlayerDeath, <span class="hljs-string">&quot;Boss攻击&quot;</span>, <span class="hljs-number">999</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (Input.GetKeyDown(KeyCode.E))<br>        &#123;<br>            <span class="hljs-built_in">bool</span> isActive = playerEvent.gameObject.activeInHierarchy;<br>            playerEvent.gameObject.SetActive(!isActive);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在场景中添加游戏物体，并挂载该脚本，拖拽引用。</p><p><img src="/../images/unity-observer/%E8%A7%A6%E5%8F%91%E4%BA%8B%E4%BB%B6.png"></p><p>运行游戏：</p><ul><li>按下 Q 键触发了 <code>PlayerAttack</code> 事件</li><li>按下 W 键触发了 <code>PlayerDeath</code> 事件</li><li>按下 E 键隐藏了 <code>PlayerEvent</code> 游戏物体，同时事件被移除，不会再响应 Q 和 W 键，除非再次按下 E 键，显示游戏物体并添加事件。</li></ul><p>如图所示：</p><p><img src="/../images/unity-observer/%E8%BF%90%E8%A1%8C%E6%95%88%E6%9E%9C.gif"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Unity3D</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Unity3D 单例模式</title>
    <link href="/2024/10/06/unity-singleton/"/>
    <url>/2024/10/06/unity-singleton/</url>
    
    <content type="html"><![CDATA[<p>Unity3D 泛型单例</p><span id="more"></span><h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1><p>单例模式是一种创建型设计模式，能够保证一个类只有一个实例，提供访问实例的全局节点。</p><p>通常会把一些管理类设置成单例，例如 <code>GameManager</code>、<code>UIManager</code> 等，可以很方便地使用这些管理类单例，存储变量和调用接口。</p><h2 id="手动挂载的泛型单例"><a href="#手动挂载的泛型单例" class="headerlink" title="手动挂载的泛型单例"></a>手动挂载的泛型单例</h2><p>创建 <code>SingletonMono.cs</code> 脚本，在类名后面添加泛型和约束，定义泛型变量，并且在 <code>Awake</code> 方法中对变量进行赋值。</p><p>这里的 <code>Awake</code> 方法是虚方法，当有管理类继承这个 <code>SingletonMono</code> 时，可以重写 <code>Awake</code> 方法进行额外的操作。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> System.Collections;<br><span class="hljs-keyword">using</span> System.Collections.Generic;<br><span class="hljs-keyword">using</span> UnityEngine;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">SingletonMono</span>&lt;<span class="hljs-title">T</span>&gt; : <span class="hljs-title">MonoBehaviour</span> <span class="hljs-keyword">where</span> <span class="hljs-title">T</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-keyword">static</span> T instance;  <span class="hljs-comment">// 私有静态实例</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> T Instance &#123; <span class="hljs-keyword">get</span> &#123; <span class="hljs-keyword">return</span> instance; &#125; &#125;  <span class="hljs-comment">// 公开实例属性</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Awake</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-keyword">if</span> (instance == <span class="hljs-literal">null</span>)<br>        &#123;<br>            instance = <span class="hljs-keyword">this</span> <span class="hljs-keyword">as</span> T;<br>            <span class="hljs-comment">// 切换场景时不销毁这个游戏物体</span><br>            DontDestroyOnLoad(gameObject);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-comment">// 切换场景时，如果场景里有单例游戏物体，在已经创建单例的情况下，销毁多余的游戏物体</span><br>            Destroy(gameObject);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>创建 <code>GameManager.cs</code> 脚本，继承 <code>SingletonMono</code> 这个类。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> System.Collections;<br><span class="hljs-keyword">using</span> System.Collections.Generic;<br><span class="hljs-keyword">using</span> UnityEngine;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">GameManager</span> : <span class="hljs-title">SingletonMono</span>&lt;<span class="hljs-title">GameManager</span>&gt;<br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> score;<br><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Awake</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-comment">// 调用基类的 Awake 方法</span><br>        <span class="hljs-keyword">base</span>.Awake();<br>        <span class="hljs-comment">// 可以进行额外的初始化操作</span><br>        score = <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Update</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在场景中创建游戏物体，把 <code>GameManager</code> 脚本手动挂载到游戏物体上。</p><p><img src="/../images/unity-singleton/%E6%89%8B%E5%8A%A8%E6%8C%82%E8%BD%BD.png"></p><p>创建 <code>SingletonTest.cs</code> 脚本，简单使用一下 <code>GameManager.Instance</code> 单例的变量。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> System.Collections;<br><span class="hljs-keyword">using</span> System.Collections.Generic;<br><span class="hljs-keyword">using</span> UnityEngine;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">SingletonTest</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-built_in">int</span> score = GameManager.Instance.score;<br>        Debug.Log(<span class="hljs-string">$&quot;score = <span class="hljs-subst">&#123;score&#125;</span>&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行游戏，可以看到 <code>GameManager</code> 在 <code>DontDestroyOnLoad</code> 场景中，可以获取到 <code>score</code> 变量进行打印。</p><p><img src="/../images/unity-singleton/%E4%BD%BF%E7%94%A8%E5%8D%95%E4%BE%8B.png"></p><h2 id="自动挂载的泛型单例"><a href="#自动挂载的泛型单例" class="headerlink" title="自动挂载的泛型单例"></a>自动挂载的泛型单例</h2><p>创建 <code>SingletonMonoAuto.cs</code> 脚本，在类名后面添加泛型和约束，定义泛型变量。</p><p>因为它并不需要在场景中手动创建游戏物体，也不会通过 <code>Awake</code> 方法对变量进行赋值。</p><p>所以在获取 Instance 属性时，如果属性为空，就通过代码创建一个不会销毁的游戏物体，并自动挂载单例组件。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> System.Collections;<br><span class="hljs-keyword">using</span> System.Collections.Generic;<br><span class="hljs-keyword">using</span> UnityEngine;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">SingletonMonoAuto</span>&lt;<span class="hljs-title">T</span>&gt; : <span class="hljs-title">MonoBehaviour</span> <span class="hljs-keyword">where</span> <span class="hljs-title">T</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-keyword">static</span> T instance;  <span class="hljs-comment">// 私有静态实例</span><br><br>    <span class="hljs-comment">// 公开实例属性</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> T Instance<br>    &#123;<br>        <span class="hljs-keyword">get</span><br>        &#123;<br>            <span class="hljs-keyword">if</span> (instance == <span class="hljs-literal">null</span>)<br>            &#123;<br>                <span class="hljs-comment">// 创建一个新的游戏物体</span><br>                GameObject obj = <span class="hljs-keyword">new</span> GameObject();<br>                <span class="hljs-comment">// 根据类型进行重命名</span><br>                obj.name = <span class="hljs-keyword">typeof</span>(T).ToString();<br>                <span class="hljs-comment">// 自动挂载单例组件</span><br>                instance = obj.AddComponent&lt;T&gt;();<br>                <span class="hljs-comment">// 不可销毁</span><br>                DontDestroyOnLoad(obj);<br>            &#125;<br>            <span class="hljs-comment">// 返回实例</span><br>            <span class="hljs-keyword">return</span> instance;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>创建一个 <code>UIManager.cs</code> 脚本，继承 <code>SingletonMonoAuto</code> 这个类。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> System.Collections;<br><span class="hljs-keyword">using</span> System.Collections.Generic;<br><span class="hljs-keyword">using</span> UnityEngine;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">UIManager</span> : <span class="hljs-title">SingletonMonoAuto</span>&lt;<span class="hljs-title">UIManager</span>&gt;<br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Awake</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        Debug.Log(<span class="hljs-string">&quot;初始化 UIManager&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Update</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在 <code>SingletonTest.cs</code> 脚本，简单使用一下 <code>UIManager.Instance</code> 单例。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> System.Collections;<br><span class="hljs-keyword">using</span> System.Collections.Generic;<br><span class="hljs-keyword">using</span> UnityEngine;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">SingletonTest</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-built_in">int</span> score = GameManager.Instance.score;<br>        Debug.Log(<span class="hljs-string">$&quot;score = <span class="hljs-subst">&#123;score&#125;</span>&quot;</span>);<br><br>        UIManager uiManager = UIManager.Instance;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行游戏，可以看到 <code>UIManager</code> 在 <code>DontDestroyOnLoad</code> 场景中自动创建。</p><p><img src="/../images/unity-singleton/%E8%87%AA%E5%8A%A8%E6%8C%82%E8%BD%BD.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Unity3D</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Unity3D 客户端多开</title>
    <link href="/2024/09/29/unity-client-open-more/"/>
    <url>/2024/09/29/unity-client-open-more/</url>
    
    <content type="html"><![CDATA[<p>Unity3D 实现客户端多开</p><span id="more"></span><h1 id="客户端多开"><a href="#客户端多开" class="headerlink" title="客户端多开"></a>客户端多开</h1><p>最近在做好友聊天系统，为了方便测试，需要再开一个客户端。</p><p>简单的方法，就是直接拷贝一个新的项目，但是需要很多时间和占用空间。</p><p>查阅了网络资料，发现有一种软链接，可以仅通过创建文件夹，就能实现多开。</p><h2 id="mklink"><a href="#mklink" class="headerlink" title="mklink"></a>mklink</h2><p>按下 win + R 键，打开 cmd 命令提示符，输入 <code>mklink</code>，可以看到关于该命令的一些参数介绍。</p><p><img src="/../images/unity-client-open-more/%E5%91%BD%E4%BB%A4%E6%8F%90%E7%A4%BA%E7%AC%A6.png"></p><p>我们需要使用 <code>mklink</code> 命令，对三个文件夹进行软链接。</p><ul><li>Assets</li><li>Packages</li><li>ProjectSettings</li></ul><p>如图，高亮的三个文件夹。</p><p><img src="/../images/unity-client-open-more/%E5%B7%A5%E7%A8%8B%E7%9B%AE%E5%BD%95.png"></p><h2 id="创建文件夹"><a href="#创建文件夹" class="headerlink" title="创建文件夹"></a>创建文件夹</h2><p>现在有一个工程，路径是</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">C:<span class="hljs-symbol">\B</span>uild<span class="hljs-symbol">\M</span>yProject<br></code></pre></td></tr></table></figure><p>创建一个文件夹，路径是（也可以放到别的磁盘目录）</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">C:<span class="hljs-symbol">\B</span>uild<span class="hljs-symbol">\M</span>yProjectCopy<br></code></pre></td></tr></table></figure><p><img src="/../images/unity-client-open-more/%E5%88%9B%E5%BB%BA%E6%96%87%E4%BB%B6%E5%A4%B9.png"></p><p>打开命令提示符，输入 <code>mklink /j 目标文件夹 源文件夹</code></p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">mklink /j C:<span class="hljs-symbol">\B</span>uild<span class="hljs-symbol">\M</span>yProjectCopy<span class="hljs-symbol">\A</span>ssets C:<span class="hljs-symbol">\B</span>uild<span class="hljs-symbol">\M</span>yProject<span class="hljs-symbol">\A</span>ssets<br></code></pre></td></tr></table></figure><p>按下回车键后，提示创建了联接。</p><p><img src="/../images/unity-client-open-more/%E5%88%9B%E5%BB%BA%E8%BD%AF%E9%93%BE%E6%8E%A5.png"></p><p>看看 MyProjectCopy 的文件夹目录，已经有一个 Assets 文件夹了，并且左下角有一个类似快捷方式的图标，但跟快捷方式还是有区别的。</p><p><img src="/../images/unity-client-open-more/%E6%96%B0%E7%9A%84%E6%96%87%E4%BB%B6%E5%A4%B9.png"></p><p>继续输入命令，直到把三个文件夹都联接上。</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">mklink /j C:<span class="hljs-symbol">\B</span>uild<span class="hljs-symbol">\M</span>yProjectCopy<span class="hljs-symbol">\P</span>ackages C:<span class="hljs-symbol">\B</span>uild<span class="hljs-symbol">\M</span>yProject<span class="hljs-symbol">\P</span>ackages<br></code></pre></td></tr></table></figure><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">mklink /j C:<span class="hljs-symbol">\B</span>uild<span class="hljs-symbol">\M</span>yProjectCopy<span class="hljs-symbol">\P</span>rojectSettings C:<span class="hljs-symbol">\B</span>uild<span class="hljs-symbol">\M</span>yProject<span class="hljs-symbol">\P</span>rojectSettings<br></code></pre></td></tr></table></figure><h2 id="打开新工程"><a href="#打开新工程" class="headerlink" title="打开新工程"></a>打开新工程</h2><p>现在就可以使用 hub 打开新的工程目录了。</p><p><img src="/../images/unity-client-open-more/%E6%89%93%E5%BC%80%E6%96%B0%E5%B7%A5%E7%A8%8B.png"></p><p>如图，已经打开了两个客户端，并且使用的是同一套资源代码。</p><p><img src="/../images/unity-client-open-more/%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%8F%8C%E5%BC%80.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Unity3D</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Unity3D 小案例 像素贪吃蛇 03 蛇的碰撞</title>
    <link href="/2024/09/22/unity-pixel-snake-3/"/>
    <url>/2024/09/22/unity-pixel-snake-3/</url>
    
    <content type="html"><![CDATA[<p>Unity3D 小案例 像素贪吃蛇 第三期 蛇的碰撞（完结）</p><span id="more"></span><h1 id="像素贪吃蛇"><a href="#像素贪吃蛇" class="headerlink" title="像素贪吃蛇"></a>像素贪吃蛇</h1><h2 id="碰撞蛇身"><a href="#碰撞蛇身" class="headerlink" title="碰撞蛇身"></a>碰撞蛇身</h2><p>当蛇头碰撞到蛇身时，游戏应该判定为失败。</p><p>找到蛇身预制体，添加 Body 标签和碰撞体，碰撞体的大小为 0.5，跟蛇头和蛇身的碰撞体范围一样，避免因碰撞范围过大而产生错误的碰撞效果。</p><p><img src="/../images/unity-pixel-snake-3/%E6%B7%BB%E5%8A%A0%E8%9B%87%E8%BA%AB%E6%A0%87%E7%AD%BE.png"></p><p>修改一下 OnTriggerEnter2D 方法，判断碰撞到 Body 标签的物体，判定游戏失败，蛇停止移动。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> System.Collections;<br><span class="hljs-keyword">using</span> System.Collections.Generic;<br><span class="hljs-keyword">using</span> UnityEngine;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Snake</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OnTriggerEnter2D</span>(<span class="hljs-params">Collider2D other</span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-keyword">if</span> (other.CompareTag(<span class="hljs-string">&quot;Food&quot;</span>))<br>        &#123;<br>            <span class="hljs-comment">// ...</span><br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (other.CompareTag(<span class="hljs-string">&quot;Body&quot;</span>))<br>        &#123;<br>            <span class="hljs-comment">// 取消定时器</span><br>            CancelInvoke(<span class="hljs-keyword">nameof</span>(Move));<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果此时运行游戏，会发现蛇一开始就不动了。因为之前初始生成身体时，都在同一个位置生成，一开始就会碰撞蛇身。</p><p>修改一下之前的逻辑，让初始生成的蛇身偏移位置。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> System.Collections;<br><span class="hljs-keyword">using</span> System.Collections.Generic;<br><span class="hljs-keyword">using</span> UnityEngine;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Snake</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    Vector2 initPos;  <span class="hljs-comment">// 初始位置</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        initPos = transform.position;<br><br>        <span class="hljs-comment">// 初始生成身体</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; initBodyCount; i++)<br>        &#123;<br>            GenerateBody(<span class="hljs-literal">true</span>);<br>        &#125;<br><br>        <span class="hljs-comment">// ...</span><br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">GenerateBody</span>(<span class="hljs-params"><span class="hljs-built_in">bool</span> isInit = <span class="hljs-literal">false</span></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        GameObject obj = Instantiate(body);<br><br>        <span class="hljs-comment">// 初始生成</span><br>        <span class="hljs-keyword">if</span> (isInit)<br>        &#123;<br>            obj.transform.position = initPos + Vector2.left;<br>            initPos = obj.transform.position;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-comment">// 已有身体</span><br>            <span class="hljs-keyword">if</span> (bodyList.Count &gt; <span class="hljs-number">0</span>)<br>            &#123;<br>                <span class="hljs-comment">// 获取最后一个身体，在它的位置生成</span><br>                GameObject lastBody = bodyList[bodyList.Count - <span class="hljs-number">1</span>];<br>                obj.transform.position = lastBody.transform.position;<br>            &#125;<br>            <span class="hljs-comment">// 没有身体</span><br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-comment">// 以蛇头的位置生成身体</span><br>                obj.transform.position = transform.position;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// ...</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>现在运行游戏，蛇身的初始位置就不会跟蛇头重叠了。</p><p><img src="/../images/unity-pixel-snake-3/%E5%88%9D%E5%A7%8B%E4%BD%8D%E7%BD%AE.png"></p><p>另外，蛇头的层级也要调整一下，当蛇头与蛇身重叠时，让蛇头能够显示在蛇身之上。</p><p><img src="/../images/unity-pixel-snake-3/%E8%B0%83%E6%95%B4%E5%B1%82%E7%BA%A7.png"></p><p>运行效果：</p><p><img src="/../images/unity-pixel-snake-3/%E8%9B%87%E5%A4%B4%E7%A2%B0%E6%92%9E%E8%9B%87%E8%BA%AB.gif"></p><h2 id="添加墙壁"><a href="#添加墙壁" class="headerlink" title="添加墙壁"></a>添加墙壁</h2><p>创建四个正方形，调整缩放和位置，调整颜色，分别布置在上下左右四个方向。</p><p>因为蛇的移动范围，在 X 轴是 <code>[-8, 8]</code>，在 Y 轴是 <code>[-4, 4]</code>，所以左右的墙壁分别放置在 X 轴的 -9 和 9 的位置，上下的墙壁分别放置在 Y 轴的 5 和 -5 的位置。</p><p><img src="/../images/unity-pixel-snake-3/%E5%B8%83%E7%BD%AE%E5%A2%99%E5%A3%81.png"></p><p>然后给墙壁也添加标签 Wall，并且要添加碰撞体，碰撞体的大小保持默认的 1 即可。</p><p><img src="/../images/unity-pixel-snake-3/%E6%B7%BB%E5%8A%A0%E5%A2%99%E5%A3%81%E6%A0%87%E7%AD%BE.png"></p><p>在代码中也添加碰撞墙壁的逻辑。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> System.Collections;<br><span class="hljs-keyword">using</span> System.Collections.Generic;<br><span class="hljs-keyword">using</span> UnityEngine;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Snake</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OnTriggerEnter2D</span>(<span class="hljs-params">Collider2D other</span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-keyword">if</span> (other.CompareTag(<span class="hljs-string">&quot;Food&quot;</span>))<br>        &#123;<br>            <span class="hljs-comment">// ...</span><br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (other.CompareTag(<span class="hljs-string">&quot;Body&quot;</span>) || other.CompareTag(<span class="hljs-string">&quot;Wall&quot;</span>))<br>        &#123;<br>            <span class="hljs-comment">// 取消定时器</span><br>            CancelInvoke(<span class="hljs-keyword">nameof</span>(Move));<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行效果：</p><p><img src="/../images/unity-pixel-snake-3/%E8%9B%87%E5%A4%B4%E7%A2%B0%E6%92%9E%E5%A2%99%E5%A3%81.gif"></p><h2 id="游戏失败"><a href="#游戏失败" class="headerlink" title="游戏失败"></a>游戏失败</h2><h3 id="显示失败界面"><a href="#显示失败界面" class="headerlink" title="显示失败界面"></a>显示失败界面</h3><p>简单搭建一个游戏失败界面。</p><p><img src="/../images/unity-pixel-snake-3/%E6%B8%B8%E6%88%8F%E5%A4%B1%E8%B4%A5%E7%95%8C%E9%9D%A2.png"></p><p>创建一个 <code>UIGameOver.cs</code> 脚本，引用命名空间 <code>UnityEngine.UI</code>，定义 UI 组件变量，拖拽引用。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> UnityEngine;<br><span class="hljs-keyword">using</span> UnityEngine.UI;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">UIGameOver</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-keyword">public</span> Button btnRestart;<br>    <span class="hljs-keyword">public</span> CanvasGroup canvasGroup;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/../images/unity-pixel-snake-3/%E6%8B%96%E6%8B%BD%E5%BC%95%E7%94%A8.png"></p><p>创建一个 <code>GameManager.cs</code> 脚本，引用命名空间 <code>System</code>，创建单例。</p><p>定义一个 <code>Action</code> 事件 <code>showGameOver</code>，带一个布尔值参数，并对外提供一个接口，用于触发事件。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> System;<br><span class="hljs-keyword">using</span> UnityEngine;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">GameManager</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> GameManager instance;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">event</span> Action&lt;<span class="hljs-built_in">bool</span>&gt; showGameOver;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Awake</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-keyword">if</span> (instance == <span class="hljs-literal">null</span>)<br>        &#123;<br>            instance = <span class="hljs-keyword">this</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            Destroy(gameObject);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">TriggerGameOver</span>(<span class="hljs-params"><span class="hljs-built_in">bool</span> isShow</span>)</span><br><span class="hljs-function"></span>    &#123;<br>        showGameOver.Invoke(isShow);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>界面脚本添加事件监听，根据是否显示界面，修改 <code>canvasGroup</code> 的参数。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> UnityEngine;<br><span class="hljs-keyword">using</span> UnityEngine.UI;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">UIGameOver</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-keyword">public</span> Button btnRestart;<br>    <span class="hljs-keyword">public</span> CanvasGroup canvasGroup;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        GameManager.instance.showGameOver += (isShow) =&gt;<br>        &#123;<br>            canvasGroup.alpha = isShow ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>;<br>            canvasGroup.blocksRaycasts = isShow;<br>        &#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>当蛇碰撞时，触发事件显示游戏失败界面。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> System.Collections;<br><span class="hljs-keyword">using</span> System.Collections.Generic;<br><span class="hljs-keyword">using</span> UnityEngine;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Snake</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OnTriggerEnter2D</span>(<span class="hljs-params">Collider2D other</span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-keyword">if</span> (other.CompareTag(<span class="hljs-string">&quot;Food&quot;</span>))<br>        &#123;<br>            <span class="hljs-comment">// ...</span><br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (other.CompareTag(<span class="hljs-string">&quot;Body&quot;</span>) || other.CompareTag(<span class="hljs-string">&quot;Wall&quot;</span>))<br>        &#123;<br>            <span class="hljs-comment">// 取消定时器</span><br>            CancelInvoke(<span class="hljs-keyword">nameof</span>(Move));<br>            <span class="hljs-comment">// 显示游戏失败界面</span><br>            GameManager.instance.TriggerGameOver(<span class="hljs-literal">true</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行效果：</p><p><img src="/../images/unity-pixel-snake-3/%E6%98%BE%E7%A4%BA%E6%B8%B8%E6%88%8F%E5%A4%B1%E8%B4%A5.gif"></p><h3 id="重开游戏"><a href="#重开游戏" class="headerlink" title="重开游戏"></a>重开游戏</h3><p>在 <code>UIGameOver.cs</code> 脚本上添加按钮事件，隐藏失败界面，重新开始游戏。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> UnityEngine;<br><span class="hljs-keyword">using</span> UnityEngine.UI;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">UIGameOver</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-keyword">public</span> Button btnRestart;<br>    <span class="hljs-keyword">public</span> CanvasGroup canvasGroup;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-comment">// ...</span><br><br>        btnRestart.onClick.AddListener(()=&gt;<br>        &#123;<br>            GameManager.instance.TriggerGameOver(<span class="hljs-literal">false</span>);<br>            GameManager.instance.RestartGame();<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在 <code>GameManager.cs</code> 脚本上添加重开游戏的事件和触发接口。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> System;<br><span class="hljs-keyword">using</span> UnityEngine;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">GameManager</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-comment">//...</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">event</span> Action restartGame;<br><br>    <span class="hljs-comment">// ...</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">RestartGame</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        restartGame.Invoke();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在 <code>FoodManager.cs</code> 脚本上添加重置网格接口，同时定义一个变量记录当前生成的食物，在重置网格时销毁当前食物。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> System.Collections;<br><span class="hljs-keyword">using</span> System.Collections.Generic;<br><span class="hljs-keyword">using</span> UnityEngine;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">FoodManager</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-comment">// ...</span><br>    <br>    <span class="hljs-keyword">public</span> GameObject currentFood;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">GenerateFood</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-comment">// ...</span><br><br>        currentFood = obj;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ResetGrid</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        gridList.Clear();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; rowMax; i++)<br>        &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> j = <span class="hljs-number">0</span>; j &lt; colMax; j++)<br>            &#123;<br>                gridList.Add(<span class="hljs-keyword">new</span> Vector3(borderLeft + j, borderTop - i, <span class="hljs-number">0</span>));<br>            &#125;<br>        &#125;<br>        Destroy(currentFood);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>最后，在 <code>Snake.cs</code> 脚本上添加事件监听，重置网格、蛇头、蛇身、食物，最后再次开启定时器，让蛇头重新开始移动。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> System.Collections;<br><span class="hljs-keyword">using</span> System.Collections.Generic;<br><span class="hljs-keyword">using</span> UnityEngine;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Snake</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-comment">// ...</span><br>    <br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-comment">// ...</span><br>        <br>        <span class="hljs-comment">// 重开游戏，重置游戏物体</span><br>        GameManager.instance.restartGame += ()=&gt;<br>        &#123;<br>            <span class="hljs-comment">// 重置网格</span><br>            FoodManager.instance.ResetGrid();<br><br>            <span class="hljs-comment">// 销毁蛇身</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; bodyList.Count; i++)<br>            &#123;<br>                Destroy(bodyList[i]);<br>            &#125;<br>            bodyList.Clear();<br><br>            <span class="hljs-comment">// 重置蛇头位置和方向</span><br>            transform.position = Vector3.zero;<br>            FoodManager.instance.MarkGridList(transform.position, <span class="hljs-literal">true</span>);<br>            direction = Vector2.right;<br>            lastDirection = Vector2.right;<br>            firstDirection = Vector2.right;<br><br>            initPos = transform.position;<br><br>            <span class="hljs-comment">// 初始生成身体</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; initBodyCount; i++)<br>            &#123;<br>                GenerateBody(<span class="hljs-literal">true</span>);<br>            &#125;<br><br>            <span class="hljs-comment">// 初始生成食物</span><br>            FoodManager.instance.GenerateFood();<br><br>            <span class="hljs-comment">// 重新开始移动</span><br>            InvokeRepeating(<span class="hljs-keyword">nameof</span>(Move), time, time);<br>        &#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行效果：</p><p><img src="/../images/unity-pixel-snake-3/%E9%87%8D%E5%BC%80%E6%B8%B8%E6%88%8F.gif"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Unity3D</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Unity3D 小案例 像素贪吃蛇 02 蛇的觅食</title>
    <link href="/2024/09/15/unity-pixel-snake-2/"/>
    <url>/2024/09/15/unity-pixel-snake-2/</url>
    
    <content type="html"><![CDATA[<p>Unity3D 小案例 像素贪吃蛇 第二期 蛇的觅食</p><span id="more"></span><h1 id="像素贪吃蛇"><a href="#像素贪吃蛇" class="headerlink" title="像素贪吃蛇"></a>像素贪吃蛇</h1><h2 id="食物生成"><a href="#食物生成" class="headerlink" title="食物生成"></a>食物生成</h2><p>在场景中创建一个 2D 正方形，调整颜色，添加 Tag 并修改为 Food。</p><p><img src="/../images/unity-pixel-snake-2/%E5%88%9B%E5%BB%BA%E9%A3%9F%E7%89%A9.png"></p><p>然后拖拽到 Assets 文件夹中变成预制体。</p><p><img src="/../images/unity-pixel-snake-2/%E9%A2%84%E5%88%B6%E4%BD%93.png"></p><p>创建食物管理器 <code>FoodManager.cs</code>，添加单例，可以设置食物生成的坐标范围，提供生成一个食物的方法。</p><p>因为 <code>Random.Range</code> 的取值范围是 <code>[min, max)</code>，为了取到 max 的值，需要给右边界加一。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> System.Collections;<br><span class="hljs-keyword">using</span> System.Collections.Generic;<br><span class="hljs-keyword">using</span> UnityEngine;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">FoodManager</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> FoodManager instance;<br><br>    <span class="hljs-keyword">public</span> GameObject food;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> borderLeft = <span class="hljs-number">-8</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> borderRight = <span class="hljs-number">8</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> borderTop = <span class="hljs-number">4</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> borderBottom = <span class="hljs-number">-4</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Awake</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-keyword">if</span> (instance == <span class="hljs-literal">null</span>)<br>        &#123;<br>            instance = <span class="hljs-keyword">this</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            Destroy(gameObject);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-comment">// 初始生成一个食物</span><br>        GenerateFood();<br>    &#125;<br><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> 生成食物</span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">GenerateFood</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        GameObject obj = Instantiate(food, transform);<br>        <span class="hljs-built_in">int</span> x = Random.Range(borderLeft, borderRight + <span class="hljs-number">1</span>);<br>        <span class="hljs-built_in">int</span> y = Random.Range(borderBottom, borderTop + <span class="hljs-number">1</span>);<br>        obj.transform.position = <span class="hljs-keyword">new</span> Vector3(x, y, <span class="hljs-number">0</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在场景中创建节点，挂上脚本，拖拽引用。</p><p><img src="/../images/unity-pixel-snake-2/%E9%A3%9F%E7%89%A9%E7%AE%A1%E7%90%86%E5%99%A8.png"></p><p>运行游戏，可以看到场景中生成了一个食物。</p><p><img src="/../images/unity-pixel-snake-2/%E7%94%9F%E6%88%90%E4%B8%80%E4%B8%AA%E9%A3%9F%E7%89%A9.png"></p><h2 id="吃掉食物"><a href="#吃掉食物" class="headerlink" title="吃掉食物"></a>吃掉食物</h2><p>给食物的预制体添加碰撞体，勾选 <code>Is Trigger</code>。</p><p><img src="/../images/unity-pixel-snake-2/%E6%B7%BB%E5%8A%A0%E7%A2%B0%E6%92%9E%E4%BD%93.png"></p><p>同样，蛇头也要添加碰撞体，还要再添加一个刚体，<code>Body Type</code> 设置为 <code>Kinematic</code>，不需要受到重力影响。</p><p><img src="/../images/unity-pixel-snake-2/%E6%B7%BB%E5%8A%A0%E5%88%9A%E4%BD%93.png"></p><p>在 <code>Snake.cs</code> 中添加碰撞函数，判断碰撞物体的标签是 Food，就销毁食物，生成新的蛇身，并生成下一个食物。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> System.Collections;<br><span class="hljs-keyword">using</span> System.Collections.Generic;<br><span class="hljs-keyword">using</span> UnityEngine;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Snake</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-comment">// ...</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OnTriggerEnter2D</span>(<span class="hljs-params">Collider2D other</span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-keyword">if</span> (other.CompareTag(<span class="hljs-string">&quot;Food&quot;</span>))<br>        &#123;<br>            Destroy(other.gameObject);<br>            GenerateBody();<br>            FoodManager.instance.GenerateFood();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>此时运行游戏，蛇头可以吃掉食物了。</p><p>但是有时候蛇头还未到达食物的位置，食物就被吃掉了，甚至蛇头只是经过食物的附近，食物也消失了。这是因为碰撞体的范围问题，默认的 Size 是 <code>(1, 1)</code>，可以稍微调小一些，例如 <code>(0.5, 0.5)</code>。</p><p><img src="/../images/unity-pixel-snake-2/%E8%B0%83%E6%95%B4%E7%A2%B0%E6%92%9E%E4%BD%93%E5%A4%A7%E5%B0%8F.png"></p><p>调整后的效果：</p><p><img src="/../images/unity-pixel-snake-2/%E5%90%83%E6%8E%89%E9%A3%9F%E7%89%A9.gif"></p><h2 id="食物位置"><a href="#食物位置" class="headerlink" title="食物位置"></a>食物位置</h2><p>目前场景范围适中，生成的食物都在空地，但是当蛇越来越长的时候，会发现食物生成的位置有可能在蛇的身上。</p><p>我们应该让食物始终都在空地生成。</p><p>那么，对于一个坐标是否为空地，就需要做一些标记。</p><h3 id="网格"><a href="#网格" class="headerlink" title="网格"></a>网格</h3><p>目前食物生成的坐标取值范围，在 X 轴是 <code>[-8, 8]</code>，在 Y 轴是 <code>[-4, 4]</code>。</p><p>如果把这些坐标点看成是一个网格，可以按照行列来看。</p><p>左上角是 <code>(-8, 4)</code>，是第 0 行，第 0 列，索引为 0。</p><p>右上角是 <code>(8, 4)</code>，是第 0 行，第 16 列，索引为 16。</p><p>左下角是 <code>(-8, -4)</code>，是第 8 行，第 0 列，索引为 136。</p><p>右下角是 <code>(8, -4)</code>，是第 8 行，第 16 列，索引为 152。</p><blockquote><p>注意：这里的索引是从第 0 行开始，从左到右递增。行数增加时，索引继续计数。</p></blockquote><p><img src="/../images/unity-pixel-snake-2/%E7%BD%91%E6%A0%BC.png"></p><h3 id="网格列表"><a href="#网格列表" class="headerlink" title="网格列表"></a>网格列表</h3><p>在 <code>FoodManager.cs</code> 中，添加一个 <code>Vector3</code> 列表，X 和 Y 记录坐标，Z 记录是否空地（0 表示空地，1 表示有物体占用）。</p><p>这里总行数是上边界减去下边界，还要加上一个端点，总共 9 行。</p><p>总列数是右边界减去左边界，还要加上一个端点，总共 17 列。</p><p>根据行列数，依次添加 <code>Vector3</code> 到列表中，Z 默认是 0。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> System.Collections;<br><span class="hljs-keyword">using</span> System.Collections.Generic;<br><span class="hljs-keyword">using</span> UnityEngine;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">FoodManager</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-comment">// ...</span><br><br>    <span class="hljs-keyword">public</span> List&lt;Vector3&gt; gridList;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> rowMax = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> colMax = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        rowMax = borderTop - borderBottom + <span class="hljs-number">1</span>;<br>        colMax = borderRight - borderLeft + <span class="hljs-number">1</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; rowMax; i++)<br>        &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> j = <span class="hljs-number">0</span>; j &lt; colMax; j++)<br>            &#123;<br>                gridList.Add(<span class="hljs-keyword">new</span> Vector3(borderLeft + j, borderTop - i, <span class="hljs-number">0</span>));<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后提供一个标记网格列表的方法，把传入的坐标转成 int，判断边界，换算行列，计算索引，根据索引从网格列表中取出一个网格点，更新标记。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> System.Collections;<br><span class="hljs-keyword">using</span> System.Collections.Generic;<br><span class="hljs-keyword">using</span> UnityEngine;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">FoodManager</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-comment">// ...</span><br><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> 标记网格列表</span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;pos&quot;&gt;</span>坐标位置<span class="hljs-doctag">&lt;/param&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;flag&quot;&gt;</span>标记<span class="hljs-doctag">&lt;/param&gt;</span></span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">MarkGridList</span>(<span class="hljs-params">Vector3 pos, <span class="hljs-built_in">bool</span> flag</span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-built_in">int</span> x = (<span class="hljs-built_in">int</span>)pos.x;<br>        <span class="hljs-built_in">int</span> y = (<span class="hljs-built_in">int</span>)pos.y;<br><br>        <span class="hljs-comment">// 坐标超出边界</span><br>        <span class="hljs-keyword">if</span> (x &lt; borderLeft || x &gt; borderRight) <span class="hljs-keyword">return</span>;<br>        <span class="hljs-keyword">if</span> (y &lt; borderBottom || y &gt; borderTop) <span class="hljs-keyword">return</span>;<br><br>        <span class="hljs-comment">// 换算行列</span><br>        <span class="hljs-built_in">int</span> row = borderTop - y;<br>        <span class="hljs-built_in">int</span> col = x - borderLeft;<br><br>        <span class="hljs-comment">// 计算索引</span><br>        <span class="hljs-built_in">int</span> index = col + row * colMax;<br><br>        <span class="hljs-comment">// 索引超出边界</span><br>        <span class="hljs-keyword">if</span> (index &lt; <span class="hljs-number">0</span> || index &gt; gridList.Count - <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span>;<br><br>        <span class="hljs-comment">// 取出网格点，标记是否空地</span><br>        Vector3 grid = gridList[index];<br>        grid.z = flag ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>;<br><br>        <span class="hljs-comment">// 更新网格点</span><br>        gridList[index] = grid;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="标记网格"><a href="#标记网格" class="headerlink" title="标记网格"></a>标记网格</h3><p>在游戏开始时，蛇头会占用一个网格，生成的身体也需要标记网格。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> System.Collections;<br><span class="hljs-keyword">using</span> System.Collections.Generic;<br><span class="hljs-keyword">using</span> UnityEngine;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Snake</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-comment">// 初始生成身体</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; initBodyCount; i++)<br>        &#123;<br>            GenerateBody();<br>        &#125;<br><br>        FoodManager.instance.MarkGridList(transform.position, <span class="hljs-literal">true</span>);<br><br>        <span class="hljs-comment">// ...</span><br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">GenerateBody</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        GameObject obj = Instantiate(body);<br><br>        <span class="hljs-comment">// ...</span><br><br>        FoodManager.instance.MarkGridList(obj.transform.position, <span class="hljs-literal">true</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在蛇的移动过程中，也要动态地标记网格。</p><p>蛇头和身体移动后都要标记网格已经被占用，只有在最后一个身体移动前，标记当前网格位置为空地。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> System.Collections;<br><span class="hljs-keyword">using</span> System.Collections.Generic;<br><span class="hljs-keyword">using</span> UnityEngine;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Snake</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Move</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-comment">// ...</span><br><br>        <span class="hljs-comment">// 移动前，先标记旧的位置</span><br>        posMarkFirst = transform.position;<br>        transform.Translate(direction);<br><br>        <span class="hljs-comment">// 标记蛇头移动后的网格位置</span><br>        FoodManager.instance.MarkGridList(transform.position, <span class="hljs-literal">true</span>);<br><br>        <span class="hljs-comment">// ...</span><br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; bodyList.Count; i++)<br>        &#123;<br>            <span class="hljs-comment">// 最后一个身体移动前，标记当前网格位置为空地</span><br>            <span class="hljs-keyword">if</span> (i == bodyList.Count - <span class="hljs-number">1</span>)<br>            &#123;<br>                FoodManager.instance.MarkGridList(bodyList[i].transform.position, <span class="hljs-literal">false</span>);<br>            &#125;<br><br>            <span class="hljs-comment">// ...</span><br><br>            <span class="hljs-comment">// 每个身体移动后，标记当前网格位置</span><br>            FoodManager.instance.MarkGridList(bodyList[i].transform.position, <span class="hljs-literal">true</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>食物也会占用网格，每次生成食物时，也要标记网格。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> System.Collections;<br><span class="hljs-keyword">using</span> System.Collections.Generic;<br><span class="hljs-keyword">using</span> UnityEngine;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">FoodManager</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">GenerateFood</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        GameObject obj = Instantiate(food, transform);<br>        <span class="hljs-built_in">int</span> x = Random.Range(borderLeft, borderRight + <span class="hljs-number">1</span>);<br>        <span class="hljs-built_in">int</span> y = Random.Range(borderBottom, borderTop + <span class="hljs-number">1</span>);<br>        obj.transform.position = <span class="hljs-keyword">new</span> Vector3(x, y, <span class="hljs-number">0</span>);<br>        <br>        <span class="hljs-comment">// 标记食物占用的网格位置</span><br>        MarkGridList(obj.transform.position, <span class="hljs-literal">true</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="筛选空地"><a href="#筛选空地" class="headerlink" title="筛选空地"></a>筛选空地</h3><p>在食物生成时，不能单纯用随机数来确定坐标位置，而是要从网格列表中，筛选未被占用的网格点，然后从这些网格点中随机取出一个位置。</p><p>定义一个 <code>filterList</code>，用来存储筛选后的网格点。</p><p>每次生成食物时，需要先清理 <code>filterList</code>，然后从网格列表中，筛选 Z 为 0（表示未被占用）的网格点，添加到筛选列表中。</p><p>然后再生成随机数，从筛选列表中取出网格点，赋值位置给生成的食物。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> System.Collections;<br><span class="hljs-keyword">using</span> System.Collections.Generic;<br><span class="hljs-keyword">using</span> UnityEngine;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">FoodManager</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-comment">// ...</span><br><br>    <span class="hljs-keyword">public</span> List&lt;Vector3&gt; filterList;<br><br>    <span class="hljs-comment">// ...</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">GenerateFood</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-comment">// 清理筛选列表</span><br>        filterList.Clear();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; gridList.Count; i++)<br>        &#123;<br>            <span class="hljs-comment">// 筛选未被占用的网格点</span><br>            <span class="hljs-keyword">if</span> (gridList[i].z == <span class="hljs-number">0</span>)<br>            &#123;<br>                filterList.Add(gridList[i]);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// 没有空地了</span><br>        <span class="hljs-keyword">if</span> (filterList.Count == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span>;<br><br>        <span class="hljs-comment">// 随机取出一个空地</span><br>        <span class="hljs-built_in">int</span> index = Random.Range(<span class="hljs-number">0</span>, filterList.Count);<br>        Vector3 pos = filterList[index];<br><br>        GameObject obj = Instantiate(food, transform);<br>        <span class="hljs-comment">// int x = Random.Range(borderLeft, borderRight + 1);</span><br>        <span class="hljs-comment">// int y = Random.Range(borderBottom, borderTop + 1);</span><br>        <span class="hljs-comment">// obj.transform.position = new Vector3(x, y, 0);</span><br>        obj.transform.position = pos;<br><br>        <span class="hljs-comment">// 标记食物占用的网格位置</span><br>        MarkGridList(obj.transform.position, <span class="hljs-literal">true</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>至此，当蛇身越来越长时，也不会出现食物生成在蛇身上的情况了。</p><p>运行效果：</p><p><img src="/../images/unity-pixel-snake-2/%E9%A3%9F%E7%89%A9%E4%BD%8D%E7%BD%AE.gif"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Unity3D</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Unity3D 小案例 像素贪吃蛇 01 蛇的移动</title>
    <link href="/2024/09/08/unity-pixel-snake-1/"/>
    <url>/2024/09/08/unity-pixel-snake-1/</url>
    
    <content type="html"><![CDATA[<p>Unity3D 小案例 像素贪吃蛇 第一期 蛇的移动</p><span id="more"></span><h1 id="像素贪吃蛇"><a href="#像素贪吃蛇" class="headerlink" title="像素贪吃蛇"></a>像素贪吃蛇</h1><p>今天来简单制作一个小案例，经典的像素贪吃蛇。</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>首先调整一下相机的设置，这里使用灰色的纯色背景，正交视图。</p><p><img src="/../images/unity-pixel-snake-1/%E7%9B%B8%E6%9C%BA%E8%AE%BE%E7%BD%AE.png"></p><p>接着，创建一个正方形，保存为预制体，一个蛇头，一个蛇身。蛇身稍微调成灰色。</p><p><img src="/../images/unity-pixel-snake-1/%E5%88%9B%E5%BB%BA%E9%A2%84%E5%88%B6%E4%BD%93.png"></p><h2 id="初始生成"><a href="#初始生成" class="headerlink" title="初始生成"></a>初始生成</h2><p>创建脚本 <code>Snake.cs</code>，挂到 Snake 预制体上。</p><p>这里先定义初始身体数量，身体预制体，身体列表。</p><p>在 Start 方法里，初始生成一定数量的身体。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> System.Collections;<br><span class="hljs-keyword">using</span> System.Collections.Generic;<br><span class="hljs-keyword">using</span> UnityEngine;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Snake</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> initBodyCount = <span class="hljs-number">3</span>;  <span class="hljs-comment">// 初始身体数量</span><br><br>    <span class="hljs-keyword">public</span> GameObject body;  <span class="hljs-comment">// 身体预制体</span><br><br>    List&lt;GameObject&gt; bodyList = <span class="hljs-keyword">new</span> List&lt;GameObject&gt;();  <span class="hljs-comment">// 身体列表</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-comment">// 初始生成身体</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; initBodyCount; i++)<br>        &#123;<br>            GenerateBody();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> 生成身体</span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">GenerateBody</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        GameObject obj = Instantiate(body);<br><br>        <span class="hljs-comment">// 已有身体</span><br>        <span class="hljs-keyword">if</span> (bodyList.Count &gt; <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-comment">// 获取最后一个身体，在它的位置生成</span><br>            GameObject lastBody = bodyList[bodyList.Count - <span class="hljs-number">1</span>];<br>            obj.transform.position = lastBody.transform.position;<br>        &#125;<br>        <span class="hljs-comment">// 没有身体</span><br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-comment">// 以蛇头的位置生成身体</span><br>            obj.transform.position = transform.position;<br>        &#125;<br><br>        bodyList.Add(obj);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>拖拽预制体引用，然后覆盖到预制体。</p><p>场景里面的 SnakeBody 可以删掉。</p><p><img src="/../images/unity-pixel-snake-1/%E5%BC%95%E7%94%A8%E9%A2%84%E5%88%B6%E4%BD%93.png"></p><p>运行游戏，会在蛇头的位置生成三个身体，此时身体都是重叠的。</p><h2 id="蛇的移动"><a href="#蛇的移动" class="headerlink" title="蛇的移动"></a>蛇的移动</h2><p>定义移动方向和移动速度，在 Start 方法中，调用 <code>InvokeRepeating</code> 定时器，根据速度计算出定时器的调用时间间隔，每次调用 <code>Move</code> 方法往当前方向移动。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> System.Collections;<br><span class="hljs-keyword">using</span> System.Collections.Generic;<br><span class="hljs-keyword">using</span> UnityEngine;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Snake</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-comment">// ...</span><br><br>    <span class="hljs-keyword">public</span> Vector2 direction = Vector2.right;  <span class="hljs-comment">// 移动方向</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">float</span> speed = <span class="hljs-number">1</span>;  <span class="hljs-comment">// 移动速度</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-comment">// ...</span><br><br>        <span class="hljs-built_in">float</span> time = <span class="hljs-number">1</span> / speed;<br>        InvokeRepeating(<span class="hljs-keyword">nameof</span>(Move), time, time);<br>    &#125;<br><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> 移动</span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Move</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        transform.Translate(direction);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>此时只有蛇头会移动，身体是不动的。</p><p>要让身体跟着蛇头移动，需要在蛇头移动前，标记位置，再把旧的位置赋值给第一个身体。</p><p>第一个身体移动前，也要先标记位置，然后赋值给第二个身体。</p><p>所以要使用两个 <code>Vector2</code> 变量，循环标记。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> System.Collections;<br><span class="hljs-keyword">using</span> System.Collections.Generic;<br><span class="hljs-keyword">using</span> UnityEngine;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Snake</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-comment">// ...</span><br><br>    Vector2 posMarkFirst;  <span class="hljs-comment">// 第一个标记位置</span><br>    Vector2 posMarkLast;   <span class="hljs-comment">// 第二个标记位置</span><br><br>    <span class="hljs-comment">// ...</span><br><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> 移动</span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Move</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-comment">// 移动前，先标记旧的位置</span><br>        posMarkFirst = transform.position;<br>        transform.Translate(direction);<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; bodyList.Count; i++)<br>        &#123;<br>            <span class="hljs-comment">// 利用奇偶数，交替标记旧的位置</span><br>            <span class="hljs-keyword">if</span> (i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)<br>            &#123;<br>                posMarkLast = bodyList[i].transform.position;<br>                bodyList[i].transform.position = posMarkFirst;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                posMarkFirst = bodyList[i].transform.position;<br>                bodyList[i].transform.position = posMarkLast;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行游戏，可以看到，蛇开始移动了。</p><p><img src="/../images/unity-pixel-snake-1/%E7%A7%BB%E5%8A%A8.gif"></p><h2 id="控制方向"><a href="#控制方向" class="headerlink" title="控制方向"></a>控制方向</h2><p>在 <code>Update</code> 方法中，获取键盘输入，改变蛇头的移动方向。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> System.Collections;<br><span class="hljs-keyword">using</span> System.Collections.Generic;<br><span class="hljs-keyword">using</span> UnityEngine;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Snake</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-comment">// ...</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Update</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-built_in">float</span> h = Input.GetAxisRaw(<span class="hljs-string">&quot;Horizontal&quot;</span>);<br>        <span class="hljs-built_in">float</span> v = Input.GetAxisRaw(<span class="hljs-string">&quot;Vertical&quot;</span>);<br><br>        <span class="hljs-comment">// 检测到按键输入</span><br>        <span class="hljs-keyword">if</span>(h != <span class="hljs-number">0</span> || v != <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-comment">// 改变蛇头的方向</span><br>            direction.x = h;<br>            direction.y = v;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行游戏，可以通过键盘方向键，改变蛇的移动方向。</p><p><img src="/../images/unity-pixel-snake-1/%E6%8E%A7%E5%88%B6%E6%96%B9%E5%90%91.gif"></p><p>但是问题来了，如上图所示，蛇头可以往反方向移动，还可以斜着移动，这些都是需要排除的情况。</p><p>简单分析一下，蛇头的移动方向，用二维向量来变量，有四种情况。</p><ul><li>向上 <code>(0, 1)</code></li><li>向下 <code>(0, -1)</code></li><li>向左 <code>(-1, 0)</code></li><li>向右 <code>(1, 0)</code></li></ul><p>当蛇头向右移动时，如果按键输入向左，那么 X 坐标相加等于 0。</p><p>同理，向上移动时，如果按键输入向下，那么 Y 坐标相加等于 0。</p><p>所以在改变方向时，判断当前方向和按键输入方向的相加情况，进行排除。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> System.Collections;<br><span class="hljs-keyword">using</span> System.Collections.Generic;<br><span class="hljs-keyword">using</span> UnityEngine;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Snake</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-comment">// ...</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Update</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-built_in">float</span> h = Input.GetAxisRaw(<span class="hljs-string">&quot;Horizontal&quot;</span>);<br>        <span class="hljs-built_in">float</span> v = Input.GetAxisRaw(<span class="hljs-string">&quot;Vertical&quot;</span>);<br><br>        <span class="hljs-comment">// 检测到按键输入</span><br>        <span class="hljs-keyword">if</span>(h != <span class="hljs-number">0</span> || v != <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (direction.x + h == <span class="hljs-number">0</span> || direction.y + v == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span>;<br><br>            <span class="hljs-comment">// 改变蛇头的方向</span><br>            direction.x = h;<br>            direction.y = v;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>斜着移动时，也有四种情况。</p><ul><li>左上 <code>(-1, 1)</code></li><li>右上 <code>(1, 1)</code></li><li>左下 <code>(-1, -1)</code></li><li>右下 <code>(1, -1)</code></li></ul><p>它们的规律是，要么 X 坐标和 Y 坐标相等，要么 X 坐标和 Y 坐标相加等于 0。</p><p>所以在改变方向时，判断以上情况，进行排除。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> System.Collections;<br><span class="hljs-keyword">using</span> System.Collections.Generic;<br><span class="hljs-keyword">using</span> UnityEngine;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Snake</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-comment">// ...</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Update</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-built_in">float</span> h = Input.GetAxisRaw(<span class="hljs-string">&quot;Horizontal&quot;</span>);<br>        <span class="hljs-built_in">float</span> v = Input.GetAxisRaw(<span class="hljs-string">&quot;Vertical&quot;</span>);<br><br>        <span class="hljs-comment">// 检测到按键输入</span><br>        <span class="hljs-keyword">if</span>(h != <span class="hljs-number">0</span> || v != <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (direction.x + h == <span class="hljs-number">0</span> || direction.y + v == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span>;<br>            <span class="hljs-keyword">if</span> (h == v || h + v == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span>;<br><br>            <span class="hljs-comment">// 改变蛇头的方向</span><br>            direction.x = h;<br>            direction.y = v;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>但是还没有完全解决问题，当蛇头向右移动时，如果快速按向上键，再按向左键，蛇头依然会往反方向移动，因为以上规则在二次按键时，可以顺利切换方向。</p><p>所以，每当定时器触发移动时，还需要再进行方向修正。</p><p>我们可以先记录第一次按键的方向，此时该方向是合理的。当触发移动时，如果当前方向和上次移动的方向正好相反，那么判定当前方向是进行了二次按键，把当前方向修正为第一次按键的合理方向。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> System.Collections;<br><span class="hljs-keyword">using</span> System.Collections.Generic;<br><span class="hljs-keyword">using</span> UnityEngine;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Snake</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-comment">// ...</span><br>    <br>    <span class="hljs-keyword">public</span> Vector2 lastDirection = Vector2.right;   <span class="hljs-comment">// 上次的移动方向</span><br>    <span class="hljs-keyword">public</span> Vector2 firstDirection = Vector2.right;  <span class="hljs-comment">// 第一次按键的移动方向</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">bool</span> firstPress = <span class="hljs-literal">true</span>;  <span class="hljs-comment">// 是否记录第一次按键</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Update</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-built_in">float</span> h = Input.GetAxisRaw(<span class="hljs-string">&quot;Horizontal&quot;</span>);<br>        <span class="hljs-built_in">float</span> v = Input.GetAxisRaw(<span class="hljs-string">&quot;Vertical&quot;</span>);<br><br>        <span class="hljs-comment">// 检测到按键输入</span><br>        <span class="hljs-keyword">if</span>(h != <span class="hljs-number">0</span> || v != <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (direction.x + h == <span class="hljs-number">0</span> || direction.y + v == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span>;<br>            <span class="hljs-keyword">if</span> (h == v || h + v == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span>;<br><br>            <span class="hljs-comment">// 改变蛇头的方向</span><br>            direction.x = h;<br>            direction.y = v;<br>            <br>            <span class="hljs-comment">// 仅记录第一次按键</span><br>            <span class="hljs-keyword">if</span> (firstPress)<br>            &#123;<br>                firstPress = <span class="hljs-literal">false</span>;<br>                firstDirection.x = h;<br>                firstDirection.y = v;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> 移动</span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Move</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-comment">// 当前移动方向和上次方向相反，修正为第一次按键的方向</span><br>        <span class="hljs-keyword">if</span> (direction.x + lastDirection.x == <span class="hljs-number">0</span> || direction.y + lastDirection.y == <span class="hljs-number">0</span>)<br>        &#123;<br>            direction.x = firstDirection.x;<br>            direction.y = firstDirection.y;<br>        &#125;<br><br>        <span class="hljs-comment">// 移动前，先标记旧的位置</span><br>        posMarkFirst = transform.position;<br>        transform.Translate(direction);<br><br>        <span class="hljs-comment">// 记录上次的移动方向</span><br>        lastDirection = direction;<br>        <span class="hljs-comment">// 可重新记录第一次按键的移动方向</span><br>        firstPress = <span class="hljs-literal">true</span>;<br>        <br>        <span class="hljs-comment">// ...</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>最终的移动效果。</p><p><img src="/../images/unity-pixel-snake-1/%E6%9C%80%E7%BB%88%E7%A7%BB%E5%8A%A8%E6%95%88%E6%9E%9C.gif"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Unity3D</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Unity3D 资源引用列表</title>
    <link href="/2024/09/01/unity-resource-reference/"/>
    <url>/2024/09/01/unity-resource-reference/</url>
    
    <content type="html"><![CDATA[<p>Unity3D 窗口绘制资源引用列表。</p><span id="more"></span><h1 id="资源引用列表"><a href="#资源引用列表" class="headerlink" title="资源引用列表"></a>资源引用列表</h1><p>我们可以在自定义窗口上绘制一个资源引用列表，筛选资源，点击引用，快速定位到资源文件夹的某个资源。</p><p>关于自定义窗口的基本实现，可以参考之前的文章《Unity3D 自定义窗口》。</p><h2 id="获取资源引用"><a href="#获取资源引用" class="headerlink" title="获取资源引用"></a>获取资源引用</h2><p>在 Editor 文件夹中，创建脚本 <code>ResourceReference.cs</code>。</p><p>参考之前的文章《Unity3D 遍历预制体》，遍历 Assets 文件夹下的预制体，获取一些资源引用，存储到 objects 列表中。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> System.Collections;<br><span class="hljs-keyword">using</span> System.Collections.Generic;<br><span class="hljs-keyword">using</span> System.IO;<br><span class="hljs-keyword">using</span> UnityEngine;<br><span class="hljs-keyword">using</span> UnityEditor;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">ResourceReference</span> : <span class="hljs-title">EditorWindow</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">string</span> path = <span class="hljs-string">&quot;Assets/&quot;</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-title">List</span>&lt;<span class="hljs-title">Object</span>&gt; objects</span> = <span class="hljs-keyword">new</span> List&lt;Object&gt;();<br><br>    [<span class="hljs-meta">MenuItem(<span class="hljs-meta-string">&quot;搜索工具/资源引用列表&quot;</span>)</span>]<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OpenWindow</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-comment">// 创建窗口对象</span><br>        ResourceReference window = GetWindow&lt;ResourceReference&gt;();<br><br>        <span class="hljs-comment">// 设置窗口标题</span><br>        window.titleContent = <span class="hljs-keyword">new</span> GUIContent(<span class="hljs-string">&quot;资源引用列表&quot;</span>);<br><br>        <span class="hljs-comment">// 显示窗口</span><br>        window.Show();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OnGUI</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        GUILayout.Label(<span class="hljs-string">&quot;自定义搜索工具，可以遍历资源并修改&quot;</span>);<br><br>        GUILayout.Space(<span class="hljs-number">10</span>);<br><br>        path = EditorGUILayout.TextField(<span class="hljs-string">&quot;根目录&quot;</span>, path);<br><br>        GUILayout.Space(<span class="hljs-number">10</span>);<br><br>        <span class="hljs-keyword">if</span> (GUILayout.Button(<span class="hljs-string">&quot;确定&quot;</span>, GUILayout.Height(<span class="hljs-number">50</span>)))<br>        &#123;<br>            objects.Clear();<br>            TraversePrefab();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">TraversePrefab</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-keyword">var</span> allfiles = Directory.GetFiles(path, <span class="hljs-string">&quot;*.prefab&quot;</span>, SearchOption.AllDirectories);<br><br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> file <span class="hljs-keyword">in</span> allfiles)<br>        &#123;<br>            GameObject go = AssetDatabase.LoadAssetAtPath&lt;GameObject&gt;(file);<br>            <span class="hljs-keyword">if</span> (go)<br>            &#123;<br>                Debug.Log(go);<br>                objects.Add(go);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>点击菜单栏按钮，打开窗口。</p><p><img src="/../images/unity-resource-reference/%E8%8F%9C%E5%8D%95%E6%A0%8F%E6%8C%89%E9%92%AE.png"></p><p>点击窗口内的按钮，可以看到打印的信息，此时资源已经被添加到 objects 列表中，暂时看不到。</p><p><img src="/../images/unity-resource-reference/%E6%90%9C%E7%B4%A2%E9%A2%84%E5%88%B6%E4%BD%93.png"></p><blockquote><p>注意：每次点击按钮时，要调用 <code>objects.Clear()</code> 清空列表，防止重复添加。</p></blockquote><h2 id="绘制单个资源引用"><a href="#绘制单个资源引用" class="headerlink" title="绘制单个资源引用"></a>绘制单个资源引用</h2><p>使用 <code>EditorGUILayout.ObjectField</code> 绘制一个资源引用，传入需要显示的 object 以及它可以被赋值的类型（直接用它本身的类型 Object 即可），第三个布尔参数表示可以赋值场景中的物体。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> System.Collections;<br><span class="hljs-keyword">using</span> System.Collections.Generic;<br><span class="hljs-keyword">using</span> System.IO;<br><span class="hljs-keyword">using</span> UnityEngine;<br><span class="hljs-keyword">using</span> UnityEditor;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">ResourceReference</span> : <span class="hljs-title">EditorWindow</span><br>&#123;<br>    <span class="hljs-comment">// ...</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OnGUI</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-comment">// ...</span><br><br>        GUILayout.Space(<span class="hljs-number">10</span>);<br><br>        DrawNode();<br>    &#125;<br><br>    <span class="hljs-comment">// ...</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">DrawNode</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; objects.Count; i++)<br>        &#123;<br>            Object obj = objects[i];<br>            EditorGUILayout.ObjectField(obj, obj.GetType(), <span class="hljs-literal">true</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>现在窗口里就显示了被添加到 objects 列表中的预制体资源引用，点击它们还可以快速定位到 Assets 文件夹的资源。</p><p><img src="/../images/unity-resource-reference/%E7%BB%98%E5%88%B6%E8%B5%84%E6%BA%90%E5%BC%95%E7%94%A8.png"></p><h2 id="定义链表节点"><a href="#定义链表节点" class="headerlink" title="定义链表节点"></a>定义链表节点</h2><p>现在列表中只能展示预制体，如果要展示预制体中的某个节点或组件，为了让视图更加清晰地展示预制体与其节点的关联性，我们可以使用链表结构。</p><p>首先，定义链表节点，每个节点包含数据、类型、指针，并提供 Add 方法，在节点尾端链接下一个节点。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> 链表节点</span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Node</span><br>&#123;<br>    <span class="hljs-keyword">public</span> Object data;   <span class="hljs-comment">// 链表数据</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> type;   <span class="hljs-comment">// 链表类型</span><br>    <span class="hljs-keyword">public</span> Node next;     <span class="hljs-comment">// 链表指针</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Node</span>(<span class="hljs-params">Object data, <span class="hljs-built_in">string</span> type</span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-keyword">this</span>.data = data;<br>        <span class="hljs-keyword">this</span>.type = type;<br>    &#125;<br><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> 链表尾插法</span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;data&quot;&gt;</span>链表数据<span class="hljs-doctag">&lt;/param&gt;</span></span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Node <span class="hljs-title">Add</span>(<span class="hljs-params">Object data, <span class="hljs-built_in">string</span> type</span>)</span><br><span class="hljs-function"></span>    &#123;<br>        Node node = <span class="hljs-keyword">new</span> Node(data, type);<br>        <span class="hljs-keyword">this</span>.next = node;<br>        <span class="hljs-keyword">return</span> node;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="绘制链式资源引用"><a href="#绘制链式资源引用" class="headerlink" title="绘制链式资源引用"></a>绘制链式资源引用</h2><p>修改一下 objects 列表的类型，改成 Node。</p><p>在 <code>TraversePrefab</code> 方法中，尝试去获取 <code>SpriteRenderer</code> 组件，如果存在，则生成一个 Node 节点，先把预制体 go 存入，并记录它的类型是 <code>&quot;prefab&quot;</code>。</p><p>接着，还可以使用 Node 节点的 Add 方法，继续添加它的下一个节点，把 <code>&quot;SpriteRenderer&quot;</code> 和 <code>&quot;sprite&quot;</code> 都添加到节点链接中。</p><p>在 <code>DrawNode</code> 方法中，使用 <code>do while</code> 先绘制首个节点的内容（prefab），然后获取它的下一个节点，如果存在，就继续绘制，直到没有下一个节点为止。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">// ...</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">ResourceReference</span> : <span class="hljs-title">EditorWindow</span><br>&#123;<br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-title">List</span>&lt;<span class="hljs-title">Node</span>&gt; objects</span> = <span class="hljs-keyword">new</span> List&lt;Node&gt;();<br><br>    <span class="hljs-comment">// ...</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">TraversePrefab</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-keyword">var</span> allfiles = Directory.GetFiles(path, <span class="hljs-string">&quot;*.prefab&quot;</span>, SearchOption.AllDirectories);<br><br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> file <span class="hljs-keyword">in</span> allfiles)<br>        &#123;<br>            GameObject go = AssetDatabase.LoadAssetAtPath&lt;GameObject&gt;(file);<br>            <span class="hljs-keyword">if</span> (go)<br>            &#123;<br>                SpriteRenderer sr = go.GetComponent&lt;SpriteRenderer&gt;();<br>                <span class="hljs-keyword">if</span> (sr)<br>                &#123;<br>                    Node node = <span class="hljs-keyword">new</span> Node(go, <span class="hljs-string">&quot;prefab&quot;</span>);<br>                    node.Add(sr, <span class="hljs-string">&quot;SpriteRenderer&quot;</span>).Add(sr.sprite, <span class="hljs-string">&quot;sprite&quot;</span>);<br>                    objects.Add(node);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">DrawNode</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; objects.Count; i++)<br>        &#123;<br>            Node node = objects[i];<br>            <span class="hljs-keyword">do</span><br>            &#123;<br>                EditorGUILayout.ObjectField(node.data, node.data.GetType(), <span class="hljs-literal">true</span>);<br>                node = node.next;<br>            &#125; <span class="hljs-keyword">while</span> (node != <span class="hljs-literal">null</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>现在重新点确定按钮，可以看到列表的内容发生了改变，筛选了包含 <code>SpriteRenderer</code> 组件的预制体，并且把它引用的图片也展示了出来，点击 Sprite 图片也可以快速定位到资源。</p><p><img src="/../images/unity-resource-reference/%E7%BB%98%E5%88%B6%E9%93%BE%E8%A1%A8%E8%8A%82%E7%82%B9.png"></p><p>不过现在列表的内容是单列绘制的，改成三列才能很好地达到预期的效果。</p><p>只需要在 DrawNode 方法中，绘制每个 prefab 节点时，加上水平布局。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">// ...</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">ResourceReference</span> : <span class="hljs-title">EditorWindow</span><br>&#123;<br>    <span class="hljs-comment">// ...</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">DrawNode</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; objects.Count; i++)<br>        &#123;<br>            EditorGUILayout.BeginHorizontal();<br><br>            Node node = objects[i];<br>            <span class="hljs-keyword">do</span><br>            &#123;<br>                EditorGUILayout.ObjectField(node.data, node.data.GetType(), <span class="hljs-literal">true</span>);<br>                node = node.next;<br>            &#125; <span class="hljs-keyword">while</span> (node != <span class="hljs-literal">null</span>);<br><br>            EditorGUILayout.EndHorizontal();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>现在列表就是三列的布局了。</p><p><img src="/../images/unity-resource-reference/%E4%B8%89%E5%88%97%E5%B8%83%E5%B1%80.png"></p><h2 id="绘制滚动视图"><a href="#绘制滚动视图" class="headerlink" title="绘制滚动视图"></a>绘制滚动视图</h2><p>目前列表里只有两行资源引用，如果项目里有很多资源的话，就需要使用滚动视图来展示。</p><p>先定义一个 <code>Vector2 scrollPos</code> 记录滚动视图当前的位置。</p><p>然后在 <code>DrawNode</code> 方法前后添加滚动视图代码。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">// ...</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">ResourceReference</span> : <span class="hljs-title">EditorWindow</span><br>&#123;<br>    <span class="hljs-comment">// ...</span><br><br>    Vector2 scrollPos = Vector2.zero;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OnGUI</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-comment">// ...</span><br><br>        scrollPos = EditorGUILayout.BeginScrollView(scrollPos);<br><br>        DrawNode();<br><br>        EditorGUILayout.EndScrollView();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>多复制几个预制体，视图就丰富起来了。</p><p><img src="/../images/unity-resource-reference/%E7%BB%98%E5%88%B6%E6%BB%9A%E5%8A%A8%E8%A7%86%E5%9B%BE.png"></p><h2 id="简单应用：批量替换图片"><a href="#简单应用：批量替换图片" class="headerlink" title="简单应用：批量替换图片"></a>简单应用：批量替换图片</h2><h3 id="绘制图片资源引用"><a href="#绘制图片资源引用" class="headerlink" title="绘制图片资源引用"></a>绘制图片资源引用</h3><p>首先，在窗口上绘制一个图片资源引用，可以手动选择要替换成哪张图片。</p><p>需要定义一个 <code>Sprite replaceSprite</code> 变量，在 <code>OnFocus</code> 方法中，加载一张默认的图片进行赋值。</p><p>在 <code>OnGUI</code> 方法中，判断 <code>replaceSprite</code> 是否为空，然后再进行绘制，末尾加上 <code>as Sprite</code> 把 Object 类型转换成 Sprite。</p><blockquote><p>注意：如果传入 <code>EditorGUILayout.ObjectField</code> 的对象未赋值，窗口绘制时会报错，在 OnFocus 方法中进行赋值，每次聚焦到窗口时就能保证 replaceSprite 不为空。</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">// ...</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">ResourceReference</span> : <span class="hljs-title">EditorWindow</span><br>&#123;<br>    <span class="hljs-comment">// ...</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Sprite replaceSprite;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OnFocus</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-keyword">if</span> (replaceSprite == <span class="hljs-literal">null</span>)<br>        &#123;<br>            replaceSprite = AssetDatabase.LoadAssetAtPath&lt;Sprite&gt;(<span class="hljs-string">&quot;Assets/Textures/Default.png&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OnGUI</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-comment">// ...</span><br><br>        GUILayout.Space(<span class="hljs-number">10</span>);<br><br>        <span class="hljs-keyword">if</span> (replaceSprite != <span class="hljs-literal">null</span>)<br>        &#123;<br>            replaceSprite = EditorGUILayout.ObjectField(<span class="hljs-string">&quot;替换图片&quot;</span>, replaceSprite,<br>                replaceSprite.GetType(), <span class="hljs-literal">true</span>) <span class="hljs-keyword">as</span> Sprite;<br>        &#125;<br><br>        GUILayout.Space(<span class="hljs-number">10</span>);<br><br>        <span class="hljs-comment">// ...</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>现在窗口里就出现了一张默认的替换图片，点击图片还可以打开图片选择窗口，自由选择其他图片。</p><p><img src="/../images/unity-resource-reference/%E7%BB%98%E5%88%B6%E6%9B%BF%E6%8D%A2%E5%9B%BE%E7%89%87.png"></p><h3 id="替换图片"><a href="#替换图片" class="headerlink" title="替换图片"></a>替换图片</h3><p>首先，绘制一个替换按钮，把图片资源引用和替换按钮放在一个水平布局中。</p><p>替换按钮调用 <code>ReplaceSprite</code> 方法。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">// ...</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">ResourceReference</span> : <span class="hljs-title">EditorWindow</span><br>&#123;<br>    <span class="hljs-comment">// ...</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OnGUI</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-comment">// ...</span><br><br>        GUILayout.Space(<span class="hljs-number">10</span>);<br><br>        EditorGUILayout.BeginHorizontal();<br><br>        <span class="hljs-keyword">if</span> (replaceSprite != <span class="hljs-literal">null</span>)<br>        &#123;<br>            replaceSprite = EditorGUILayout.ObjectField(<span class="hljs-string">&quot;替换图片&quot;</span>, replaceSprite,<br>                replaceSprite.GetType(), <span class="hljs-literal">true</span>) <span class="hljs-keyword">as</span> Sprite;<br>        &#125;<br><br>        GUILayout.Space(<span class="hljs-number">50</span>);<br><br>        <span class="hljs-keyword">if</span> (GUILayout.Button(<span class="hljs-string">&quot;替换&quot;</span>, GUILayout.Height(<span class="hljs-number">50</span>)))<br>        &#123;<br>            ReplaceSprite();<br>        &#125;<br><br>        EditorGUILayout.EndHorizontal();<br><br>        GUILayout.Space(<span class="hljs-number">10</span>);<br><br>        <span class="hljs-comment">// ...</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>接着实现 <code>ReplaceSprite</code> 方法。</p><p>可以先判断一下 <code>replaceSprite</code> 和 <code>objects</code> 列表是否为空，如果为空，就弹窗提示。</p><p>然后遍历 objects 列表，先取出 prefab 数据，在 <code>do while</code> 中查找 <code>&quot;SpriteRenderer&quot;</code> 类型的数据，修改它的 sprite 属性，同时修改 <code>&quot;sprite&quot;</code> 类型的数据，让窗口列表的第三列数据能够刷新。</p><p>完成图片替换后，使用 <code>PrefabUtility.SavePrefabAsset</code> 保存预先取出的 prefab 数据，让 Assets 文件夹中的预制体资源同步修改，然后使用 <code>AssetDatabase.Refresh</code> 刷新 Assets 文件夹。</p><p>最后可以给一个弹窗提示，表示已经完成了图片的替换。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">// ...</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">ResourceReference</span> : <span class="hljs-title">EditorWindow</span><br>&#123;<br>    <span class="hljs-comment">// ...</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ReplaceSprite</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-keyword">if</span> (replaceSprite == <span class="hljs-literal">null</span>)<br>        &#123;<br>            EditorUtility.DisplayDialog(<span class="hljs-string">&quot;温馨提示&quot;</span>, <span class="hljs-string">&quot;替换图片为空&quot;</span>, <span class="hljs-string">&quot;okk&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <br>        <span class="hljs-keyword">if</span> (objects.Count == <span class="hljs-number">0</span>)<br>        &#123;<br>            EditorUtility.DisplayDialog(<span class="hljs-string">&quot;温馨提示&quot;</span>, <span class="hljs-string">&quot;节点列表为空&quot;</span>, <span class="hljs-string">&quot;okk&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; objects.Count; i++)<br>        &#123;<br>            Node node = objects[i];<br>            GameObject prefab = node.data <span class="hljs-keyword">as</span> GameObject;<br>            <span class="hljs-keyword">do</span><br>            &#123;<br>                <span class="hljs-keyword">if</span> (node.type == <span class="hljs-string">&quot;SpriteRenderer&quot;</span>)<br>                &#123;<br>                    SpriteRenderer sr = node.data <span class="hljs-keyword">as</span> SpriteRenderer;<br>                    sr.sprite = replaceSprite;<br>                &#125;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (node.type == <span class="hljs-string">&quot;sprite&quot;</span>)<br>                &#123;<br>                    node.data = replaceSprite;<br>                &#125;<br>                node = node.next;<br>            &#125; <span class="hljs-keyword">while</span> (node != <span class="hljs-literal">null</span>);<br><br>            PrefabUtility.SavePrefabAsset(prefab);<br>        &#125;<br><br>        AssetDatabase.Refresh();<br><br>        EditorUtility.DisplayDialog(<span class="hljs-string">&quot;温馨提示&quot;</span>, <span class="hljs-string">&quot;替换图片成功&quot;</span>, <span class="hljs-string">&quot;okk&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>替换图片演示：</p><p><img src="/../images/unity-resource-reference/%E6%9B%BF%E6%8D%A2%E5%9B%BE%E7%89%87%E6%BC%94%E7%A4%BA.gif"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Unity3D</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Unity3D 遍历预制体</title>
    <link href="/2024/08/25/unity-traverse-prefab/"/>
    <url>/2024/08/25/unity-traverse-prefab/</url>
    
    <content type="html"><![CDATA[<p>Unity3D 遍历预制体进行批量化处理。</p><span id="more"></span><h1 id="遍历预制体"><a href="#遍历预制体" class="headerlink" title="遍历预制体"></a>遍历预制体</h1><p>有时候，我们需要对一些预制体资源进行批量化处理，如果每一个预制体都手动处理，就会耗费很多时间精力，也容易出错。</p><p>我们可以写一个脚本遍历预制体，对预制体进行修改，然后保存。</p><h2 id="遍历文件路径"><a href="#遍历文件路径" class="headerlink" title="遍历文件路径"></a>遍历文件路径</h2><p>在 <code>Editor</code> 文件夹下创建一个脚本 <code>TraverseAssets.cs</code>，包含一个方法 <code>TraversePrefab</code>，加上 <code>MenuItem</code> 创建一个菜单栏按钮。</p><p>使用 <code>Directory.GetFiles</code> 方法，传入根目录的路径 path 和通配符 <code>*.prefab</code>，表示从 Assets 文件夹下获取所有以 <code>.prefab</code> 结尾的文件路径。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> System.IO;<br><span class="hljs-keyword">using</span> UnityEngine;<br><span class="hljs-keyword">using</span> UnityEditor;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">TraverseAssets</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">string</span> path = <span class="hljs-string">&quot;Assets/&quot;</span>;<br><br>    [<span class="hljs-meta">MenuItem(<span class="hljs-meta-string">&quot;搜索工具/遍历预制体&quot;</span>)</span>]<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">TraversePrefab</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-keyword">var</span> allfiles = Directory.GetFiles(path, <span class="hljs-string">&quot;*.prefab&quot;</span>, SearchOption.AllDirectories);<br><br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> file <span class="hljs-keyword">in</span> allfiles)<br>        &#123;<br>            Debug.Log(file);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>此时，菜单栏就有了<kbd>搜索工具</kbd>-&gt;<kbd>遍历预制体</kbd>按钮了。</p><p><img src="/../images/unity-traverse-assets/%E8%8F%9C%E5%8D%95%E6%A0%8F%E6%8C%89%E9%92%AE.png"></p><p>点击按钮，可以看到控制台打印了预制体的路径信息。</p><p><img src="/../images/unity-traverse-assets/%E6%8E%A7%E5%88%B6%E5%8F%B0%E6%89%93%E5%8D%B0%E4%BF%A1%E6%81%AF.png"></p><p>接下来，根据路径信息，加载预制体。</p><p>使用 <code>AssetDatabase.LoadAssetAtPath</code> 方法，把路径传入，就可以得到一个 <code>GameObject</code>。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> System.IO;<br><span class="hljs-keyword">using</span> UnityEngine;<br><span class="hljs-keyword">using</span> UnityEditor;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">TraverseAssets</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">string</span> path = <span class="hljs-string">&quot;Assets/&quot;</span>;<br><br>    [<span class="hljs-meta">MenuItem(<span class="hljs-meta-string">&quot;搜索工具/遍历预制体&quot;</span>)</span>]<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">TraversePrefab</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-keyword">var</span> allfiles = Directory.GetFiles(path, <span class="hljs-string">&quot;*.prefab&quot;</span>, SearchOption.AllDirectories);<br><br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> file <span class="hljs-keyword">in</span> allfiles)<br>        &#123;<br>            GameObject go = AssetDatabase.LoadAssetAtPath&lt;GameObject&gt;(file);<br>            <span class="hljs-keyword">if</span> (go)<br>            &#123;<br>                Debug.Log(go.name);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>再次点击菜单栏按钮，可以看到控制台打印的是已加载预制体的名称了。</p><p><img src="/../images/unity-traverse-assets/%E6%8E%A7%E5%88%B6%E5%8F%B0%E6%89%93%E5%8D%B0%E9%A2%84%E5%88%B6%E4%BD%93%E5%90%8D%E7%A7%B0.png"></p><h2 id="修改预制体并保存"><a href="#修改预制体并保存" class="headerlink" title="修改预制体并保存"></a>修改预制体并保存</h2><p>假设现在有个需求，搜索带有 <code>SpriteRenderer</code> 组件的预制体，把组件上的 <code>Order in Layer</code> 统一改成 100。</p><p>目前工程中，有两个预制体带有该组件，并且目标参数此时的值为 0。另外两个预制体没有该组件。</p><p><img src="/../images/unity-traverse-assets/%E9%A2%84%E5%88%B6%E4%BD%93%E9%A2%84%E8%A7%88.png"></p><p>修改一下脚本，从加载出来的 <code>GameObject</code> 上获取 <code>SpriteRenderer</code> 组件，如果存在，则对 <code>sortingOrder</code> 进行修改，然后使用 <code>PrefabUtility.SavePrefabAsset</code> 方法保存预制体。</p><p>在循环结束后，使用 <code>AssetDatabase.Refresh</code> 对资源进行刷新。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> System.IO;<br><span class="hljs-keyword">using</span> UnityEngine;<br><span class="hljs-keyword">using</span> UnityEditor;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">TraverseAssets</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">string</span> path = <span class="hljs-string">&quot;Assets/&quot;</span>;<br><br>    [<span class="hljs-meta">MenuItem(<span class="hljs-meta-string">&quot;搜索工具/遍历预制体&quot;</span>)</span>]<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">TraversePrefab</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-keyword">var</span> allfiles = Directory.GetFiles(path, <span class="hljs-string">&quot;*.prefab&quot;</span>, SearchOption.AllDirectories);<br><br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> file <span class="hljs-keyword">in</span> allfiles)<br>        &#123;<br>            GameObject go = AssetDatabase.LoadAssetAtPath&lt;GameObject&gt;(file);<br>            <span class="hljs-keyword">if</span> (go)<br>            &#123;<br>                SpriteRenderer sr = go.GetComponent&lt;SpriteRenderer&gt;();<br>                <span class="hljs-keyword">if</span> (sr)<br>                &#123;<br>                    sr.sortingOrder = <span class="hljs-number">100</span>;<br>                &#125;<br>            &#125;<br>            PrefabUtility.SavePrefabAsset(go);<br>        &#125;<br>        <br>        AssetDatabase.Refresh();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>点击菜单栏按钮，可以看到预制体已经被修改了，<code>Order in Layer</code> 都变成了 100。</p><p><img src="/../images/unity-traverse-assets/%E9%A2%84%E5%88%B6%E4%BD%93%E4%BF%AE%E6%94%B9%E5%90%8E.png"></p><p>至此，我们已经能够遍历资源文件夹，找出预制体，对它们统一进行需求上的处理，并保存修改。</p><h2 id="编辑窗口"><a href="#编辑窗口" class="headerlink" title="编辑窗口"></a>编辑窗口</h2><p>结合上一篇文章《Unity3D 自定义窗口》，我们可以制作一个窗口，把脚本里的一些参数提取出来，方便编辑。</p><p>主要是使用 <code>EditorGUILayout.TextField</code> 把参数呈现到文本输入框，例如 path 和 sortingOrder，在用户修改了文本输入框的内容后，这两个变量参数也会随之修改，在具体逻辑处使用这两个变量参数即可。</p><blockquote><p>注意：因为文本输入框的内容是 string 类型，这里的 sortingOrder 需要使用 <code>int.Parse</code> 进行类型转换。</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> System.IO;<br><span class="hljs-keyword">using</span> UnityEngine;<br><span class="hljs-keyword">using</span> UnityEditor;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">TraverseAssets</span> : <span class="hljs-title">EditorWindow</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">string</span> path = <span class="hljs-string">&quot;Assets/&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">string</span> sortingOrder = <span class="hljs-string">&quot;100&quot;</span>;<br><br>    [<span class="hljs-meta">MenuItem(<span class="hljs-meta-string">&quot;搜索工具/遍历预制体&quot;</span>)</span>]<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OpenWindow</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-comment">// 创建窗口对象</span><br>        TraverseAssets window = GetWindow&lt;TraverseAssets&gt;();<br><br>        <span class="hljs-comment">// 设置窗口标题</span><br>        window.titleContent = <span class="hljs-keyword">new</span> GUIContent(<span class="hljs-string">&quot;搜索工具&quot;</span>);<br><br>        <span class="hljs-comment">// 显示窗口</span><br>        window.Show();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OnGUI</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        GUILayout.Label(<span class="hljs-string">&quot;自定义搜索工具，可以遍历资源并修改&quot;</span>);<br><br>        GUILayout.Space(<span class="hljs-number">10</span>);<br><br>        path = EditorGUILayout.TextField(<span class="hljs-string">&quot;根目录&quot;</span>, path);<br>        sortingOrder = EditorGUILayout.TextField(<span class="hljs-string">&quot;层级排序&quot;</span>, sortingOrder);<br><br>        GUILayout.Space(<span class="hljs-number">10</span>);<br><br>        <span class="hljs-keyword">if</span> (GUILayout.Button(<span class="hljs-string">&quot;确定&quot;</span>, GUILayout.Height(<span class="hljs-number">50</span>)))<br>        &#123;<br>            TraversePrefab();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">TraversePrefab</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-keyword">var</span> allfiles = Directory.GetFiles(path, <span class="hljs-string">&quot;*.prefab&quot;</span>, SearchOption.AllDirectories);<br><br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> file <span class="hljs-keyword">in</span> allfiles)<br>        &#123;<br>            GameObject go = AssetDatabase.LoadAssetAtPath&lt;GameObject&gt;(file);<br>            <span class="hljs-keyword">if</span> (go)<br>            &#123;<br>                SpriteRenderer sr = go.GetComponent&lt;SpriteRenderer&gt;();<br>                <span class="hljs-keyword">if</span> (sr)<br>                &#123;<br>                    sr.sortingOrder = <span class="hljs-built_in">int</span>.Parse(sortingOrder);<br>                &#125;<br>            &#125;<br>            PrefabUtility.SavePrefabAsset(go);<br>        &#125;<br>        <br>        AssetDatabase.Refresh();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>现在点击菜单栏按钮，就会打开一个编辑窗口，可以修改参数，点击确定按钮就会对预制体进行修改并保存。</p><p>我们可以修改根目录，指定某个文件夹路径，对部分预制体进行修改，也可以指定层级排序，不需要修改脚本。</p><p><img src="/../images/unity-traverse-assets/%E7%BC%96%E8%BE%91%E7%AA%97%E5%8F%A3.png"></p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>使用的方法：</p><ul><li>遍历资源文件 <code>Directory.GetFiles</code></li><li>根据路径加载资源 <code>AssetDatabase.LoadAssetAtPath</code></li><li>保存预制体 <code>PrefabUtility.SavePrefabAsset</code></li><li>刷新资源 <code>AssetDatabase.Refresh</code></li></ul><p>可以制作一个编辑窗口，让参数的编辑更加方便。</p><p>除了修改层级排序，还可以替换图片、修改材质等，可以自行扩展功能。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Unity3D</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Unity3D 自定义窗口</title>
    <link href="/2024/08/18/unity-customize-window/"/>
    <url>/2024/08/18/unity-customize-window/</url>
    
    <content type="html"><![CDATA[<p>Unity3D 自定义窗口的实现。</p><span id="more"></span><h1 id="自定义窗口"><a href="#自定义窗口" class="headerlink" title="自定义窗口"></a>自定义窗口</h1><p>Unity3D 可以通过编写代码，扩展编辑器的菜单栏和窗口。</p><p>简单的功能可以直接一个菜单按钮实现，复杂的功能就需要绘制一个窗口展示更多的信息。</p><p>编辑器扩展的脚本，需要放在 Editor 文件夹中。</p><p><img src="/../images/unity-customize-window/%E6%96%87%E4%BB%B6%E5%A4%B9.png"></p><h2 id="菜单栏"><a href="#菜单栏" class="headerlink" title="菜单栏"></a>菜单栏</h2><p>首先，需要引用命名空间 <code>UnityEditor</code>，然后在类里编写静态方法，在方法的头顶上面添加 <code>MenuItem</code>，填写菜单栏的路径。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> UnityEditor;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">CustomizeWindow</span><br>&#123;<br>    [<span class="hljs-meta">MenuItem(<span class="hljs-meta-string">&quot;自定义窗口/打开窗口&quot;</span>)</span>]<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OpenWindow</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>编译一下，就能看到多出了一个菜单栏选项。</p><p><img src="/../images/unity-customize-window/%E8%8F%9C%E5%8D%95%E6%A0%8F.png"></p><h2 id="窗口"><a href="#窗口" class="headerlink" title="窗口"></a>窗口</h2><p>需要继承 <code>EditorWindow</code>，通过 <code>GetWindow</code> 方法创建一个窗口对象，调用 <code>Show</code> 方法显示。</p><p>可以通过修改 <code>titleContent</code> 设置窗口标题。</p><p>这里的 <code>GUIContent</code> 需要引用命名空间 <code>UnityEngine</code>。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> UnityEngine;<br><span class="hljs-keyword">using</span> UnityEditor;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">CustomizeWindow</span> : <span class="hljs-title">EditorWindow</span><br>&#123;<br>    [<span class="hljs-meta">MenuItem(<span class="hljs-meta-string">&quot;自定义窗口/打开窗口&quot;</span>)</span>]<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OpenWindow</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-comment">// 创建窗口对象</span><br>        CustomizeWindow window = GetWindow&lt;CustomizeWindow&gt;();<br><br>        <span class="hljs-comment">// 设置窗口标题</span><br>        window.titleContent = <span class="hljs-keyword">new</span> GUIContent(<span class="hljs-string">&quot;自定义窗口&quot;</span>);<br><br>        <span class="hljs-comment">// 显示窗口</span><br>        window.Show();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>现在再去点击菜单栏的<kbd>打开窗口</kbd>按钮，就能显示自定义窗口了。</p><p><img src="/../images/unity-customize-window/%E8%87%AA%E5%AE%9A%E4%B9%89%E7%AA%97%E5%8F%A3.png"></p><h3 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h3><p>现在窗口空荡荡的，可以先加两个按钮。</p><p>在窗口中绘制 UI 元素，需要写在生命周期函数 <code>OnGUI</code> 里面，使用 <code>GUILayout.Button</code> 创建按钮，使用 <code>GUILayout.Height</code> 设置按钮高度。</p><p>创建按钮的代码之所以放在 if 语句的条件判断里，是因为点击按钮后会返回一个布尔值，可以判断按钮是否被点击。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> UnityEngine;<br><span class="hljs-keyword">using</span> UnityEditor;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">CustomizeWindow</span> : <span class="hljs-title">EditorWindow</span><br>&#123;<br>    <span class="hljs-comment">// ...</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OnGUI</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-keyword">if</span> (GUILayout.Button(<span class="hljs-string">&quot;确定&quot;</span>, GUILayout.Height(<span class="hljs-number">50</span>)))<br>        &#123;<br><br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (GUILayout.Button(<span class="hljs-string">&quot;取消&quot;</span>, GUILayout.Height(<span class="hljs-number">50</span>)))<br>        &#123;<br>            <br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>现在窗口就有了两个按钮了。</p><p><img src="/../images/unity-customize-window/%E7%BB%98%E5%88%B6%E6%8C%89%E9%92%AE.png"></p><h3 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h3><p>使用 <code>GUILayout.Label</code> 绘制文本。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> UnityEngine;<br><span class="hljs-keyword">using</span> UnityEditor;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">CustomizeWindow</span> : <span class="hljs-title">EditorWindow</span><br>&#123;<br>    <span class="hljs-comment">// ...</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OnGUI</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        GUILayout.Label(<span class="hljs-string">&quot;这是一个自定义的窗口，可以自由编写功能&quot;</span>);<br>        <br>        <span class="hljs-comment">// ...</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>现在窗口有文本了。</p><p><img src="/../images/unity-customize-window/%E7%BB%98%E5%88%B6%E6%96%87%E6%9C%AC.png"></p><h3 id="文本输入框"><a href="#文本输入框" class="headerlink" title="文本输入框"></a>文本输入框</h3><p>使用 <code>EditorGUILayout.TextField</code> 绘制文本输入框，它有返回值，是输入框的内容。</p><p>可以在按钮里面打印一下文本输入框的内容。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> UnityEngine;<br><span class="hljs-keyword">using</span> UnityEditor;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">CustomizeWindow</span> : <span class="hljs-title">EditorWindow</span><br>&#123;<br>    <span class="hljs-comment">// ...</span><br><br>    <span class="hljs-built_in">string</span> input = <span class="hljs-string">&quot;请输入...&quot;</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OnGUI</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-comment">// ...</span><br>        <br>        input = EditorGUILayout.TextField(input);<br><br>        <span class="hljs-keyword">if</span> (GUILayout.Button(<span class="hljs-string">&quot;确定&quot;</span>, GUILayout.Height(<span class="hljs-number">50</span>)))<br>        &#123;<br>            Debug.Log(<span class="hljs-string">&quot;input = &quot;</span> + input);<br>        &#125;<br><br>        <span class="hljs-comment">// ...</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>现在窗口有文本输入框了。</p><p><img src="/../images/unity-customize-window/%E7%BB%98%E5%88%B6%E6%96%87%E6%9C%AC%E8%BE%93%E5%85%A5%E6%A1%86.png"></p><h3 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h3><p>按钮文本的样式也可以自定义。</p><p>先定义 <code>GUIStyle</code> 变量，在 <code>InitGUIStyle</code> 方法中，分别对三种控件的样式进行初始化设置，然后传递给控件的第二个参数。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> UnityEngine;<br><span class="hljs-keyword">using</span> UnityEditor;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">CustomizeWindow</span> : <span class="hljs-title">EditorWindow</span><br>&#123;<br>    GUIStyle buttonStyle;<br>    GUIStyle labelStyle;<br>    GUIStyle textFieldStyle;<br><br>    <span class="hljs-comment">// ...</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OnGUI</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        InitGUIStyle();<br><br>        GUILayout.Label(<span class="hljs-string">&quot;这是一个自定义的窗口，可以自由编写功能&quot;</span>, labelStyle);<br><br>        input = EditorGUILayout.TextField(input, textFieldStyle);<br><br>        <span class="hljs-keyword">if</span> (GUILayout.Button(<span class="hljs-string">&quot;确定&quot;</span>, buttonStyle, GUILayout.Height(<span class="hljs-number">50</span>)))<br>        &#123;<br>            Debug.Log(<span class="hljs-string">&quot;input = &quot;</span> + input);<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (GUILayout.Button(<span class="hljs-string">&quot;取消&quot;</span>, buttonStyle, GUILayout.Height(<span class="hljs-number">50</span>)))<br>        &#123;<br>            <br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">InitGUIStyle</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-keyword">if</span> (buttonStyle == <span class="hljs-literal">null</span>)<br>        &#123;<br>            buttonStyle = <span class="hljs-keyword">new</span> GUIStyle(GUI.skin.button);<br>            buttonStyle.fontSize = <span class="hljs-number">14</span>;<br>            buttonStyle.margin.left = <span class="hljs-number">20</span>;<br>            buttonStyle.margin.right = <span class="hljs-number">20</span>;<br>            buttonStyle.margin.top = <span class="hljs-number">20</span>;<br>            buttonStyle.margin.bottom = <span class="hljs-number">20</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (labelStyle == <span class="hljs-literal">null</span>)<br>        &#123;<br>            labelStyle = <span class="hljs-keyword">new</span> GUIStyle(EditorStyles.boldLabel);<br>            labelStyle.fontSize = <span class="hljs-number">14</span>;<br>            labelStyle.margin.left = <span class="hljs-number">20</span>;<br>            labelStyle.margin.right = <span class="hljs-number">20</span>;<br>            labelStyle.margin.top = <span class="hljs-number">20</span>;<br>            labelStyle.margin.bottom = <span class="hljs-number">20</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (textFieldStyle == <span class="hljs-literal">null</span>)<br>        &#123;<br>            textFieldStyle = <span class="hljs-keyword">new</span> GUIStyle(EditorStyles.toolbarTextField);<br>            textFieldStyle.fontSize = <span class="hljs-number">14</span>;<br>            textFieldStyle.fixedHeight = <span class="hljs-number">30</span>;<br>            textFieldStyle.margin.left = <span class="hljs-number">20</span>;<br>            textFieldStyle.margin.right = <span class="hljs-number">20</span>;<br>            textFieldStyle.margin.top = <span class="hljs-number">20</span>;<br>            textFieldStyle.margin.bottom = <span class="hljs-number">20</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>现在窗口焕然一新。</p><p><img src="/../images/unity-customize-window/%E6%A0%B7%E5%BC%8F.png"></p><h3 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h3><p>窗口内的控件可以调整摆放的布局。</p><p>例如，把两个垂直摆放的按钮，改成水平布局。</p><ul><li>在按钮代码的开头加上 <code>EditorGUILayout.BeginHorizontal();</code></li><li>在按钮代码的结尾加上 <code>EditorGUILayout.EndHorizontal();</code></li></ul><p>被这两行代码包围的控件，就会处于同一个水平布局之中。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> UnityEngine;<br><span class="hljs-keyword">using</span> UnityEditor;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">CustomizeWindow</span> : <span class="hljs-title">EditorWindow</span><br>&#123;<br>    <span class="hljs-comment">// ...</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OnGUI</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-comment">// ...</span><br><br>        EditorGUILayout.BeginHorizontal();<br><br>        <span class="hljs-keyword">if</span> (GUILayout.Button(<span class="hljs-string">&quot;确定&quot;</span>, buttonStyle, GUILayout.Height(<span class="hljs-number">50</span>)))<br>        &#123;<br>            Debug.Log(<span class="hljs-string">&quot;input = &quot;</span> + input);<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (GUILayout.Button(<span class="hljs-string">&quot;取消&quot;</span>, buttonStyle, GUILayout.Height(<span class="hljs-number">50</span>)))<br>        &#123;<br>            <br>        &#125;<br><br>        EditorGUILayout.EndHorizontal();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>现在两个按钮就在同一个水平布局之中了。</p><p><img src="/../images/unity-customize-window/%E5%B8%83%E5%B1%80.png"></p><h3 id="间隔"><a href="#间隔" class="headerlink" title="间隔"></a>间隔</h3><p>使用 <code>GUILayout.Space</code> 绘制间隔。</p><p>例如，在文本输入框和按钮之间，加入 10 的间隔。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> UnityEngine;<br><span class="hljs-keyword">using</span> UnityEditor;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">CustomizeWindow</span> : <span class="hljs-title">EditorWindow</span><br>&#123;<br>    <span class="hljs-comment">// ...</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OnGUI</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-comment">// ...</span><br><br>        input = EditorGUILayout.TextField(input, textFieldStyle);<br><br>        GUILayout.Space(<span class="hljs-number">10</span>);<br><br>        EditorGUILayout.BeginHorizontal();<br><br>        <span class="hljs-comment">// ...</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>现在文本输入框和按钮之间就不会那么贴近了。</p><p><img src="/../images/unity-customize-window/%E9%97%B4%E9%9A%94.png"></p><h3 id="滚动视图"><a href="#滚动视图" class="headerlink" title="滚动视图"></a>滚动视图</h3><p>滚动视图也是两行代码包围控件。</p><ul><li><code>EditorGUILayout.BeginScrollView(scrollPos);</code></li><li><code>EditorGUILayout.EndScrollView();</code></li></ul><p>不过滚动视图需要定义一个 <code>Vector2 scrollPos</code>，在滚动时记录当前的位置。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> UnityEngine;<br><span class="hljs-keyword">using</span> UnityEditor;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">CustomizeWindow</span> : <span class="hljs-title">EditorWindow</span><br>&#123;<br>    <span class="hljs-comment">// ...</span><br><br>    GUIStyle scrollViewStyle;<br><br>    Vector2 scrollPos = Vector2.zero;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OnGUI</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-comment">// ...</span><br><br>        GUILayout.Label(<span class="hljs-string">&quot;搜索结果&quot;</span>, labelStyle);<br><br>        scrollPos = EditorGUILayout.BeginScrollView(scrollPos, scrollViewStyle);<br><br>        GUILayout.Label(<span class="hljs-string">&quot;结果 1&quot;</span>, labelStyle);<br><br>        GUILayout.Label(<span class="hljs-string">&quot;结果 2&quot;</span>, labelStyle);<br><br>        EditorGUILayout.EndScrollView();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">InitGUIStyle</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-comment">// ...</span><br><br>        <span class="hljs-keyword">if</span> (scrollViewStyle == <span class="hljs-literal">null</span>)<br>        &#123;<br>            scrollViewStyle = <span class="hljs-keyword">new</span> GUIStyle(GUI.skin.scrollView);<br>            scrollViewStyle.fontSize = <span class="hljs-number">14</span>;<br>            scrollViewStyle.margin.left = <span class="hljs-number">20</span>;<br>            scrollViewStyle.margin.right = <span class="hljs-number">20</span>;<br>            scrollViewStyle.margin.top = <span class="hljs-number">20</span>;<br>            scrollViewStyle.margin.bottom = <span class="hljs-number">20</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>现在就有了一个展示结果列表的滚动视图。</p><p><img src="/../images/unity-customize-window/%E6%BB%9A%E5%8A%A8%E8%A7%86%E5%9B%BE.png"></p><h2 id="弹窗"><a href="#弹窗" class="headerlink" title="弹窗"></a>弹窗</h2><p>现在点按钮是没有反馈的，通常情况下可以给一个弹窗提示。</p><ul><li>弹窗附带一个确定和一个关闭按钮，使用 <code>EditorUtility.DisplayDialog</code>，返回 true 或者 false</li><li>弹窗附带一个确定、一个取消、一个可选和一个关闭按钮，使用 <code>EditorUtility.DisplayDialogComplex</code>，返回 0、1、2</li></ul><p>例如，在确定和取消按钮中添加弹窗提示。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> UnityEngine;<br><span class="hljs-keyword">using</span> UnityEditor;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">CustomizeWindow</span> : <span class="hljs-title">EditorWindow</span><br>&#123;<br>    <span class="hljs-comment">// ...</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OnGUI</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-comment">// ...</span><br><br>        <span class="hljs-keyword">if</span> (GUILayout.Button(<span class="hljs-string">&quot;确定&quot;</span>, buttonStyle, GUILayout.Height(<span class="hljs-number">50</span>)))<br>        &#123;<br>            <span class="hljs-built_in">int</span> id = EditorUtility.DisplayDialogComplex(<span class="hljs-string">&quot;温馨提示&quot;</span>, <span class="hljs-string">&quot;搜索完成&quot;</span>, <span class="hljs-string">&quot;okk&quot;</span>, <span class="hljs-string">&quot;oh no&quot;</span>, <span class="hljs-string">&quot;good&quot;</span>);<br>            Debug.Log(id);<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (GUILayout.Button(<span class="hljs-string">&quot;取消&quot;</span>, buttonStyle, GUILayout.Height(<span class="hljs-number">50</span>)))<br>        &#123;<br>            <span class="hljs-built_in">bool</span> flag = EditorUtility.DisplayDialog(<span class="hljs-string">&quot;温馨提示&quot;</span>, <span class="hljs-string">&quot;已取消&quot;</span>, <span class="hljs-string">&quot;okk&quot;</span>);<br>            Debug.Log(flag);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>现在点击确定按钮，弹出附带三个按钮和关闭按钮的弹窗。</p><p><img src="/../images/unity-customize-window/%E5%A4%8D%E6%9D%82%E5%BC%B9%E7%AA%97.png"></p><p>点击取消按钮，弹出附带一个按钮和关闭按钮的弹窗。</p><p><img src="/../images/unity-customize-window/%E7%AE%80%E5%8D%95%E5%BC%B9%E7%AA%97.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Unity3D</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Unity3D MD5 签名算法</title>
    <link href="/2024/08/11/unity-md5-sign/"/>
    <url>/2024/08/11/unity-md5-sign/</url>
    
    <content type="html"><![CDATA[<p>Unity3D MD5 签名算法实现流程。</p><span id="more"></span><h1 id="MD5-签名算法"><a href="#MD5-签名算法" class="headerlink" title="MD5 签名算法"></a>MD5 签名算法</h1><p>之前在和运营对接支付订单模块时，需要向他们的服务器发送查单请求，其中有个参数是 sign，要求把订单的相关信息，转换成 MD5 的形式。</p><p>简要流程：</p><ol><li>先对参数列表按照 ASCII 码排序</li><li>参数列表拼接成字符串，末尾拼接密钥</li><li>拼接后的字符串做 MD5 计算</li></ol><h2 id="参数列表排序"><a href="#参数列表排序" class="headerlink" title="参数列表排序"></a>参数列表排序</h2><p>首先，假设有如下参数：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> System.Collections;<br><span class="hljs-keyword">using</span> System.Collections.Generic;<br><span class="hljs-keyword">using</span> UnityEngine;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">TestMD5</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        Dictionary&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">object</span>&gt; args = <span class="hljs-keyword">new</span> Dictionary&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">object</span>&gt;<br>        &#123;<br>            [<span class="hljs-meta"><span class="hljs-meta-string">&quot;product_id&quot;</span></span>] = <span class="hljs-number">100001</span>,         <span class="hljs-comment">// 产品 id</span><br>            [<span class="hljs-meta"><span class="hljs-meta-string">&quot;product_name&quot;</span></span>] = <span class="hljs-string">&quot;金币礼包&quot;</span>,    <span class="hljs-comment">// 产品名称</span><br>            [<span class="hljs-meta"><span class="hljs-meta-string">&quot;amount&quot;</span></span>] = <span class="hljs-number">1</span>,                  <span class="hljs-comment">// 数量</span><br>            [<span class="hljs-meta"><span class="hljs-meta-string">&quot;price&quot;</span></span>] = <span class="hljs-number">600</span>                  <span class="hljs-comment">// 价格</span><br>        &#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>现在需要先对字典中的参数按照 ASCII 码进行排序。</p><p>这里创建一个静态类 <code>MD5Sign.cs</code> 作为工具类使用。</p><p>添加方法 <code>AsciiDicToStr</code>，接收字典类型的参数，返回字符串。</p><p>引用 <code>System.Linq</code> 命名空间，可以扩展字典的方法，例如 ToArray，把字典的 key 值取出，变成数组。</p><p>利用 <code>Array.Sort</code> 进行排序（需要命名空间 <code>System</code>），传入参数 <code>string.CompareOrdinal</code> 就可以按照 ASCII 码从小到大进行排序了。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> System;<br><span class="hljs-keyword">using</span> System.Collections;<br><span class="hljs-keyword">using</span> System.Collections.Generic;<br><span class="hljs-keyword">using</span> System.Linq;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title">MD5Sign</span><br>&#123;<br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> 以参数名的 ASCII 码从小到大排序并拼接</span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;args&quot;&gt;</span>参数列表<span class="hljs-doctag">&lt;/param&gt;</span></span><br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-built_in">string</span> <span class="hljs-title">AsciiDicToStr</span>(<span class="hljs-params">Dictionary&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">object</span>&gt; args</span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-comment">// 取出 key 集合并转换成数组</span><br>        <span class="hljs-built_in">string</span>[] keysArray = args.Keys.ToArray();<br><br>        <span class="hljs-comment">// 对 key 数组进行排序（ASCII 码从小到大）</span><br>        Array.Sort(keysArray, <span class="hljs-built_in">string</span>.CompareOrdinal);<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="参数拼接字符串"><a href="#参数拼接字符串" class="headerlink" title="参数拼接字符串"></a>参数拼接字符串</h2><p>继续扩展 <code>AsciiDicToStr</code> 方法。</p><p>引用命名空间 <code>System.Text</code>，就可以使用 <code>StringBuilder</code> 来拼接字符串了。</p><p>遍历 key 数组，按照 <code>key=value&amp;</code> 的形式拼接，参数值为 null 或者 “” 不参与签名。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> System;<br><span class="hljs-keyword">using</span> System.Collections;<br><span class="hljs-keyword">using</span> System.Collections.Generic;<br><span class="hljs-keyword">using</span> System.Linq;<br><span class="hljs-keyword">using</span> System.Text;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title">MD5Sign</span><br>&#123;<br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> 以参数名的 ASCII 码从小到大排序并拼接</span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;args&quot;&gt;</span>参数列表<span class="hljs-doctag">&lt;/param&gt;</span></span><br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-built_in">string</span> <span class="hljs-title">AsciiDicToStr</span>(<span class="hljs-params">Dictionary&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">object</span>&gt; args</span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-comment">// 取出 key 集合并转换成数组</span><br>        <span class="hljs-built_in">string</span>[] keysArray = args.Keys.ToArray();<br><br>        <span class="hljs-comment">// 对 key 数组进行排序（ASCII 码从小到大）</span><br>        Array.Sort(keysArray, <span class="hljs-built_in">string</span>.CompareOrdinal);<br><br>        <span class="hljs-comment">// 按照排序后的 key 数组依次从字典中取出值进行拼接</span><br>        StringBuilder sb = <span class="hljs-keyword">new</span> StringBuilder();<br><br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> key <span class="hljs-keyword">in</span> keysArray)<br>        &#123;<br>            <span class="hljs-built_in">string</span> <span class="hljs-keyword">value</span> = args[key]?.ToString();<br><br>            <span class="hljs-comment">// 参数值为 null 或者 &quot;&quot; 不参与签名</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">value</span> != <span class="hljs-literal">null</span> &amp;&amp; !<span class="hljs-built_in">string</span>.Empty.Equals(<span class="hljs-keyword">value</span>))<br>            &#123;<br>                sb.Append(key);<br>                sb.Append(<span class="hljs-string">&quot;=&quot;</span>);<br>                sb.Append(<span class="hljs-keyword">value</span>);<br>                sb.Append(<span class="hljs-string">&quot;&amp;&quot;</span>);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> sb.ToString();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>现在可以再添加一个方法 <code>ComputeSign</code> 提供给外部调用。</p><p>这里定义了一个密钥，内容是随便输入的，用于演示，通常情况下密钥不会放在客户端，防止被破解获取，应该放到服务端。</p><p>调用上面写的 <code>AsciiDicToStr</code> 方法，传入字典，得到 result，在末尾继续拼接 <code>key=signKey</code>。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title">MD5Sign</span><br>&#123;<br>    <span class="hljs-comment">// 密钥，通常应该放到服务端，此处为了演示先放客户端</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-built_in">string</span> signKey = <span class="hljs-string">&quot;abcdefg&quot;</span>;<br><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> 计算参数签名</span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;args&quot;&gt;</span>参数列表<span class="hljs-doctag">&lt;/param&gt;</span></span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">string</span> <span class="hljs-title">ComputeSign</span>(<span class="hljs-params">Dictionary&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">object</span>&gt; args</span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-comment">// 按照 ASCII 码从小到大排序并拼接</span><br>        <span class="hljs-built_in">string</span> result = AsciiDicToStr(args);<br><br>        <span class="hljs-comment">// 拼接密钥</span><br>        result += <span class="hljs-string">$&quot;key=<span class="hljs-subst">&#123;signKey&#125;</span>&quot;</span>;<br><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>现在可以先调用这个方法，查看拼接后的结果。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">TestMD5</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        Dictionary&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">object</span>&gt; args = <span class="hljs-keyword">new</span> Dictionary&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">object</span>&gt;<br>        &#123;<br>            [<span class="hljs-meta"><span class="hljs-meta-string">&quot;product_id&quot;</span></span>] = <span class="hljs-number">100001</span>,         <span class="hljs-comment">// 产品 id</span><br>            [<span class="hljs-meta"><span class="hljs-meta-string">&quot;product_name&quot;</span></span>] = <span class="hljs-string">&quot;金币礼包&quot;</span>,    <span class="hljs-comment">// 产品名称</span><br>            [<span class="hljs-meta"><span class="hljs-meta-string">&quot;amount&quot;</span></span>] = <span class="hljs-number">1</span>,                  <span class="hljs-comment">// 数量</span><br>            [<span class="hljs-meta"><span class="hljs-meta-string">&quot;price&quot;</span></span>] = <span class="hljs-number">600</span>                  <span class="hljs-comment">// 价格</span><br>        &#125;;<br><br>        <span class="hljs-built_in">string</span> result = MD5Sign.ComputeSign(args);<br>        Debug.Log(<span class="hljs-string">$&quot;result = <span class="hljs-subst">&#123;result&#125;</span>&quot;</span>);<br>        <br>        <span class="hljs-comment">// result = amount=1&amp;price=600&amp;product_id=100001&amp;product_name=金币礼包&amp;key=abcdefg</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="计算-MD5"><a href="#计算-MD5" class="headerlink" title="计算 MD5"></a>计算 MD5</h2><p>在静态类 <code>MD5Sign.cs</code> 中继续添加方法 <code>ComputeStringMD5</code>，接收字符串，返回字符串。</p><p>在 C# 中，有提供用于加密算法的类，需要引用命名空间 <code>System.Security.Cryptography</code>。</p><p>创建一个 MD5 对象，先通过 <code>Encoding.UTF8.GetBytes</code> 方法，把字符串转成 byte 数组，传给 MD5 对象的 <code>ComputeHash</code> 方法，同样得到 byte 数组，遍历这个 byte 数组，使用 <code>ToString(&quot;X2&quot;)</code> 的格式进行拼接（<code>X2</code> 表示使用大写十六进制，不足两位时前面补 0）。</p><p>因为 byte 数组的长度是 16，每个值都转成两位字符串，最终得到的就是 32 位字符串。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">// ...</span><br><span class="hljs-keyword">using</span> System.Security.Cryptography;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title">MD5Sign</span><br>&#123;<br>    <span class="hljs-comment">// ...</span><br><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> 计算字符串的 MD5 值</span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;str&quot;&gt;</span>字符串<span class="hljs-doctag">&lt;/param&gt;</span></span><br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-built_in">string</span> <span class="hljs-title">ComputeStringMD5</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> str</span>)</span><br><span class="hljs-function"></span>    &#123;<br>        StringBuilder sb = <span class="hljs-keyword">new</span> StringBuilder();<br><br>        <span class="hljs-comment">// 创建 MD5 对象</span><br>        <span class="hljs-keyword">using</span> (MD5 md5 = MD5.Create())<br>        &#123;<br>            <span class="hljs-comment">// 字符串转 byte 数组</span><br>            <span class="hljs-built_in">byte</span>[] buffer = Encoding.UTF8.GetBytes(str);<br><br>            <span class="hljs-comment">// 计算 MD5 值</span><br>            <span class="hljs-built_in">byte</span>[] mdBytes = md5.ComputeHash(buffer);<br>            md5.Clear();<br><br>            <span class="hljs-comment">// 将 byte 数组中的每个元素以大写十六进制字符串的方式拼接</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; mdBytes.Length; i++)<br>            &#123;<br>                sb.Append(mdBytes[i].ToString(<span class="hljs-string">&quot;X2&quot;</span>));<br>            &#125;<br><br>            <span class="hljs-keyword">return</span> sb.ToString();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>最后把这个方法接入 <code>ComputeSign</code> 方法中。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title">MD5Sign</span><br>&#123;<br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> 计算参数签名</span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;args&quot;&gt;</span>参数列表<span class="hljs-doctag">&lt;/param&gt;</span></span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">string</span> <span class="hljs-title">ComputeSign</span>(<span class="hljs-params">Dictionary&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">object</span>&gt; args</span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-comment">// 按照 ASCII 码从小到大排序并拼接</span><br>        <span class="hljs-built_in">string</span> result = AsciiDicToStr(args);<br><br>        <span class="hljs-comment">// 拼接密钥</span><br>        result += <span class="hljs-string">$&quot;key=<span class="hljs-subst">&#123;signKey&#125;</span>&quot;</span>;<br><br>        <span class="hljs-comment">// 计算拼接后的字符串的 MD5 值</span><br>        <span class="hljs-built_in">string</span> md5 = ComputeStringMD5(result);<br><br>        <span class="hljs-keyword">return</span> md5;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>现在调用这个方法就可以得到计算 MD5 之后的结果了。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">TestMD5</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        Dictionary&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">object</span>&gt; args = <span class="hljs-keyword">new</span> Dictionary&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">object</span>&gt;<br>        &#123;<br>            [<span class="hljs-meta"><span class="hljs-meta-string">&quot;product_id&quot;</span></span>] = <span class="hljs-number">100001</span>,         <span class="hljs-comment">// 产品 id</span><br>            [<span class="hljs-meta"><span class="hljs-meta-string">&quot;product_name&quot;</span></span>] = <span class="hljs-string">&quot;金币礼包&quot;</span>,    <span class="hljs-comment">// 产品名称</span><br>            [<span class="hljs-meta"><span class="hljs-meta-string">&quot;amount&quot;</span></span>] = <span class="hljs-number">1</span>,                  <span class="hljs-comment">// 数量</span><br>            [<span class="hljs-meta"><span class="hljs-meta-string">&quot;price&quot;</span></span>] = <span class="hljs-number">600</span>                  <span class="hljs-comment">// 价格</span><br>        &#125;;<br><br>        <span class="hljs-built_in">string</span> result = MD5Sign.ComputeSign(args);<br>        Debug.Log(<span class="hljs-string">$&quot;result = <span class="hljs-subst">&#123;result&#125;</span>&quot;</span>);<br>        <br>        <span class="hljs-comment">// result = EF4834EF466F73319545057E703E73E2</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><p><code>MD5Sign.cs</code></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> System;<br><span class="hljs-keyword">using</span> System.Collections;<br><span class="hljs-keyword">using</span> System.Collections.Generic;<br><span class="hljs-keyword">using</span> System.Linq;<br><span class="hljs-keyword">using</span> System.Text;<br><span class="hljs-keyword">using</span> System.Security.Cryptography;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title">MD5Sign</span><br>&#123;<br>    <span class="hljs-comment">// 密钥，通常应该放到服务端，此处为了演示先放客户端</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-built_in">string</span> signKey = <span class="hljs-string">&quot;abcdefg&quot;</span>;<br><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> 计算参数签名</span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;args&quot;&gt;</span>参数列表<span class="hljs-doctag">&lt;/param&gt;</span></span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">string</span> <span class="hljs-title">ComputeSign</span>(<span class="hljs-params">Dictionary&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">object</span>&gt; args</span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-comment">// 按照 ASCII 码从小到大排序并拼接</span><br>        <span class="hljs-built_in">string</span> result = AsciiDicToStr(args);<br><br>        <span class="hljs-comment">// 拼接密钥</span><br>        result += <span class="hljs-string">$&quot;key=<span class="hljs-subst">&#123;signKey&#125;</span>&quot;</span>;<br><br>        <span class="hljs-comment">// 计算拼接后的字符串的 MD5 值</span><br>        <span class="hljs-built_in">string</span> md5 = ComputeStringMD5(result);<br><br>        <span class="hljs-keyword">return</span> md5;<br>    &#125;<br><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> 以参数名的 ASCII 码从小到大排序并拼接</span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;args&quot;&gt;</span>参数列表<span class="hljs-doctag">&lt;/param&gt;</span></span><br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-built_in">string</span> <span class="hljs-title">AsciiDicToStr</span>(<span class="hljs-params">Dictionary&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">object</span>&gt; args</span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-comment">// 取出 key 集合并转换成数组</span><br>        <span class="hljs-built_in">string</span>[] keysArray = args.Keys.ToArray();<br><br>        <span class="hljs-comment">// 对 key 数组进行排序（ASCII 码从小到大）</span><br>        Array.Sort(keysArray, <span class="hljs-built_in">string</span>.CompareOrdinal);<br><br>        <span class="hljs-comment">// 按照排序后的 key 数组依次从字典中取出值进行拼接</span><br>        StringBuilder sb = <span class="hljs-keyword">new</span> StringBuilder();<br><br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> key <span class="hljs-keyword">in</span> keysArray)<br>        &#123;<br>            <span class="hljs-built_in">string</span> <span class="hljs-keyword">value</span> = args[key]?.ToString();<br><br>            <span class="hljs-comment">// 参数值为 null 或者 &quot;&quot; 不参与签名</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">value</span> != <span class="hljs-literal">null</span> &amp;&amp; !<span class="hljs-built_in">string</span>.Empty.Equals(<span class="hljs-keyword">value</span>))<br>            &#123;<br>                sb.Append(key);<br>                sb.Append(<span class="hljs-string">&quot;=&quot;</span>);<br>                sb.Append(<span class="hljs-keyword">value</span>);<br>                sb.Append(<span class="hljs-string">&quot;&amp;&quot;</span>);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> sb.ToString();<br>    &#125;<br><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> 计算字符串的 MD5 值</span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;str&quot;&gt;</span>字符串<span class="hljs-doctag">&lt;/param&gt;</span></span><br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-built_in">string</span> <span class="hljs-title">ComputeStringMD5</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> str</span>)</span><br><span class="hljs-function"></span>    &#123;<br>        StringBuilder sb = <span class="hljs-keyword">new</span> StringBuilder();<br><br>        <span class="hljs-comment">// 创建 MD5 对象</span><br>        <span class="hljs-keyword">using</span> (MD5 md5 = MD5.Create())<br>        &#123;<br>            <span class="hljs-comment">// 字符串转 byte 数组</span><br>            <span class="hljs-built_in">byte</span>[] buffer = Encoding.UTF8.GetBytes(str);<br><br>            <span class="hljs-comment">// 计算 MD5 值</span><br>            <span class="hljs-built_in">byte</span>[] mdBytes = md5.ComputeHash(buffer);<br>            md5.Clear();<br><br>            <span class="hljs-comment">// 将 byte 数组中的每个元素以大写十六进制字符串的方式拼接</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; mdBytes.Length; i++)<br>            &#123;<br>                sb.Append(mdBytes[i].ToString(<span class="hljs-string">&quot;X2&quot;</span>));<br>            &#125;<br><br>            <span class="hljs-keyword">return</span> sb.ToString();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Unity3D</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Unity3D 物体圆周运动</title>
    <link href="/2024/08/04/unity-circular-motion/"/>
    <url>/2024/08/04/unity-circular-motion/</url>
    
    <content type="html"><![CDATA[<p>Unity3D 实现一个 2D 物体沿着圆周进行运动。</p><span id="more"></span><h1 id="物体圆周运动"><a href="#物体圆周运动" class="headerlink" title="物体圆周运动"></a>物体圆周运动</h1><p>前段时间在开发一个小游戏时，需要实现火箭沿着一个圆形轨道进行圆周运动。</p><p>以前面试的时候也被问到过这类问题（如何让一个 2D 物体做圆周运动），所以还是记录一下实现思路。</p><h2 id="准备素材"><a href="#准备素材" class="headerlink" title="准备素材"></a>准备素材</h2><p>可以在网上找两张图片素材，只要是一个物体和一个圆圈就行了，这里就先不提供素材啦。</p><p><img src="/../images/unity-circular-motion/%E5%87%86%E5%A4%87%E7%B4%A0%E6%9D%90.png"></p><p>然后直接把每张图片素材分别拖拽到场景中。</p><p><img src="/../images/unity-circular-motion/%E6%8B%96%E5%88%B0%E5%9C%BA%E6%99%AF.png"></p><h2 id="数学知识"><a href="#数学知识" class="headerlink" title="数学知识"></a>数学知识</h2><p>在看到这个场景时，可以联想到一个单位圆，三角函数之类的数学知识。</p><p>例如下图，圆的半径 r &#x3D; 1，点 P 落在圆周上，直线 OP 与 x 轴的夹角为 $α$。</p><p>因为 a，b，r 三条边构成了一个三角形，可以使用正弦、余弦和正切的概念，跟夹角联系起来，即<br>$$<br>sin α &#x3D; 对边&#x2F;斜边 &#x3D; b&#x2F;r &#x3D; b<br>$$</p><p>$$<br>cos α &#x3D; 邻边&#x2F;斜边 &#x3D; a&#x2F;r &#x3D; a<br>$$</p><p>$$<br>tan α &#x3D; 对边&#x2F;邻边 &#x3D; b&#x2F;a<br>$$</p><p><img src="/../images/unity-circular-motion/%E6%95%B0%E5%AD%A6%E7%9F%A5%E8%AF%86.png"></p><p>那么，当夹角发生改变时，我们可以通过正弦和余弦计算出点 P 的坐标。</p><p>过点 P 作直线 PQ 垂直于直线 OP，直线 PQ 是点 P 处的切线。</p><p><img src="/../images/unity-circular-motion/%E6%95%B0%E5%AD%A6%E7%9F%A5%E8%AF%86%E5%88%87%E7%BA%BF.png"></p><h2 id="实现功能"><a href="#实现功能" class="headerlink" title="实现功能"></a>实现功能</h2><h3 id="计算坐标位置"><a href="#计算坐标位置" class="headerlink" title="计算坐标位置"></a>计算坐标位置</h3><p>创建脚本 CircularMotion.cs，挂载到火箭上。</p><p>脚本中有三个变量：</p><ul><li>radius 控制圆的半径，改变火箭移动的轨迹。</li><li>angle 实时变化的角度，在 Update 中不断变化。</li><li>speed 控制角度变化的速度。</li></ul><p>在 Update 中，先把角度转成弧度，这是因为 <code>Mathf.Sin</code> 和 <code>Mathf.Cos</code> 接收的是一个弧度值。</p><p>只需要让角度乘上 <code>Mathf.Deg2Rad</code> 这个常量值即可。</p><p>接着，通过弧度值，计算出正弦和余弦，乘上半径（也就是斜边），就可以得到对应半径的圆周上的坐标点，修改火箭的位置。</p><p>最后实时更新角度，通过 speed 变量控制速度快慢，乘上 <code>Time.deltaTime</code> 保证角度变化不受帧率影响。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> System.Collections;<br><span class="hljs-keyword">using</span> System.Collections.Generic;<br><span class="hljs-keyword">using</span> UnityEngine;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">CircularMotion</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">float</span> radius = <span class="hljs-number">3f</span>;  <span class="hljs-comment">// 圆的半径</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">float</span> angle = <span class="hljs-number">0f</span>;   <span class="hljs-comment">// 实时变化的角度</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">float</span> speed = <span class="hljs-number">50f</span>;  <span class="hljs-comment">// 角度变化速度</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Update</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-comment">// 角度转弧度</span><br>        <span class="hljs-built_in">float</span> radians = Mathf.Deg2Rad * angle;<br>        <br>        <span class="hljs-comment">// 单位圆的坐标点</span><br>        <span class="hljs-built_in">float</span> a = Mathf.Cos(radians);<br>        <span class="hljs-built_in">float</span> b = Mathf.Sin(radians);<br>        <br>        <span class="hljs-comment">// 根据半径缩放坐标点</span><br>        <span class="hljs-built_in">float</span> x = a * radius;<br>        <span class="hljs-built_in">float</span> y = b * radius;<br><br>        <span class="hljs-comment">// 设置物体位置</span><br>        transform.position = <span class="hljs-keyword">new</span> Vector2(x, y);<br><br>        <span class="hljs-comment">// 更新角度</span><br>        angle += speed * Time.deltaTime;<br>        <br>        <span class="hljs-comment">// 确保角度在合理范围内（0 到 360 度）</span><br>        <span class="hljs-keyword">if</span> (angle &gt;= <span class="hljs-number">360f</span>)<br>        &#123;<br>            angle -= <span class="hljs-number">360f</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (angle &lt;= <span class="hljs-number">0f</span>)<br>        &#123;<br>            angle += <span class="hljs-number">360f</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行效果：</p><p><img src="/../images/unity-circular-motion/%E8%BF%90%E8%A1%8C%E6%95%88%E6%9E%9C.gif"></p><h3 id="计算切线方向"><a href="#计算切线方向" class="headerlink" title="计算切线方向"></a>计算切线方向</h3><p>现在火箭虽然能进行圆周运动了，但是方向看上去不对，火箭的顶端应该朝着轨道的切线方向旋转。</p><p>由上述的数学知识可知，直线 PQ 是点 P 处的切线，把切线平移到原点处，作直线 MN。</p><p>点 M 和 N 都是圆周上的点，它们构成的三角形都是全等的，容易得出它们的坐标分别是 (-b, a) 和 (b, -a)。</p><p><img src="/../images/unity-circular-motion/%E6%95%B0%E5%AD%A6%E7%9F%A5%E8%AF%86%E6%96%B9%E5%90%91.png"></p><p>目前火箭是按逆时针方向移动的，火箭顶端应该朝着点 M(-b, a) 的方向。</p><p>这里使用 <code>Mathf.Atan2</code> 函数，注意它的参数列表是 <code>Atan2(float y, float x)</code>，第一个参数是 y，第二个参数是 x。</p><p>它也给出了注释 <code>Returns the angle in radians whose Tan is y/x.</code></p><p>所以调用时，写成 <code>Mathf.Atan2(a, -b)</code>。</p><p>因为此函数的返回值是弧度，需要转成角度，只需要乘上 <code>Mathf.Rad2Deg</code> 即可。</p><p>转换后的角度是从 X 轴的正方向到射线 OM 的夹角 $β$，取值范围是 -180° 到 180°。</p><p>最后使用 <code>Quaternion.Euler</code> 构造一个欧拉角，赋值给 <code>transform.rotation</code>，修改火箭的 Z 轴旋转。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> System.Collections;<br><span class="hljs-keyword">using</span> System.Collections.Generic;<br><span class="hljs-keyword">using</span> UnityEngine;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">CircularMotion</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">float</span> radius = <span class="hljs-number">3f</span>;  <span class="hljs-comment">// 圆的半径</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">float</span> angle = <span class="hljs-number">0f</span>;   <span class="hljs-comment">// 实时变化的角度</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">float</span> speed = <span class="hljs-number">50f</span>;  <span class="hljs-comment">// 角度变化速度</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Update</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-comment">// 角度转弧度</span><br>        <span class="hljs-built_in">float</span> radians = Mathf.Deg2Rad * angle;<br><br>        <span class="hljs-comment">// 单位圆的坐标点</span><br>        <span class="hljs-built_in">float</span> a = Mathf.Cos(radians);<br>        <span class="hljs-built_in">float</span> b = Mathf.Sin(radians);<br>        <br>        <span class="hljs-comment">// 根据半径缩放坐标点</span><br>        <span class="hljs-built_in">float</span> x = a * radius;<br>        <span class="hljs-built_in">float</span> y = b * radius;<br><br>        <span class="hljs-comment">// 设置物体位置</span><br>        transform.position = <span class="hljs-keyword">new</span> Vector2(x, y);<br><br>        <span class="hljs-comment">// 计算旋转角度</span><br>        <span class="hljs-built_in">float</span> rotationAngle = Mathf.Atan2(a, -b) * Mathf.Rad2Deg;<br><br>        <span class="hljs-comment">// 设置物体的旋转</span><br>        transform.rotation = Quaternion.Euler(<span class="hljs-number">0f</span>, <span class="hljs-number">0f</span>, rotationAngle);<br><br>        <span class="hljs-comment">// 更新角度</span><br>        angle += speed * Time.deltaTime;<br>        <br>        <span class="hljs-comment">// 确保角度在合理范围内（0 到 360 度）</span><br>        <span class="hljs-keyword">if</span> (angle &gt;= <span class="hljs-number">360f</span>)<br>        &#123;<br>            angle -= <span class="hljs-number">360f</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (angle &lt;= <span class="hljs-number">0f</span>)<br>        &#123;<br>            angle += <span class="hljs-number">360f</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行效果：</p><p><img src="/../images/unity-circular-motion/%E8%BF%90%E8%A1%8C%E6%95%88%E6%9E%9C2.gif"></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>数学方法：</p><ul><li>角度转弧度 radians &#x3D; Mathf.Deg2Rad * angle</li><li>弧度转角度 angle &#x3D; Mathf.Rad2Deg * radians</li><li>正弦 Mathf.Sin(radians)</li><li>余弦 Mathf.Cos(radians)</li><li>反正切 Mathf.Atan2(y, x)</li></ul><p>角度和弧度是度量角的两种单位，角度旋转一周是 360°，弧度则是 $2π$，即 $360°&#x3D;2π$。</p><p>1 弧度大约等于 57.3°。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Unity3D</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Unity3D 转换微信小游戏指引 05 广告内购</title>
    <link href="/2024/07/28/unity-wechat-minigame-5/"/>
    <url>/2024/07/28/unity-wechat-minigame-5/</url>
    
    <content type="html"><![CDATA[<p>Unity3D 转换微信小游戏指引系列（第五期 完结）</p><span id="more"></span><h1 id="广告"><a href="#广告" class="headerlink" title="广告"></a>广告</h1><p>在小程序后台页面找到<kbd>推广</kbd>-&gt;<kbd>流量主</kbd></p><p><img src="/../images/unity-wechat-minigame-5/%E6%B5%81%E9%87%8F%E4%B8%BB%E5%85%A5%E5%8F%A3.png"></p><p>开通条件如下：</p><p><img src="/../images/unity-wechat-minigame-5/%E6%B5%81%E9%87%8F%E4%B8%BB%E5%BC%80%E9%80%9A%E6%9D%A1%E4%BB%B6.png"></p><p>开通之后，需要接入广告组件。</p><p>调用创建广告组件的接口时，需要传入参数 <code>adUnitId</code>，这个是开通流量主之后可以获得的。</p><blockquote><p>注意：广告组件是一个单例，仅需创建一次，监听事件也仅需注册一次，否则会有多次回调。</p></blockquote><p>可以创建一个 <code>WXAdManager</code>，提供初始化、显示广告的接口，关闭广告时，判断广告是否完整播放，并调用奖励回调。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">using</span> System;<br><span class="hljs-keyword">using</span> System.Collections;<br><span class="hljs-keyword">using</span> System.Collections.Generic;<br><span class="hljs-keyword">using</span> UnityEngine;<br><span class="hljs-keyword">using</span> WeChatWASM;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">WXAdManager</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-keyword">static</span> WXAdManager instance;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> WXAdManager Instance<br>    &#123;<br>        <span class="hljs-keyword">get</span> &#123; <span class="hljs-keyword">return</span> instance; &#125;<br>    &#125;<br><br>    WXRewardedVideoAd ad;    <span class="hljs-comment">// 广告单例</span><br>    Action rewardCallback;   <span class="hljs-comment">// 奖励回调</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Awake</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-keyword">if</span> (instance != <span class="hljs-literal">null</span>)<br>        &#123;<br>            Destroy(gameObject);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            instance = <span class="hljs-keyword">this</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Init</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        ad = WX.CreateRewardedVideoAd(<span class="hljs-keyword">new</span> WXCreateRewardedVideoAdParam()<br>        &#123;<br>            adUnitId = <span class="hljs-string">&quot;...&quot;</span> <span class="hljs-comment">// 自己申请的广告单元 ID</span><br>        &#125;);<br><br>        ad.OnLoad((res) =&gt;<br>        &#123;<br>            Debug.Log(<span class="hljs-string">$&quot;广告加载 = <span class="hljs-subst">&#123;res.errMsg&#125;</span>&quot;</span>);<br>        &#125;);<br>        ad.OnError((res) =&gt;<br>        &#123;<br>            Debug.Log(<span class="hljs-string">$&quot;广告错误 = <span class="hljs-subst">&#123;res.errMsg&#125;</span>&quot;</span>);<br>        &#125;);<br>        ad.OnClose((res) =&gt;<br>        &#123;<br>            Debug.Log(<span class="hljs-string">$&quot;广告关闭  是否看完 = <span class="hljs-subst">&#123;res.isEnded&#125;</span>&quot;</span>);<br>            OnPlayEnd(res.isEnded);<br>        &#125;);<br>    &#125;<br><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> 显示广告</span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;callback&quot;&gt;</span>看完广告后的回调<span class="hljs-doctag">&lt;/param&gt;</span></span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ShowAd</span>(<span class="hljs-params">Action callback</span>)</span><br><span class="hljs-function"></span>    &#123;<br>        Debug.Log(<span class="hljs-string">&quot;显示广告&quot;</span>);<br>        ad.Show();<br>        rewardCallback = callback;<br>    &#125;<br><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> 广告看完回调</span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;isEnd&quot;&gt;</span>是否看完<span class="hljs-doctag">&lt;/param&gt;</span></span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OnPlayEnd</span>(<span class="hljs-params"><span class="hljs-built_in">bool</span> isEnd</span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-keyword">if</span> (isEnd)<br>        &#123;<br>            Debug.Log(<span class="hljs-string">&quot;完整看完广告&quot;</span>);<br>            rewardCallback?.Invoke();<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            Debug.Log(<span class="hljs-string">&quot;没有看完广告&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用时，先进行初始化，要在微信 SDK 初始化之后调用。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">using</span> System.Collections;<br><span class="hljs-keyword">using</span> System.Collections.Generic;<br><span class="hljs-keyword">using</span> UnityEngine;<br><span class="hljs-keyword">using</span> WeChatWASM;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">WXDemo</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        WX.InitSDK((<span class="hljs-built_in">int</span> code)=&gt;<br>        &#123;<br>            Debug.Log(<span class="hljs-string">&quot;微信 SDK 初始化&quot;</span>);<br>            WXAdManager.Instance.Init();<br>            GameInit();<br>        &#125;);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">GameInit</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        Debug.Log(<span class="hljs-string">&quot;游戏主逻辑初始化&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在具体逻辑的位置，调用显示广告的接口，并传入奖励回调函数。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c#">WXAdManager.Instance.ShowAd(()=&gt;<br>&#123;<br>    <span class="hljs-comment">// 奖励回调</span><br>    Debug.Log(<span class="hljs-string">&quot;广告完整播放，发放奖励&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><h1 id="内购"><a href="#内购" class="headerlink" title="内购"></a>内购</h1><p>在小程序后台页面找到<kbd>功能</kbd>-&gt;<kbd>虚拟支付</kbd></p><p><img src="/../images/unity-wechat-minigame-5/%E8%99%9A%E6%8B%9F%E6%94%AF%E4%BB%98%E5%85%A5%E5%8F%A3.png"></p><p>开通条件如下：</p><p><img src="/../images/unity-wechat-minigame-5/%E8%99%9A%E6%8B%9F%E6%94%AF%E4%BB%98%E5%BC%80%E9%80%9A%E6%9D%A1%E4%BB%B6.png"></p><p>开通之后，可以接入米大师安卓支付，iOS 系统暂时不支持。</p><p>可以创建一个 <code>IAPManager</code>，提供购买的接口，支付成功时，根据产品 ID 发放奖励，也可以调用奖励回调。</p><blockquote><p>这里需要判断运行平台 <code>platform</code> 是安卓，如何获取 <code>platform</code> 参数，可以参考之前的文章《Unity3D 转换微信小游戏指引 03 微信SDK》里面的<kbd>获取系统参数</kbd>部分。</p></blockquote><p>在调用支付接口时，参数 <code>offerId</code> 是开通虚拟支付后可以获得的。</p><p>需要特别注意的是，参数 <code>buyQuantity</code> 是有限制的，具体限制可以参考 <a href="https://developers.weixin.qq.com/minigame/dev/api/midas-payment/wx.requestMidasPayment.html#buyQuantity-%E9%99%90%E5%88%B6%E8%AF%B4%E6%98%8E">buyQuantity 限制说明</a>。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">using</span> System;<br><span class="hljs-keyword">using</span> System.Collections;<br><span class="hljs-keyword">using</span> System.Collections.Generic;<br><span class="hljs-keyword">using</span> UnityEngine;<br><span class="hljs-keyword">using</span> WeChatWASM;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">IAPManager</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-keyword">static</span> IAPManager instance;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> IAPManager Instance<br>    &#123;<br>        <span class="hljs-keyword">get</span> &#123; <span class="hljs-keyword">return</span> instance; &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> platform;          <span class="hljs-comment">// 运行平台</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> buyQuantityMul = <span class="hljs-number">10</span>;  <span class="hljs-comment">// 购买数量的倍数</span><br>    Action rewardCallback;           <span class="hljs-comment">// 奖励回调</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Awake</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-keyword">if</span> (instance != <span class="hljs-literal">null</span>)<br>        &#123;<br>            Destroy(gameObject);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            instance = <span class="hljs-keyword">this</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> 发起支付</span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;productID&quot;&gt;</span>产品 ID<span class="hljs-doctag">&lt;/param&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;callback&quot;&gt;</span>支付成功的回调函数<span class="hljs-doctag">&lt;/param&gt;</span></span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Purchase</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> productID, Action callback</span>)</span><br><span class="hljs-function"></span>    &#123;<br>        rewardCallback = callback;<br><br>        <span class="hljs-comment">// 安卓平台</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;android&quot;</span>.Equals(platform))<br>        &#123;<br>            <span class="hljs-comment">// 价格需要读表，此处只做演示</span><br>            <span class="hljs-built_in">double</span> price = <span class="hljs-number">1</span>;<br><br>            <span class="hljs-comment">// 规则：buyQuantity * 游戏币单价（0.1元） = 限定的价格等级</span><br>            <span class="hljs-comment">// 例如：购买价格为 1 元，需要乘以 10，计算出 buyQuantity = 10</span><br>            <span class="hljs-comment">// 此时 buyQuantity = 10 满足上述规则，即 10 * 0.1 = 1（限定的价格等级）</span><br>            <span class="hljs-built_in">double</span> quantity = price * buyQuantityMul;<br><br>            <span class="hljs-comment">// 米大师支付</span><br>            WX.RequestMidasPayment(<span class="hljs-keyword">new</span> RequestMidasPaymentOption()<br>            &#123;<br>                currencyType = <span class="hljs-string">&quot;CNY&quot;</span>,      <span class="hljs-comment">// 币种</span><br>                mode = <span class="hljs-string">&quot;game&quot;</span>,             <span class="hljs-comment">// 类型</span><br>                offerId = <span class="hljs-string">&quot;...&quot;</span>,           <span class="hljs-comment">// 在米大师侧申请的应用 id</span><br>                buyQuantity = quantity,    <span class="hljs-comment">// 购买数量 mode=game 时必填</span><br>                env = <span class="hljs-number">0</span>,                   <span class="hljs-comment">// 0: 米大师正式环境  1: 米大师沙箱环境</span><br>                success = (res) =&gt;<br>                &#123;<br>                    PurchaseSuccessful(productID);<br>                &#125;,<br>                fail = (res) =&gt;<br>                &#123;<br>                    Debug.Log(<span class="hljs-string">$&quot;购买失败 = <span class="hljs-subst">&#123;res.errMsg&#125;</span>&quot;</span>);<br>                &#125;<br>            &#125;);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            Debug.Log(<span class="hljs-string">&quot;暂不支持内购&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> 购买成功</span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;productID&quot;&gt;</span>产品 ID<span class="hljs-doctag">&lt;/param&gt;</span></span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">PurchaseSuccessful</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> productID</span>)</span><br><span class="hljs-function"></span>    &#123;<br>        Debug.Log(<span class="hljs-string">$&quot;购买 <span class="hljs-subst">&#123;productID&#125;</span> 成功，发放奖励&quot;</span>);<br>        rewardCallback?.Invoke();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在具体逻辑的位置，调用发起支付的接口，并传入支付成功的回调函数。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c#">IAPManager.Instance.Purchase(<span class="hljs-string">&quot;1001&quot;</span>, ()=&gt;<br>&#123;<br>    <span class="hljs-comment">// 奖励回调</span><br>    Debug.Log(<span class="hljs-string">&quot;支付成功，发放奖励&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Unity3D</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Unity3D 转换微信小游戏指引 04 云存档</title>
    <link href="/2024/07/21/unity-wechat-minigame-4/"/>
    <url>/2024/07/21/unity-wechat-minigame-4/</url>
    
    <content type="html"><![CDATA[<p>Unity3D 转换微信小游戏指引系列（第四期）</p><span id="more"></span><h1 id="云存档"><a href="#云存档" class="headerlink" title="云存档"></a>云存档</h1><h2 id="数据库集合"><a href="#数据库集合" class="headerlink" title="数据库集合"></a>数据库集合</h2><p>在云开发页面打开<kbd>数据库</kbd>，在左侧栏创建一个集合，例如 <code>UserData</code>。</p><p><img src="/../images/unity-wechat-minigame-4/%E5%88%9B%E5%BB%BA%E9%9B%86%E5%90%88.png"></p><h2 id="云函数配置"><a href="#云函数配置" class="headerlink" title="云函数配置"></a>云函数配置</h2><h3 id="添加文件夹"><a href="#添加文件夹" class="headerlink" title="添加文件夹"></a>添加文件夹</h3><p>在微信开发者工具打开的项目文件中找到 <code>project.config.json</code>，添加一个字段：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  ...<br>  &quot;cloudfunctionRoot&quot;: &quot;cloudfunctions/&quot;<br>&#125;<br></code></pre></td></tr></table></figure><p>添加位置如图：</p><p><img src="/../images/unity-wechat-minigame-4/%E6%B7%BB%E5%8A%A0%E9%85%8D%E7%BD%AE.png"></p><p>然后在项目中创建一个 <code>cloudfunctions</code> 文件夹。</p><p><img src="/../images/unity-wechat-minigame-4/%E6%B7%BB%E5%8A%A0%E6%96%87%E4%BB%B6%E5%A4%B9.png"></p><h3 id="新建云函数"><a href="#新建云函数" class="headerlink" title="新建云函数"></a>新建云函数</h3><p>右键点击 <code>cloudfunctions</code> 文件夹，选择<kbd>新建 Node.js 云函数</kbd>，设置云函数名称，例如 <code>setUserData</code>、<code>getUserData</code>。</p><p><img src="/../images/unity-wechat-minigame-4/%E6%96%B0%E5%BB%BA%E4%BA%91%E5%87%BD%E6%95%B0.png"></p><p><img src="/../images/unity-wechat-minigame-4/%E4%BA%91%E5%87%BD%E6%95%B0%E5%86%85%E5%AE%B9.png"></p><p>创建云函数后，它的文件夹下会有三个文件：</p><ul><li><code>config.json</code></li><li><code>index.js</code></li><li><code>package.json</code></li></ul><h3 id="云函数代码"><a href="#云函数代码" class="headerlink" title="云函数代码"></a>云函数代码</h3><p>打开 <code>setUserData</code> 的 <code>index.js</code>，修改代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 云函数入口文件</span><br><span class="hljs-keyword">const</span> cloud = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;wx-server-sdk&#x27;</span>)<br><span class="hljs-comment">// 使用当前云环境</span><br>cloud.init(&#123; <span class="hljs-attr">env</span>: cloud.DYNAMIC_CURRENT_ENV &#125;)<br><br><span class="hljs-comment">// 获取数据库</span><br><span class="hljs-keyword">const</span> db = cloud.database();<br><span class="hljs-keyword">const</span> userData = db.collection(<span class="hljs-string">&#x27;UserData&#x27;</span>);<br><br><span class="hljs-comment">// 云函数入口函数</span><br><span class="hljs-built_in">exports</span>.main = <span class="hljs-keyword">async</span> (event, context) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> wxContext = cloud.getWXContext()<br><br>  <span class="hljs-comment">// 查询用户是否已经保存过数据</span><br>  <span class="hljs-keyword">let</span> hasData = <span class="hljs-keyword">await</span> userData.where(&#123;<br>    openid: wxContext.OPENID<br>  &#125;).get();<br><br>  <span class="hljs-comment">// 没有数据，首次保存</span><br>  <span class="hljs-keyword">if</span> (hasData.data.length == <span class="hljs-number">0</span>)&#123;<br>    <span class="hljs-keyword">let</span> addData = &#123;<br>      openid: wxContext.OPENID,<br>      gamedata: event<br>    &#125;<br>    <span class="hljs-keyword">let</span> isAdd = <span class="hljs-keyword">await</span> userData.add(&#123;<br>      data: addData<br>    &#125;)<br>    <span class="hljs-keyword">return</span>&#123;<br>      code: <span class="hljs-number">0</span>,<br>      res: isAdd,<br>      data: addData<br>    &#125;<br>  &#125;<br>  <span class="hljs-comment">// 有数据，更新</span><br>  <span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">await</span> userData.where(&#123;<br>      openid: wxContext.OPENID<br>    &#125;).update(&#123;<br>      data: &#123;<br>        openid: wxContext.OPENID,<br>        gamedata: event<br>      &#125;<br>    &#125;)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>打开 <code>getUserData</code> 的 <code>index.js</code>，修改代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 云函数入口文件</span><br><span class="hljs-keyword">const</span> cloud = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;wx-server-sdk&#x27;</span>)<br><span class="hljs-comment">// 使用当前云环境</span><br>cloud.init(&#123; <span class="hljs-attr">env</span>: cloud.DYNAMIC_CURRENT_ENV &#125;)<br><br><span class="hljs-comment">// 获取数据库</span><br><span class="hljs-keyword">const</span> db = cloud.database();<br><span class="hljs-keyword">const</span> userData = db.collection(<span class="hljs-string">&#x27;UserData&#x27;</span>);<br><br><span class="hljs-comment">// 云函数入口函数</span><br><span class="hljs-built_in">exports</span>.main = <span class="hljs-keyword">async</span> (event, context) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> wxContext = cloud.getWXContext()<br><br>  <span class="hljs-comment">// 查询用户是否已经保存过数据</span><br>  <span class="hljs-keyword">let</span> hasData = <span class="hljs-keyword">await</span> userData.where(&#123;<br>    openid: wxContext.OPENID<br>  &#125;).get();<br><br>  <span class="hljs-comment">// 没有数据，返回 code 0</span><br>  <span class="hljs-keyword">if</span> (hasData.data.length == <span class="hljs-number">0</span>)&#123;<br>    <span class="hljs-keyword">return</span>&#123;<br>      code: <span class="hljs-number">0</span><br>    &#125;<br>  &#125;<br>  <span class="hljs-comment">// 有数据，返回存档</span><br>  <span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">return</span>&#123;<br>      data: hasData.data[<span class="hljs-number">0</span>]<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>注意：云函数代码中有一行 <code>const userData = db.collection(&#39;UserData&#39;);</code></p><p>这里传入的集合名称 UserData 要和最开始创建的集合名称一致。</p></blockquote><h3 id="上传并部署"><a href="#上传并部署" class="headerlink" title="上传并部署"></a>上传并部署</h3><p>保存好 <code>index.js</code> 代码之后，右键点击云函数文件夹，选择<kbd>上传并部署：云端安装依赖</kbd>，之后就可以在云开发的<kbd>云函数</kbd>页面看到上传的云函数了。</p><p><img src="/../images/unity-wechat-minigame-4/%E4%B8%8A%E4%BC%A0%E4%BA%91%E5%87%BD%E6%95%B0.png"></p><p><img src="/../images/unity-wechat-minigame-4/%E5%B7%B2%E9%83%A8%E7%BD%B2.png"></p><h2 id="调用云函数"><a href="#调用云函数" class="headerlink" title="调用云函数"></a>调用云函数</h2><p>有了数据库集合和云函数之后，还需要在 C# 代码里初始化云环境，并通过接口调用云函数。</p><p>在调用云函数之前，必须先 <code>初始化云函数</code>，填入 <code>云开发的环境 ID</code>。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c#">WX.cloud.Init(<span class="hljs-keyword">new</span> CallFunctionInitParam()<br>&#123;<br>    env = <span class="hljs-string">&quot;meet-stars-5gylftdf4ee9f5de&quot;</span>,<br>    traceUser = <span class="hljs-literal">false</span><br>&#125;);<br></code></pre></td></tr></table></figure><p>这里的 <code>云开发的环境 ID</code>，在云开发概览页面，可以找到。</p><p><img src="/../images/unity-wechat-minigame-4/%E4%BA%91%E7%8E%AF%E5%A2%83ID.png"></p><h3 id="上传存档"><a href="#上传存档" class="headerlink" title="上传存档"></a>上传存档</h3><p>在需要上传存档时，可以调用 <code>setUserData</code>，把玩家数据转成 json，传入 data 中。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-built_in">string</span> json = <span class="hljs-string">&quot;&#123; \&quot;player_id\&quot;: 1001 &#125;&quot;</span>;<br>WX.cloud.CallFunction(<span class="hljs-keyword">new</span> CallFunctionParam()<br>&#123;<br>    name = <span class="hljs-string">&quot;setUserData&quot;</span>,<br>    data = json,<br>&#125;);<br></code></pre></td></tr></table></figure><p>调用成功后，可以看到数据库中就生成了一份存档。</p><p><img src="/../images/unity-wechat-minigame-4/%E7%94%9F%E6%88%90%E4%BA%91%E5%AD%98%E6%A1%A3.png"></p><h3 id="下载存档"><a href="#下载存档" class="headerlink" title="下载存档"></a>下载存档</h3><p>在需要下载存档时，可以调用 <code>getUserData</code>，在 success 回调函数中，获得 <code>res.result</code>。</p><blockquote><p>注意：下载存档时，data 参数是没有作用的，但是需要传一个 json，否则会报错。</p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c#">WX.cloud.CallFunction(<span class="hljs-keyword">new</span> CallFunctionParam()<br>&#123;<br>    name = <span class="hljs-string">&quot;getUserData&quot;</span>,<br>    data = <span class="hljs-string">&quot;&#123;\&quot;player_data\&quot;:0&#125;&quot;</span>,  <span class="hljs-comment">// 这里的 data 需要随便传一个 json，否则会报错</span><br>    success = (res) =&gt; <br>    &#123;<br>        Debug.Log(<span class="hljs-string">$&quot;获取云存档成功 <span class="hljs-subst">&#123;res.result&#125;</span>&quot;</span>);<br>    &#125;,<br>    fail = (res) =&gt;<br>    &#123;<br>        Debug.Log(<span class="hljs-string">$&quot;获取云存档失败 <span class="hljs-subst">&#123;res.result&#125;</span>&quot;</span>);<br>    &#125;,<br>&#125;);<br></code></pre></td></tr></table></figure><p>打印出来的 <code>res.result</code> 的结构如下，这个结构其实是在写云函数时定义的，在 data 中包含了 openid 和 gamedata，其他字段是自动生成的。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>    <span class="hljs-attr">&quot;data&quot;</span>: &#123;<br>        <span class="hljs-attr">&quot;_id&quot;</span>: <span class="hljs-string">&quot;3f275c25669c7a3a001f15ce7106ca54&quot;</span>,<br>        <span class="hljs-attr">&quot;openid&quot;</span>: <span class="hljs-string">&quot;...&quot;</span>,<br>        <span class="hljs-attr">&quot;gamedata&quot;</span>: &#123;<br>            <span class="hljs-attr">&quot;player_id&quot;</span>: <span class="hljs-number">1001</span>,<br>            <span class="hljs-attr">&quot;tcbContext&quot;</span>: &#123;&#125;,<br>            <span class="hljs-attr">&quot;userInfo&quot;</span>: &#123;<br>                <span class="hljs-attr">&quot;appId&quot;</span>: <span class="hljs-string">&quot;...&quot;</span>,<br>                <span class="hljs-attr">&quot;openId&quot;</span>: <span class="hljs-string">&quot;...&quot;</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>由于上传存档时，只是上传了一个包含 player_id 的 json，存放在 gamedata 字段中，实际取用时，应该把 gamedata 解析出来。</p><p>可以使用 LitJson 库，调用 <code>JsonMapper.ToObject</code> 方法把 json 字符串转成 <code>JsonData</code> 对象，判断对象的字典中是否存在 data 字段，以此来判断是否拿到了完整的云存档，并从中取出 gamedata 对应的值。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">using</span> LitJson;  <span class="hljs-comment">// 需要引用命名空间</span><br><br>WX.cloud.CallFunction(<span class="hljs-keyword">new</span> CallFunctionParam()<br>&#123;<br>    name = <span class="hljs-string">&quot;getUserData&quot;</span>,<br>    data = <span class="hljs-string">&quot;&#123;\&quot;player_data\&quot;:0&#125;&quot;</span>,<br>    success = (res) =&gt; <br>    &#123;<br>        Debug.Log(<span class="hljs-string">$&quot;获取云存档成功 <span class="hljs-subst">&#123;res.result&#125;</span>&quot;</span>);<br>        <span class="hljs-keyword">var</span> jsonData = JsonMapper.ToObject(res.result);<br>        <span class="hljs-comment">// 云存档有 data，解析 json 并取出 gamedata</span><br>        <span class="hljs-keyword">if</span> (jsonData.ContainsKey(<span class="hljs-string">&quot;data&quot;</span>))<br>        &#123;<br>            <span class="hljs-keyword">var</span> allData = jsonData[<span class="hljs-string">&quot;data&quot;</span>];<br>            <span class="hljs-comment">// 取出 gamedata</span><br>            <span class="hljs-keyword">var</span> gameData = allData[<span class="hljs-string">&quot;gamedata&quot;</span>].ToJson();<br>            Debug.Log(<span class="hljs-string">$&quot;gameData = <span class="hljs-subst">&#123;gameData&#125;</span>&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">// 云存档没有 data，说明数据库没有存档</span><br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            Debug.Log(<span class="hljs-string">&quot;云存档没有 data，说明数据库没有存档&quot;</span>);<br>        &#125;<br>    &#125;,<br>    fail = (res) =&gt;<br>    &#123;<br>        Debug.Log(<span class="hljs-string">$&quot;获取云存档失败 <span class="hljs-subst">&#123;res.result&#125;</span>&quot;</span>);<br>    &#125;,<br>&#125;);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Unity3D</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Unity3D 转换微信小游戏指引 03 微信SDK</title>
    <link href="/2024/07/14/unity-wechat-minigame-3/"/>
    <url>/2024/07/14/unity-wechat-minigame-3/</url>
    
    <content type="html"><![CDATA[<p>Unity3D 转换微信小游戏指引系列（第三期）</p><span id="more"></span><h1 id="微信SDK"><a href="#微信SDK" class="headerlink" title="微信SDK"></a>微信SDK</h1><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>首先，进行 SDK 初始化，需要引用命名空间 <code>using WeChatWASM</code>，调用 <code>WX.InitSDK</code>，在回调函数中进行游戏主逻辑的初始化。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">using</span> System.Collections;<br><span class="hljs-keyword">using</span> System.Collections.Generic;<br><span class="hljs-keyword">using</span> UnityEngine;<br><span class="hljs-keyword">using</span> WeChatWASM;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">WXDemo</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        WX.InitSDK((<span class="hljs-built_in">int</span> code)=&gt;<br>        &#123;<br>            Debug.Log(<span class="hljs-string">&quot;微信 SDK 初始化&quot;</span>);<br>            GameInit();<br>        &#125;);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">GameInit</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        Debug.Log(<span class="hljs-string">&quot;游戏主逻辑初始化&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行之后，会发现控制台打印了黄色警告。</p><p><img src="/../images/unity-wechat-minigame-3/%E5%88%9D%E5%A7%8B%E5%8C%96.png"></p><p>在 Unity 编辑器中调用微信 SDK 接口，有一些是会报错的，需要加上宏定义。</p><p>测试的时候需要打包出来，在微信小游戏环境中运行。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">using</span> System.Collections;<br><span class="hljs-keyword">using</span> System.Collections.Generic;<br><span class="hljs-keyword">using</span> UnityEngine;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> UNITY_WEBGL</span><br><span class="hljs-keyword">using</span> WeChatWASM;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">WXDemo</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br><span class="hljs-comment">// 编辑器环境</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> UNITY_EDITOR</span><br>        GameInit();<br><span class="hljs-meta">#<span class="hljs-meta-keyword">else</span></span><br><br><span class="hljs-comment">// WebGL 环境</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> UNITY_WEBGL</span><br>        WX.InitSDK((<span class="hljs-built_in">int</span> code)=&gt;<br>        &#123;<br>            Debug.Log(<span class="hljs-string">&quot;微信 SDK 初始化&quot;</span>);<br>            GameInit();<br>        &#125;);<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">GameInit</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        Debug.Log(<span class="hljs-string">&quot;游戏主逻辑初始化&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="监听切前台或后台事件"><a href="#监听切前台或后台事件" class="headerlink" title="监听切前台或后台事件"></a>监听切前台或后台事件</h2><p>切前台事件使用 <code>OnShow</code> 监听，切后台事件使用 <code>OnHide</code> 监听，只需要绑定一次监听事件。</p><p>具体返回的参数 result 可以看接口的注释。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-comment">// WebGL 环境</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> UNITY_WEBGL</span><br>        WX.InitSDK((<span class="hljs-built_in">int</span> code)=&gt;<br>        &#123;<br>            Debug.Log(<span class="hljs-string">&quot;微信 SDK 初始化&quot;</span>);<br>            GameInit();<br>        &#125;);<br><br>        WX.OnShow((OnShowListenerResult result)=&gt;<br>        &#123;<br>            Debug.Log(<span class="hljs-string">&quot;微信切前台事件&quot;</span>);<br>        &#125;);<br><br>        WX.OnHide((GeneralCallbackResult result)=&gt;<br>        &#123;<br>            Debug.Log(<span class="hljs-string">&quot;微信切后台事件&quot;</span>);<br>        &#125;);<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br></code></pre></td></tr></table></figure><h2 id="获取系统参数"><a href="#获取系统参数" class="headerlink" title="获取系统参数"></a>获取系统参数</h2><p>获取运行时系统的信息，例如获取系统平台（android 或 ios），有成功、失败、完成三个回调。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-comment">// WebGL 环境</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> UNITY_WEBGL</span><br>        <span class="hljs-comment">// ...</span><br>        WX.GetSystemInfo(<span class="hljs-keyword">new</span> GetSystemInfoOption<br>        &#123;<br>            <span class="hljs-comment">// 成功回调</span><br>            success = (systemInfo)=&gt;<br>            &#123;<br>                Debug.Log(<span class="hljs-string">$&quot;系统平台 <span class="hljs-subst">&#123;systemInfo.platform&#125;</span>&quot;</span>);<br>            &#125;,<br>            <span class="hljs-comment">// 失败回调</span><br>            fail = (generalCallbackResult)=&gt;<br>            &#123;<br>                Debug.Log(<span class="hljs-string">$&quot;获取系统信息失败，错误信息 <span class="hljs-subst">&#123;generalCallbackResult.errMsg&#125;</span>&quot;</span>);<br>            &#125;,<br>            <span class="hljs-comment">// 完成回调（不论成功或失败都会执行）</span><br>            complete = (generalCallbackResult)=&gt;<br>            &#123;<br>                Debug.Log(<span class="hljs-string">$&quot;获取系统信息完成，是否有错误信息 <span class="hljs-subst">&#123;generalCallbackResult.errMsg&#125;</span>&quot;</span>);<br>            &#125;<br>        &#125;);<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br></code></pre></td></tr></table></figure><h2 id="询问用户授权"><a href="#询问用户授权" class="headerlink" title="询问用户授权"></a>询问用户授权</h2><p>询问用户是否授权用户信息，先通过 <code>WX.GetSetting</code> 获取用户的当前设置，判断是否授权过。</p><p>若没有授权，再调用 <code>WX.Authorize</code> 发起授权弹窗询问，填写 scope 的参数（具体填什么参数可以参考 <a href="https://developers.weixin.qq.com/minigame/dev/guide/base-ability/authorize.html#scope-%E5%88%97%E8%A1%A8">scope 列表</a>）。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-comment">// WebGL 环境</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> UNITY_WEBGL</span><br>        <span class="hljs-comment">// ...</span><br>        <span class="hljs-comment">// 获取用户的当前设置</span><br>        WX.GetSetting(<span class="hljs-keyword">new</span> GetSettingOption<br>        &#123;<br>            <span class="hljs-comment">// 成功回调</span><br>            success = (res)=&gt;<br>            &#123;<br>                <span class="hljs-built_in">bool</span> hasUserInfo = res.authSetting.ContainsKey(<span class="hljs-string">&quot;scope.userInfo&quot;</span>);<br>                <span class="hljs-comment">// 接受过授权</span><br>                <span class="hljs-keyword">if</span> (hasUserInfo)<br>                &#123;<br>                    Debug.Log(<span class="hljs-string">&quot;用户已经接受过授权了&quot;</span>);<br>                &#125;<br>                <span class="hljs-comment">// 没有接受过授权</span><br>                <span class="hljs-keyword">else</span><br>                &#123;<br>                    <span class="hljs-comment">// 发起授权询问</span><br>                    WX.Authorize(<span class="hljs-keyword">new</span> AuthorizeOption<br>                    &#123;<br>                        <span class="hljs-comment">// 需要获取的权限</span><br>                        scope = <span class="hljs-string">&quot;scope.userInfo&quot;</span>,<br>                        <span class="hljs-comment">// 成功回调</span><br>                        success = (generalCallbackResult)=&gt;<br>                        &#123;<br>                            Debug.Log(<span class="hljs-string">$&quot;获取授权成功，是否有错误信息 <span class="hljs-subst">&#123;generalCallbackResult.errMsg&#125;</span>&quot;</span>);<br>                        &#125;,<br>                        <span class="hljs-comment">// 失败回调</span><br>                        fail = (generalCallbackResult)=&gt;<br>                        &#123;<br>                            Debug.Log(<span class="hljs-string">$&quot;获取授权失败，错误信息 <span class="hljs-subst">&#123;generalCallbackResult.errMsg&#125;</span>&quot;</span>);<br>                        &#125;,<br>                        <span class="hljs-comment">// 完成回调（不论成功或失败都会执行）</span><br>                        complete = (generalCallbackResult)=&gt;<br>                        &#123;<br>                            Debug.Log(<span class="hljs-string">$&quot;获取授权完成，是否有错误信息 <span class="hljs-subst">&#123;generalCallbackResult.errMsg&#125;</span>&quot;</span>);<br>                        &#125;<br>                    &#125;);<br>                &#125;<br>            &#125;,<br>            <span class="hljs-comment">// 失败回调</span><br>            fail = (generalCallbackResult)=&gt;<br>            &#123;<br>                Debug.Log(<span class="hljs-string">$&quot;获取用户的当前设置失败，错误信息 <span class="hljs-subst">&#123;generalCallbackResult.errMsg&#125;</span>&quot;</span>);<br>            &#125;,<br>            <span class="hljs-comment">// 完成回调（不论成功或失败都会执行）</span><br>            complete = (generalCallbackResult)=&gt;<br>            &#123;<br>                Debug.Log(<span class="hljs-string">$&quot;获取用户的当前设置完成，是否有错误信息 <span class="hljs-subst">&#123;generalCallbackResult.errMsg&#125;</span>&quot;</span>);<br>            &#125;<br>        &#125;);<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br></code></pre></td></tr></table></figure><blockquote><p>注：这里需要注意，如果代码里有调用授权接口，就需要到<a href="https://mp.weixin.qq.com/">小程序</a>官网，找到<kbd>设置</kbd>-&gt;<kbd>基本设置</kbd>-&gt;<kbd>服务内容声明</kbd>，填写<kbd>用户隐私保护指引</kbd>。</p><p>如果在指定期限内没有填写，小游戏的部分功能会被限制使用。</p></blockquote><h2 id="提示框"><a href="#提示框" class="headerlink" title="提示框"></a>提示框</h2><p><code>WX.ShowModal</code> 可以弹出一个模态对话框，附带一个确定和一个取消按钮。</p><p><code>WX.ShowToast</code> 可以弹出一个消息提示框，没有按钮。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-comment">// WebGL 环境</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> UNITY_WEBGL</span><br>        WX.ShowModal(<span class="hljs-keyword">new</span> ShowModalOption<br>        &#123;<br>            title = <span class="hljs-string">&quot;标题&quot;</span>,<br>            content = <span class="hljs-string">&quot;模态对话框&quot;</span>,<br>            success = (res)=&gt;<br>            &#123;<br>                <span class="hljs-keyword">if</span> (res.confirm)<br>                &#123;<br>                    Debug.Log(<span class="hljs-string">&quot;点击了确定按钮&quot;</span>);<br>                    WX.ShowToast(<span class="hljs-keyword">new</span> ShowToastOption<br>                    &#123;<br>                        title = <span class="hljs-string">&quot;消息提示框&quot;</span><br>                    &#125;);<br>                &#125;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (res.cancel)<br>                &#123;<br>                    Debug.Log(<span class="hljs-string">&quot;点击了取消按钮&quot;</span>);<br>                &#125;<br>            &#125;<br>        &#125;);<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br></code></pre></td></tr></table></figure><p>模态对话框</p><p><img src="/../images/unity-wechat-minigame-3/%E6%A8%A1%E6%80%81%E5%AF%B9%E8%AF%9D%E6%A1%86.png"></p><p>消息提示框</p><p><img src="/../images/unity-wechat-minigame-3/%E6%B6%88%E6%81%AF%E6%8F%90%E7%A4%BA%E6%A1%86.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Unity3D</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Unity3D 转换微信小游戏指引 02 云开发</title>
    <link href="/2024/07/07/unity-wechat-minigame-2/"/>
    <url>/2024/07/07/unity-wechat-minigame-2/</url>
    
    <content type="html"><![CDATA[<p>Unity3D 转换微信小游戏指引系列（第二期）</p><span id="more"></span><h1 id="云开发"><a href="#云开发" class="headerlink" title="云开发"></a>云开发</h1><p>当小游戏打包后的首包占用内存比较大（大约是 14M 左右），<kbd>首包资源加载方式</kbd>就不能选择<kbd>小游戏包内</kbd>了。</p><p>这时就需要购买服务器，把首包放到服务器上，在小游戏转换窗口填写<kbd>游戏资源CDN</kbd>。</p><p>微信提供了配套的云开发，可以比较方便地购买和使用。</p><h2 id="购买云开发"><a href="#购买云开发" class="headerlink" title="购买云开发"></a>购买云开发</h2><p>在微信开发者工具左上角，找到<kbd>云开发</kbd>按钮，点击打开云开发控制台。</p><p><img src="/../images/unity-wechat-minigame-2/%E4%BA%91%E5%BC%80%E5%8F%91%E6%8C%89%E9%92%AE.png"></p><p>如果是初次开通，可以免费体验一个月。</p><p>填写环境名称，选择支付方式，点击<kbd>免费体验 1 个月</kbd>即可。</p><p><img src="/../images/unity-wechat-minigame-2/%E5%BC%80%E9%80%9A%E4%BA%91%E5%BC%80%E5%8F%91.jpg"></p><p>如果没有免费体验，则是每个月 19.9 元。</p><p><img src="/../images/unity-wechat-minigame-2/%E5%88%9B%E5%BB%BA%E4%BA%91%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83.png"></p><p>创建好云开发环境后，就可以看到云开发控制台了。</p><p><img src="/../images/unity-wechat-minigame-2/%E4%BA%91%E5%BC%80%E5%8F%91%E6%8E%A7%E5%88%B6%E5%8F%B0.png"></p><h2 id="查看云开发域名"><a href="#查看云开发域名" class="headerlink" title="查看云开发域名"></a>查看云开发域名</h2><p>如果要查看云开发的域名地址，可以先在<kbd>存储</kbd>页面上传一个文件。</p><p><img src="/../images/unity-wechat-minigame-2/%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6.png"></p><p>上传后如果页面没有内容，可以点击<kbd>刷新</kbd>按钮。</p><p>看到已经上传的文件后，右键点击这个文件，选择<kbd>查看详情</kbd>。</p><p><img src="/../images/unity-wechat-minigame-2/%E6%9F%A5%E7%9C%8B%E8%AF%A6%E6%83%85.png"></p><p>在这个文件的详情页中，可以找到下载地址。</p><p><img src="/../images/unity-wechat-minigame-2/%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80.png"></p><p>其中，从 https 开头，一直到 .la 结尾，这个地址就是云开发的域名地址了。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">https</span>://<span class="hljs-number">6</span>d<span class="hljs-number">65</span>-meet-stars-<span class="hljs-number">5</span>gylftdf<span class="hljs-number">4</span>ee<span class="hljs-number">9</span>f<span class="hljs-number">5</span>de-<span class="hljs-number">1318778612</span>.tcb.qcloud.la<br></code></pre></td></tr></table></figure><h2 id="设置服务器域名"><a href="#设置服务器域名" class="headerlink" title="设置服务器域名"></a>设置服务器域名</h2><p>在<a href="https://mp.weixin.qq.com/">小程序</a>后台页面，找到<kbd>开发管理</kbd>-&gt;<kbd>开发设置</kbd>-&gt;<kbd>服务器域名</kbd>，把云开发的域名地址填写到以下几个位置：</p><ul><li><code>request</code> 合法域名</li><li><code>uploadFile</code> 合法域名</li><li><code>downloadFile</code> 合法域名</li></ul><p><img src="/../images/unity-wechat-minigame-2/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%9F%9F%E5%90%8D.png"></p><p>如果没有填写的话，小游戏可能会无法下载到资源，但是打开调试模式又可以下载到资源，<kbd>调试模式</kbd>的区别就是<kbd>不校验域名</kbd>。</p><blockquote><p>注意：后续如果有在客户端发起任何网络请求，需要访问外部域名的，都需要在这里添加合法域名的白名单。</p><p>否则，网络请求无效。</p></blockquote><h2 id="填写游戏资源-CDN"><a href="#填写游戏资源-CDN" class="headerlink" title="填写游戏资源 CDN"></a>填写游戏资源 CDN</h2><p>可以在云开发创建文件夹，区分小游戏版本。</p><p><img src="/../images/unity-wechat-minigame-2/%E5%88%9B%E5%BB%BA%E6%96%87%E4%BB%B6%E5%A4%B9.png"></p><p><img src="/../images/unity-wechat-minigame-2/%E6%96%87%E4%BB%B6%E5%A4%B9%E7%89%88%E6%9C%AC.png"></p><p>然后在 Unity 的小游戏转换窗口，填写游戏资源 CDN，把<kbd>首包资源加载方式</kbd>改成<kbd>CDN</kbd>。</p><p><img src="/../images/unity-wechat-minigame-2/%E5%A1%AB%E5%86%99%E6%B8%B8%E6%88%8F%E8%B5%84%E6%BA%90CDN.png"></p><h2 id="上传首包资源"><a href="#上传首包资源" class="headerlink" title="上传首包资源"></a>上传首包资源</h2><p>改成 CDN 之后，打包小游戏，就需要在云开发控制台上传首包资源。</p><p>在 webgl 文件夹，找到后缀名是 .bin.txt 的文件，上传到 <code>1.0.0</code> 文件夹中。</p><p><img src="/../images/unity-wechat-minigame-2/%E4%B8%8A%E4%BC%A0%E9%A6%96%E5%8C%85%E8%B5%84%E6%BA%90.png"></p><p>每次更新版本时，都可以创建一个文件夹，例如 <code>1.0.1</code>，把新版本的首包资源上传到对应的文件夹中。</p><h1 id="上传项目"><a href="#上传项目" class="headerlink" title="上传项目"></a>上传项目</h1><h2 id="开发版本"><a href="#开发版本" class="headerlink" title="开发版本"></a>开发版本</h2><p>在微信开发者工具上方的按钮中找到上传按钮，填写<kbd>版本号</kbd>和<kbd>项目备注</kbd>，就可以把项目上传到小游戏账号上了。</p><p><img src="/../images/unity-wechat-minigame-2/%E4%B8%8A%E4%BC%A0%E9%A1%B9%E7%9B%AE.png"></p><p>在<a href="https://mp.weixin.qq.com/">小程序</a>后台页面，找到<kbd>管理</kbd>-&gt;<kbd>版本管理</kbd>-&gt;<kbd>开发版本</kbd>可以看到已经上传的版本。</p><p><img src="/../images/unity-wechat-minigame-2/%E5%BC%80%E5%8F%91%E7%89%88%E6%9C%AC.png"></p><h2 id="体验版本"><a href="#体验版本" class="headerlink" title="体验版本"></a>体验版本</h2><p>点击开发版本右侧的下拉按钮，可以看到<kbd>选为体验版本</kbd>的选项。</p><p>开发版本只有自己和开发成员可以预览，而体验版本可以给体验成员预览。</p><p><img src="/../images/unity-wechat-minigame-2/%E9%80%89%E4%B8%BA%E4%BD%93%E9%AA%8C%E7%89%88%E6%9C%AC.png"></p><p>体验版设置可以暂时忽略，直接提交。</p><p><img src="/../images/unity-wechat-minigame-2/%E4%BD%93%E9%AA%8C%E7%89%88%E8%AE%BE%E7%BD%AE.png"></p><p>提交后，可以在体验版按钮查看二维码。</p><p><img src="/../images/unity-wechat-minigame-2/%E4%BD%93%E9%AA%8C%E7%89%88%E4%BA%8C%E7%BB%B4%E7%A0%81.png"></p><p>扫码之后打开体验版页面，点击<kbd>前往体验版</kbd>会打开小游戏。</p><p><img src="/../images/unity-wechat-minigame-2/%E4%BD%93%E9%AA%8C%E7%89%88%E9%A1%B5%E9%9D%A2.png"></p><h2 id="添加体验成员"><a href="#添加体验成员" class="headerlink" title="添加体验成员"></a>添加体验成员</h2><p>在<kbd>管理</kbd>-&gt;<kbd>成员管理</kbd>-&gt;<kbd>体验成员</kbd>，可以输入微信号，添加一些体验成员，上限为 15 人。</p><p><img src="/../images/unity-wechat-minigame-2/%E4%BD%93%E9%AA%8C%E6%88%90%E5%91%98.png"></p><p><img src="/../images/unity-wechat-minigame-2/%E6%B7%BB%E5%8A%A0%E4%BD%93%E9%AA%8C%E6%88%90%E5%91%98.png"></p><p>体验成员添加后是不会有通知的，需要自行通知。</p><p><img src="/../images/unity-wechat-minigame-2/%E6%88%90%E5%91%98%E7%A1%AE%E8%AE%A4.png"></p><p>添加成功。</p><p><img src="/../images/unity-wechat-minigame-2/%E6%B7%BB%E5%8A%A0%E4%BD%93%E9%AA%8C%E6%88%90%E5%91%98%E6%88%90%E5%8A%9F.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Unity3D</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Unity3D 转换微信小游戏指引 01 环境流程</title>
    <link href="/2024/06/30/unity-wechat-minigame-1/"/>
    <url>/2024/06/30/unity-wechat-minigame-1/</url>
    
    <content type="html"><![CDATA[<p>Unity3D 转换微信小游戏指引系列（第一期）</p><span id="more"></span><h1 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h1><h2 id="安装-WebGL-模块"><a href="#安装-WebGL-模块" class="headerlink" title="安装 WebGL 模块"></a>安装 WebGL 模块</h2><p>首先，Unity 要安装<kbd>WebGL Build Support</kbd>模块。</p><p>在 Hub 找到安装的引擎，点击设置按钮，点击<kbd>Add modules</kbd>添加模块。</p><p><img src="/../images/unity-wechat-minigame-1/%E6%B7%BB%E5%8A%A0%E6%A8%A1%E5%9D%97.png"></p><p>勾选<kbd>WebGL Build Support</kbd>，点击<kbd>Install</kbd>按钮进行下载安装，这里显示已经安装好了。</p><p><img src="/../images/unity-wechat-minigame-1/%E5%AE%89%E8%A3%85WebGL%E6%A8%A1%E5%9D%97.png"></p><h2 id="安装微信小游戏转换插件"><a href="#安装微信小游戏转换插件" class="headerlink" title="安装微信小游戏转换插件"></a>安装微信小游戏转换插件</h2><p>打开<a href="https://gitee.com/wechat-minigame/minigame-unity-webgl-transform">官方文档</a>，在<kbd>安装与使用</kbd>一栏，下载 Unity 转换小游戏插件，导入到项目中。</p><p><img src="/../images/unity-wechat-minigame-1/%E4%B8%8B%E8%BD%BD%E6%8F%92%E4%BB%B6.png"></p><p><img src="/../images/unity-wechat-minigame-1/%E5%AF%BC%E5%85%A5%E6%8F%92%E4%BB%B6.png"></p><p><img src="/../images/unity-wechat-minigame-1/%E6%89%93%E5%BC%80%E6%8F%92%E4%BB%B6.png"></p><p><img src="/../images/unity-wechat-minigame-1/%E5%AF%BC%E5%85%A5%E8%B5%84%E6%BA%90.png"></p><p>Unity 菜单栏会出现<kbd>微信小游戏</kbd>，点击<kbd>转换小游戏</kbd>可以打开转换窗口。</p><p><img src="/../images/unity-wechat-minigame-1/%E8%8F%9C%E5%8D%95%E6%A0%8F%E6%8C%89%E9%92%AE.png"></p><p><img src="/../images/unity-wechat-minigame-1/%E8%BD%AC%E6%8D%A2%E7%AA%97%E5%8F%A3.png"></p><h2 id="安装微信开发者工具"><a href="#安装微信开发者工具" class="headerlink" title="安装微信开发者工具"></a>安装微信开发者工具</h2><p>下载 <a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html">微信开发者工具</a>，稳定版 <a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/stable.html">Stable Build</a> (1.06.2405020) <a href="https://dldir1.qq.com/WechatWebDev/release/be1ec64cf6184b0fa64091919793f068/wechat_devtools_1.06.2405020_win32_x64.exe">Windows 64</a> 即可。</p><p><img src="/../images/unity-wechat-minigame-1/%E4%B8%8B%E8%BD%BD%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91%E8%80%85%E5%B7%A5%E5%85%B7.png"></p><h1 id="注册小程序"><a href="#注册小程序" class="headerlink" title="注册小程序"></a>注册小程序</h1><p>在转换窗口可以看到，需要填很多信息。</p><p>其中<kbd>游戏 AppID</kbd>需要在<a href="https://mp.weixin.qq.com/">小程序</a>官网申请注册一个账号。</p><p>注册成功后，在<kbd>首页</kbd>-&gt;<kbd>小程序发布流程</kbd>-&gt;<kbd>小程序类目</kbd>，添加<kbd>服务类目</kbd>，例如休闲游戏。</p><blockquote><p>注意：如果没有填写服务类目，打包出来的项目很可能没有小游戏模式，也就没有 <code>game.js</code> 文件。</p></blockquote><p><img src="/../images/unity-wechat-minigame-1/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%B1%BB%E7%9B%AE.png"></p><p><img src="/../images/unity-wechat-minigame-1/%E5%B0%8F%E6%B8%B8%E6%88%8F%E7%B1%BB%E7%9B%AE.png"></p><p>在<kbd>开发管理</kbd>-&gt;<kbd>开发设置</kbd>-&gt;<kbd>开发者 ID</kbd>可以找到 <code>AppID</code>。</p><p><img src="/../images/unity-wechat-minigame-1/%E5%BC%80%E5%8F%91%E7%AE%A1%E7%90%86.png"></p><p><img src="/../images/unity-wechat-minigame-1/%E5%B0%8F%E7%A8%8B%E5%BA%8FID.png"></p><p><img src="/../images/unity-wechat-minigame-1/%E5%A1%AB%E5%86%99AppID.png"></p><h1 id="转换小游戏"><a href="#转换小游戏" class="headerlink" title="转换小游戏"></a>转换小游戏</h1><p>把打包平台切换为 <code>WebGL</code>。</p><p><img src="/../images/unity-wechat-minigame-1/%E5%88%87%E6%8D%A2%E6%89%93%E5%8C%85%E5%B9%B3%E5%8F%B0.png"></p><p>打开转换窗口，填写<kbd>小游戏项目名</kbd>，<kbd>导出路径</kbd>，<kbd>首包资源加载方式</kbd>改为<kbd>小游戏包内</kbd>。</p><p>点击<kbd>生成并转换</kbd>，打包小游戏。</p><p><img src="/../images/unity-wechat-minigame-1/%E8%BD%AC%E6%8D%A2%E5%B0%8F%E6%B8%B8%E6%88%8F.png"></p><p>打包完成后，会有两个文件夹，其中 <code>minigame</code> 是需要使用<kbd>微信开发者工具</kbd>打开的工程文件，<code>webgl</code> 是 Unity 打包 webgl 平台生成的文件。</p><p><img src="/../images/unity-wechat-minigame-1/%E4%B8%A4%E4%B8%AA%E6%96%87%E4%BB%B6%E5%A4%B9.png"></p><h1 id="导入项目"><a href="#导入项目" class="headerlink" title="导入项目"></a>导入项目</h1><p>打开微信开发者工具，微信扫码登录，选择<kbd>小游戏</kbd>，点击<kbd>导入</kbd>按钮。</p><p><img src="/../images/unity-wechat-minigame-1/%E5%AF%BC%E5%85%A5%E9%A1%B9%E7%9B%AE.png"></p><p><img src="/../images/unity-wechat-minigame-1/%E9%80%89%E6%8B%A9%E6%96%87%E4%BB%B6%E5%A4%B9.png"></p><p>导入之后会自动识别在 Unity 转换窗口中填写的 <code>AppID</code>。</p><p>这里暂时还不需要购买微信云开发，可以先勾选<kbd>不使用云服务</kbd>，点击<kbd>确定</kbd>按钮导入项目。</p><p><img src="/../images/unity-wechat-minigame-1/%E7%A1%AE%E5%AE%9A%E5%AF%BC%E5%85%A5.png"></p><p>打开项目，等待编译，就可以看到 Unity 的场景了。</p><blockquote><p>注意：如果是第一次使用转换插件，调试器会有报错提示<kbd>插件未授权使用</kbd>，并提供了一个超链接<kbd>添加插件</kbd>，点击超链接开通<kbd>Unity适配插件</kbd>即可。</p></blockquote><p><img src="/../images/unity-wechat-minigame-1/%E8%BF%90%E8%A1%8C%E9%A1%B9%E7%9B%AE.png"></p><h1 id="预览"><a href="#预览" class="headerlink" title="预览"></a>预览</h1><p>点击上方的<kbd>预览</kbd>按钮，等待编译，完成后会生成一个临时的二维码，微信扫码即可预览。</p><p><img src="/../images/unity-wechat-minigame-1/%E9%A2%84%E8%A7%88.png"></p><p><img src="/../images/unity-wechat-minigame-1/%E4%BA%8C%E7%BB%B4%E7%A0%81%E9%A2%84%E8%A7%88.png"></p><p><img src="/../images/unity-wechat-minigame-1/%E6%89%8B%E6%9C%BA%E9%A2%84%E8%A7%88.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Unity3D</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Lua 绕过元表</title>
    <link href="/2024/06/23/lua-rawset-rawget/"/>
    <url>/2024/06/23/lua-rawset-rawget/</url>
    
    <content type="html"><![CDATA[<p>Lua 绕过元表，直接访问 table 的字段。</p><span id="more"></span><h1 id="绕过元表"><a href="#绕过元表" class="headerlink" title="绕过元表"></a>绕过元表</h1><p><code>rawset(table, index, value)</code>，在不触发元方法的情况下，设置 <code>table[index]</code> 的值为 value。</p><p><code>rawget(table, index)</code>，在不触发元方法的情况下，获取 <code>table[index]</code> 的值。</p><p>现有一个 hero 表，设置了元表和元方法。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> hero = &#123;<br>    level = <span class="hljs-number">1</span>,<br>    <span class="hljs-built_in">exp</span> = <span class="hljs-number">0</span><br>&#125;<br><br><span class="hljs-keyword">local</span> mt = &#123;<br>    <span class="hljs-built_in">__index</span> = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(table, key)</span></span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;trigger __index&quot;</span>)<br>    <span class="hljs-keyword">end</span>,<br>    <span class="hljs-built_in">__newindex</span> = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(table, key, value)</span></span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;trigger __newindex&quot;</span>)<br>    <span class="hljs-keyword">end</span><br>&#125;<br><span class="hljs-built_in">setmetatable</span>(hero, mt)<br></code></pre></td></tr></table></figure><p>如果去访问一个不存在的 key，则会进入元表的元方法。</p><p>因为 <code>__newindex</code> 被赋值为一个函数，只有打印，没有把值存到 table 里，所以 hero 里还是没有 star 字段。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs lua">hero.star = <span class="hljs-number">5</span><br><span class="hljs-built_in">print</span>(hero.star)<br><br><span class="hljs-comment">-- trigger __newindex</span><br><span class="hljs-comment">-- trigger __index</span><br><span class="hljs-comment">-- nil</span><br></code></pre></td></tr></table></figure><p>现在使用 rawset 为 hero 添加一个新字段 star，再使用 rawget 从 hero 中获取 star 字段。</p><p>可以发现，没有触发元方法的打印，hero 表中也添加了 star 字段。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-built_in">rawset</span>(hero, <span class="hljs-string">&quot;star&quot;</span>, <span class="hljs-number">5</span>)<br><span class="hljs-keyword">local</span> star = <span class="hljs-built_in">rawget</span>(hero, <span class="hljs-string">&quot;star&quot;</span>)<br><span class="hljs-built_in">print</span>(star)<br><br><span class="hljs-comment">-- 5</span><br></code></pre></td></tr></table></figure><h1 id="防止死循环"><a href="#防止死循环" class="headerlink" title="防止死循环"></a>防止死循环</h1><p>修改一下元方法，在 <code>__index</code> 中返回 <code>table[key]</code> 的值，在 <code>__newindex</code> 中设置 <code>table[key]</code> 为 value。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> hero = &#123;<br>    level = <span class="hljs-number">1</span>,<br>    <span class="hljs-built_in">exp</span> = <span class="hljs-number">0</span><br>&#125;<br><br><span class="hljs-keyword">local</span> mt = &#123;<br>    <span class="hljs-built_in">__index</span> = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(table, key)</span></span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;trigger __index&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">table</span>[key]<br>    <span class="hljs-keyword">end</span>,<br>    <span class="hljs-built_in">__newindex</span> = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(table, key, value)</span></span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;trigger __newindex&quot;</span>)<br>        <span class="hljs-built_in">table</span>[key] = value<br>    <span class="hljs-keyword">end</span><br>&#125;<br><span class="hljs-built_in">setmetatable</span>(hero, mt)<br></code></pre></td></tr></table></figure><p>看上去似乎没有什么问题，但是如果触发了这两个元方法，它们内部的逻辑（也就是 <code>table[key]</code>）又会触发元方法，进入死循环，最后栈溢出。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs lua">hero.star = <span class="hljs-number">5</span><br><br><span class="hljs-comment">-- trigger __newindex</span><br><span class="hljs-comment">-- trigger __newindex</span><br><span class="hljs-comment">-- trigger __newindex</span><br><span class="hljs-comment">-- ...</span><br><span class="hljs-comment">-- C stack overflow</span><br><br><span class="hljs-built_in">print</span>(hero.star)<br><br><span class="hljs-comment">-- trigger __index</span><br><span class="hljs-comment">-- trigger __index</span><br><span class="hljs-comment">-- trigger __index</span><br><span class="hljs-comment">-- ...</span><br><span class="hljs-comment">-- C stack overflow</span><br></code></pre></td></tr></table></figure><p>要防止这种死循环，可以利用 rawset 和 rawget，避免再次触发元方法。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> hero = &#123;<br>    level = <span class="hljs-number">1</span>,<br>    <span class="hljs-built_in">exp</span> = <span class="hljs-number">0</span><br>&#125;<br><br><span class="hljs-keyword">local</span> mt = &#123;<br>    <span class="hljs-built_in">__index</span> = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(table, key)</span></span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;trigger __index&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">rawget</span>(<span class="hljs-built_in">table</span>, key)<br>    <span class="hljs-keyword">end</span>,<br>    <span class="hljs-built_in">__newindex</span> = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(table, key, value)</span></span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;trigger __newindex&quot;</span>)<br>        <span class="hljs-built_in">rawset</span>(<span class="hljs-built_in">table</span>, key, value)<br>    <span class="hljs-keyword">end</span><br>&#125;<br><span class="hljs-built_in">setmetatable</span>(hero, mt)<br></code></pre></td></tr></table></figure><p>再次访问 star 字段，就不会栈溢出了。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs lua">hero.star = <span class="hljs-number">5</span><br><span class="hljs-comment">-- trigger __newindex</span><br><br><span class="hljs-built_in">print</span>(hero.star)<br><span class="hljs-comment">-- 5</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Lua</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Lua 只读表</title>
    <link href="/2024/06/16/lua-table-readonly/"/>
    <url>/2024/06/16/lua-table-readonly/</url>
    
    <content type="html"><![CDATA[<p>Lua 的 table 建立只读机制，保护 table 不能被随意修改。</p><span id="more"></span><h1 id="建立只读机制"><a href="#建立只读机制" class="headerlink" title="建立只读机制"></a>建立只读机制</h1><p>Lua 的 table 通常情况下是可以随意修改字段的值，或者新增字段。</p><p>如果想要建立只读机制，保护表只能读取，而不能被随意修改，可以利用元表。</p><h1 id="禁止新增字段"><a href="#禁止新增字段" class="headerlink" title="禁止新增字段"></a>禁止新增字段</h1><p>首先，利用 <code>__newindex</code>，可以禁止新增字段。</p><p>例如，现在有一个 student 表，包含 name 和 age。</p><p>定义一个 mt 表，<code>__newindex</code> 打印只读提示。</p><p>给 student 表设置元表 mt。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> student = &#123;<br>    name = <span class="hljs-string">&quot;Alice&quot;</span>,<br>    age = <span class="hljs-number">18</span><br>&#125;<br><br><span class="hljs-keyword">local</span> mt = &#123;<br>    <span class="hljs-built_in">__newindex</span> = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span></span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Can not modify a readonly table&quot;</span>)<br>    <span class="hljs-keyword">end</span><br>&#125;<br><br><span class="hljs-built_in">setmetatable</span>(student, mt)<br></code></pre></td></tr></table></figure><p>现在可以读取字段，但是不能新增字段了。</p><p>例如给 student 增加一个 score 字段，但是会打印只读提示，没有赋值，尝试打印 score 字段会输出 nil。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> name = student.name<br><span class="hljs-built_in">print</span>(name)  <span class="hljs-comment">-- Alice</span><br><br>student.score = <span class="hljs-number">0</span>     <span class="hljs-comment">-- Can not modify a readonly table</span><br><span class="hljs-built_in">print</span>(student.score)  <span class="hljs-comment">-- nil</span><br></code></pre></td></tr></table></figure><h1 id="禁止修改字段"><a href="#禁止修改字段" class="headerlink" title="禁止修改字段"></a>禁止修改字段</h1><p>经过上述步骤后，虽然不能新增字段，但还是可以对已有的字段进行修改。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lua">student.age = <span class="hljs-number">20</span><br><span class="hljs-built_in">print</span>(student.age)  <span class="hljs-comment">-- 20</span><br></code></pre></td></tr></table></figure><p>Lua 没有提供修改字段的元方法，不过我们可以利用空表，把修改字段的行为，转化成新增字段的行为。</p><p>因为对于空表来说，访问任何字段都是不存在的，都会是新增字段的行为。</p><p>修改一下之前的代码，定义一个 empty 表，给 empty 设置元表 mt，元表里定义 <code>__index</code>，赋值为 student。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> student = &#123;<br>    name = <span class="hljs-string">&quot;Alice&quot;</span>,<br>    age = <span class="hljs-number">18</span><br>&#125;<br><br><span class="hljs-keyword">local</span> empty = &#123;&#125;<br><span class="hljs-keyword">local</span> mt = &#123;<br>    <span class="hljs-built_in">__index</span> = student,<br>    <span class="hljs-built_in">__newindex</span> = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span></span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Can not modify a readonly table&quot;</span>)<br>    <span class="hljs-keyword">end</span><br>&#125;<br><span class="hljs-built_in">setmetatable</span>(empty, mt)<br></code></pre></td></tr></table></figure><p>此时，访问 empty 表，是不能修改字段值的。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lua">empty.age = <span class="hljs-number">20</span>    <span class="hljs-comment">-- Can not modify a readonly table</span><br><span class="hljs-built_in">print</span>(empty.age)  <span class="hljs-comment">-- 18</span><br></code></pre></td></tr></table></figure><p>不过，此处仍然可以直接去修改 student 表，所以需要对这套方法做一个封装。</p><h1 id="封装只读函数"><a href="#封装只读函数" class="headerlink" title="封装只读函数"></a>封装只读函数</h1><p>定义一个全局函数 Readonly，把上述的步骤放到函数中，接收一个 table，返回经过处理的空表。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs lua">Readonly = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(table)</span></span><br>    <span class="hljs-keyword">local</span> empty = &#123;&#125;<br>    <span class="hljs-keyword">local</span> mt = &#123;<br>        <span class="hljs-built_in">__index</span> = <span class="hljs-built_in">table</span>,<br>        <span class="hljs-built_in">__newindex</span> = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span></span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Can not modify a readonly table&quot;</span>)<br>        <span class="hljs-keyword">end</span><br>    &#125;<br>    <span class="hljs-built_in">setmetatable</span>(empty, mt)<br>    <span class="hljs-keyword">return</span> empty<br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">local</span> student = &#123;<br>    name = <span class="hljs-string">&quot;Alice&quot;</span>,<br>    age = <span class="hljs-number">18</span><br>&#125;<br>student = Readonly(student)<br></code></pre></td></tr></table></figure><p>再尝试一下修改 student，已经不能修改字段的值了。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lua">student.age = <span class="hljs-number">20</span>    <span class="hljs-comment">-- Can not modify a readonly table</span><br><span class="hljs-built_in">print</span>(student.age)  <span class="hljs-comment">-- 18</span><br></code></pre></td></tr></table></figure><h1 id="嵌套表"><a href="#嵌套表" class="headerlink" title="嵌套表"></a>嵌套表</h1><p>上面的只读函数只能处理一层表，如果表里面还嵌套了表，那么嵌套的表还是非只读的。</p><p>此时可以递归检查表里是否有嵌套表。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs lua">Readonly = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(table)</span></span><br>    <span class="hljs-comment">-- 遍历每个字段</span><br>    <span class="hljs-keyword">for</span> key, value <span class="hljs-keyword">in</span> <span class="hljs-built_in">pairs</span>(<span class="hljs-built_in">table</span>) <span class="hljs-keyword">do</span><br>        <span class="hljs-comment">-- 有嵌套表</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span>(value) == <span class="hljs-string">&quot;table&quot;</span> <span class="hljs-keyword">then</span><br>            <span class="hljs-comment">-- 递归设置只读</span><br>            <span class="hljs-built_in">table</span>[key] = Readonly(value)<br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-comment">-- 设置只读的步骤</span><br>    <span class="hljs-keyword">local</span> empty = &#123;&#125;<br>    <span class="hljs-keyword">local</span> mt = &#123;<br>        <span class="hljs-built_in">__index</span> = <span class="hljs-built_in">table</span>,<br>        <span class="hljs-built_in">__newindex</span> = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span></span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Can not modify a readonly table&quot;</span>)<br>        <span class="hljs-keyword">end</span><br>    &#125;<br>    <span class="hljs-built_in">setmetatable</span>(empty, mt)<br>    <span class="hljs-keyword">return</span> empty<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>在 student 表里新增一个 score 表，包含 math 和 english 字段。</p><p>经过只读函数递归处理之后，score 表也是只读的。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> student = &#123;<br>    name = <span class="hljs-string">&quot;Alice&quot;</span>,<br>    age = <span class="hljs-number">18</span>,<br>    score = &#123;<br>        <span class="hljs-built_in">math</span> = <span class="hljs-number">100</span>,<br>        english = <span class="hljs-number">100</span><br>    &#125;<br>&#125;<br>student = Readonly(student)<br><br>student.score.<span class="hljs-built_in">math</span> = <span class="hljs-number">20</span>    <span class="hljs-comment">-- Can not modify a readonly table</span><br><span class="hljs-built_in">print</span>(student.score.<span class="hljs-built_in">math</span>)  <span class="hljs-comment">-- 100</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Lua</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Lua 基础 05 时间</title>
    <link href="/2024/06/09/lua-basic-5/"/>
    <url>/2024/06/09/lua-basic-5/</url>
    
    <content type="html"><![CDATA[<p>Lua 基础相关知识 第五期（完结）</p><span id="more"></span><h1 id="时间戳"><a href="#时间戳" class="headerlink" title="时间戳"></a>时间戳</h1><p>通过 <code>os.time</code> 函数，可以获取当前的时间戳。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> <span class="hljs-built_in">time</span> = <span class="hljs-built_in">os</span>.<span class="hljs-built_in">time</span>()<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">time</span>)<br><br><span class="hljs-comment">-- 1717895996 -&gt; 2024-06-09 09:19:56</span><br></code></pre></td></tr></table></figure><p>如果要指定日期，获取对应的时间戳，可以往 <code>os.time</code> 函数传入一个表，设定日期。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> <span class="hljs-built_in">date</span> = &#123;<br>    year = <span class="hljs-number">2024</span>,  <span class="hljs-comment">-- 年份</span><br>    month = <span class="hljs-number">6</span>,    <span class="hljs-comment">-- 月份</span><br>    day = <span class="hljs-number">9</span>,      <span class="hljs-comment">-- 天数</span><br>    hour = <span class="hljs-number">9</span>,     <span class="hljs-comment">-- 小时</span><br>    <span class="hljs-built_in">min</span> = <span class="hljs-number">30</span>,     <span class="hljs-comment">-- 分钟</span><br>    sec = <span class="hljs-number">30</span>      <span class="hljs-comment">-- 秒数</span><br>&#125;<br><span class="hljs-keyword">local</span> <span class="hljs-built_in">time</span> = <span class="hljs-built_in">os</span>.<span class="hljs-built_in">time</span>(<span class="hljs-built_in">date</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">time</span>)<br><br><span class="hljs-comment">-- 1717896630 -&gt; 2024-06-09 09:30:30</span><br></code></pre></td></tr></table></figure><p>注意到，如果只写了年份、月份、天数，没有小时、分钟、秒数，默认是当天中午 12 点。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> <span class="hljs-built_in">date</span> = &#123;<br>    year = <span class="hljs-number">2024</span>,  <span class="hljs-comment">-- 年份</span><br>    month = <span class="hljs-number">6</span>,    <span class="hljs-comment">-- 月份</span><br>    day = <span class="hljs-number">9</span>,      <span class="hljs-comment">-- 天数</span><br>&#125;<br><span class="hljs-keyword">local</span> <span class="hljs-built_in">time</span> = <span class="hljs-built_in">os</span>.<span class="hljs-built_in">time</span>(<span class="hljs-built_in">date</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">time</span>)<br><br><span class="hljs-comment">-- 1717905600 -&gt; 2024-06-09 12:00:00</span><br></code></pre></td></tr></table></figure><h1 id="日期"><a href="#日期" class="headerlink" title="日期"></a>日期</h1><p>通过 <code>os.date</code> 函数，可以把时间戳转换成有格式的日期。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> <span class="hljs-built_in">time</span> = <span class="hljs-built_in">os</span>.<span class="hljs-built_in">time</span>()<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">time</span>)<br><br><span class="hljs-comment">-- 1717896843</span><br><br><br><span class="hljs-keyword">local</span> <span class="hljs-built_in">date</span> = <span class="hljs-built_in">os</span>.<span class="hljs-built_in">date</span>(<span class="hljs-string">&quot;%Y/%m/%d %H:%M:%S&quot;</span>, <span class="hljs-built_in">time</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">date</span>)<br><br><span class="hljs-comment">-- 2024/06/09 09:34:03</span><br></code></pre></td></tr></table></figure><p>如果不带任何参数调用 <code>os.date</code>，则获取当前时间戳对应的默认日期格式。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> <span class="hljs-built_in">date</span> = <span class="hljs-built_in">os</span>.<span class="hljs-built_in">date</span>()<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">date</span>)<br><br><span class="hljs-comment">-- Sun Jun  9 09:35:58 2024</span><br></code></pre></td></tr></table></figure><p>有时候，我们需要获取日期当中的某个参数，比如天数，可以把 os.date 的第一个参数改成 <code>&quot;*t&quot;</code>，此时它会返回一个表。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> <span class="hljs-built_in">time</span> = <span class="hljs-built_in">os</span>.<span class="hljs-built_in">time</span>()<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">time</span>)<br><br><span class="hljs-comment">-- 1717897482</span><br><br><br><span class="hljs-keyword">local</span> dateTable = <span class="hljs-built_in">os</span>.<span class="hljs-built_in">date</span>(<span class="hljs-string">&quot;*t&quot;</span>, <span class="hljs-built_in">time</span>)<br><span class="hljs-built_in">print</span>(dateTable)<br><br><span class="hljs-comment">-- table: 000001736C002770</span><br><br><br><span class="hljs-keyword">for</span> key, value <span class="hljs-keyword">in</span> <span class="hljs-built_in">pairs</span>(dateTable) <span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">print</span>(key, value)<br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">-- year    2024</span><br><span class="hljs-comment">-- wday    1</span><br><span class="hljs-comment">-- day     9</span><br><span class="hljs-comment">-- min     44</span><br><span class="hljs-comment">-- month   6</span><br><span class="hljs-comment">-- sec     42</span><br><span class="hljs-comment">-- isdst   false</span><br><span class="hljs-comment">-- yday    161</span><br><span class="hljs-comment">-- hour    9</span><br></code></pre></td></tr></table></figure><p>如果要计算多少天后的日期，可以给这个日期表中的 day 字段加上一定的天数，转成时间戳后，再格式化日期。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-comment">-- 获取当前时间戳</span><br><span class="hljs-keyword">local</span> <span class="hljs-built_in">time</span> = <span class="hljs-built_in">os</span>.<span class="hljs-built_in">time</span>()<br><span class="hljs-comment">-- 转换成日期格式</span><br><span class="hljs-keyword">local</span> currentDate = <span class="hljs-built_in">os</span>.<span class="hljs-built_in">date</span>(<span class="hljs-string">&quot;%Y/%m/%d %H:%M:%S&quot;</span>, <span class="hljs-built_in">time</span>)<br><span class="hljs-built_in">print</span>(currentDate)<br><br><span class="hljs-comment">-- 2024/06/09 09:51:20</span><br><br><br><span class="hljs-comment">-- 把当前时间戳转成一个表，天数加上 100 天</span><br><span class="hljs-keyword">local</span> dateTable = <span class="hljs-built_in">os</span>.<span class="hljs-built_in">date</span>(<span class="hljs-string">&quot;*t&quot;</span>, <span class="hljs-built_in">time</span>)<br>dateTable.day = dateTable.day + <span class="hljs-number">100</span><br><br><br><span class="hljs-comment">-- 获取 100 天后的时间戳</span><br><span class="hljs-keyword">local</span> future = <span class="hljs-built_in">os</span>.<span class="hljs-built_in">time</span>(dateTable)<br><span class="hljs-comment">-- 转换成日期格式</span><br><span class="hljs-keyword">local</span> futureDate = <span class="hljs-built_in">os</span>.<span class="hljs-built_in">date</span>(<span class="hljs-string">&quot;%Y/%m/%d %H:%M:%S&quot;</span>, future)<br><br><span class="hljs-built_in">print</span>(futureDate)<br><br><span class="hljs-comment">-- 2024/09/17 09:51:20</span><br></code></pre></td></tr></table></figure><h1 id="时间差"><a href="#时间差" class="headerlink" title="时间差"></a>时间差</h1><p>通过 <code>os.difftime</code> 函数，计算两个时间戳之间的差值。</p><p>例如，计算一下当前时间到次日零点的秒数。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-comment">-- 获取当前时间戳</span><br><span class="hljs-keyword">local</span> now = <span class="hljs-built_in">os</span>.<span class="hljs-built_in">time</span>()<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">os</span>.<span class="hljs-built_in">date</span>(<span class="hljs-string">&quot;%Y/%m/%d %H:%M:%S&quot;</span>, now))<br><br><span class="hljs-comment">-- 2024/06/09 10:12:39</span><br><br><br><span class="hljs-comment">-- 把当前时间戳转成一个表，天数加 1，小时、分钟、秒数清零</span><br><span class="hljs-keyword">local</span> nowDate = <span class="hljs-built_in">os</span>.<span class="hljs-built_in">date</span>(<span class="hljs-string">&quot;*t&quot;</span>, now)<br>nowDate.day = nowDate.day + <span class="hljs-number">1</span><br>nowDate.hour = <span class="hljs-number">0</span><br>nowDate.<span class="hljs-built_in">min</span> = <span class="hljs-number">0</span><br>nowDate.sec = <span class="hljs-number">0</span><br><br><br><span class="hljs-comment">-- 计算次日零点时间戳</span><br><span class="hljs-keyword">local</span> future = <span class="hljs-built_in">os</span>.<span class="hljs-built_in">time</span>(nowDate)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">os</span>.<span class="hljs-built_in">date</span>(<span class="hljs-string">&quot;%Y/%m/%d %H:%M:%S&quot;</span>, future))<br><br><span class="hljs-comment">-- 2024/06/10 00:00:00</span><br><br><br><span class="hljs-comment">-- 计算两个时间戳的差值</span><br><span class="hljs-keyword">local</span> diff = <span class="hljs-built_in">os</span>.<span class="hljs-built_in">difftime</span>(now, future)<br><span class="hljs-built_in">print</span>(diff)<br><br><span class="hljs-comment">-- -49641.0</span><br></code></pre></td></tr></table></figure><h1 id="CPU-时间"><a href="#CPU-时间" class="headerlink" title="CPU 时间"></a>CPU 时间</h1><p>通过 <code>os.clock</code> 函数，可以获取消耗的 CPU 时间，可以用在性能测试。</p><p>例如，计算一下 for 循环累加 1 亿次消耗的时间。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-comment">-- 开始前</span><br><span class="hljs-keyword">local</span> before = <span class="hljs-built_in">os</span>.<span class="hljs-built_in">clock</span>()<br><span class="hljs-built_in">print</span>(before)  <span class="hljs-comment">-- 0.081</span><br><br><span class="hljs-comment">-- 累加 1 亿次</span><br><span class="hljs-keyword">local</span> sum = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i = <span class="hljs-number">1</span>, <span class="hljs-number">100000000</span> <span class="hljs-keyword">do</span><br>    sum = sum + i<br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">-- 结束后</span><br><span class="hljs-keyword">local</span> after = <span class="hljs-built_in">os</span>.<span class="hljs-built_in">clock</span>()<br><span class="hljs-built_in">print</span>(after)   <span class="hljs-comment">-- 0.445</span><br><br><span class="hljs-comment">-- 经过的时间</span><br><span class="hljs-keyword">local</span> diff = after - before<br><span class="hljs-built_in">print</span>(diff)    <span class="hljs-comment">-- 0.364</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Lua</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Lua 基础 04 模块</title>
    <link href="/2024/06/02/lua-basic-4/"/>
    <url>/2024/06/02/lua-basic-4/</url>
    
    <content type="html"><![CDATA[<p>Lua 基础相关知识 第四期</p><span id="more"></span><h1 id="require"><a href="#require" class="headerlink" title="require"></a>require</h1><p>模块，通常是一个表，表里存储了一些字段和函数，单独写在一个 lua 文件。</p><p>例如，这是一个 <code>tools.lua</code> 文件，定义了一个局部 tools 表，包含一个 log 函数，可以传入标题和信息，函数内部格式化字符串输出。</p><p>最后要 <code>return tools</code>，在 require 加载这个模块时才能拿到返回的 tools 表。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> tools = &#123;&#125;<br><br>tools.<span class="hljs-built_in">log</span> = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(title, message)</span></span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">string</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&quot;[%s] %s&quot;</span>, title, message))<br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">return</span> tools<br></code></pre></td></tr></table></figure><p>在其他 lua 文件中加载这个 tools 模块，进行使用。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> tools = <span class="hljs-built_in">require</span> <span class="hljs-string">&quot;tools&quot;</span><br>tools.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;console&quot;</span>, <span class="hljs-string">&quot;hello lua&quot;</span>)<br><br><span class="hljs-comment">-- [console] hello lua</span><br></code></pre></td></tr></table></figure><p>标准库也可以通过 require 加载，换个名称。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> m = <span class="hljs-built_in">require</span> <span class="hljs-string">&quot;math&quot;</span><br><span class="hljs-keyword">local</span> n = m.<span class="hljs-built_in">abs</span>(<span class="hljs-number">-1</span>)<br><span class="hljs-built_in">print</span>(n)<br><br><span class="hljs-comment">-- 1</span><br></code></pre></td></tr></table></figure><p>require 会做已加载的检查，如果已经加载过一个模块了，就不会再重复加载了。</p><p>如果要移除原来加载的模块，可以把模块从 <code>package.loaded</code> 中删除。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-built_in">package</span>.<span class="hljs-built_in">loaded</span>.tools = <span class="hljs-literal">nil</span><br></code></pre></td></tr></table></figure><h1 id="loadfile-dofile-require"><a href="#loadfile-dofile-require" class="headerlink" title="loadfile dofile require"></a>loadfile dofile require</h1><p>这三个函数都是用来加载和执行外部 lua 脚本的，不过有一些区别：</p><ul><li>loadfile 加载编译指定的 lua 文件，但不执行文件中的代码，需要手动调用<code>（返回值是一个函数）</code></li><li>dofile 加载编译并执行指定的 lua 文件<code>（返回值是文件中最后一个表达式的值）</code></li><li>require 先检查 <code>package.loaded</code> 是否已加载模块，若已加载，则直接返回，若不存在，则编译执行一次，并记录到 <code>package.loaded（返回值通常是一个表）</code></li></ul><p>这里所说的执行，是指被加载的 lua 文件中，写在表外面可以被执行的语句，例如在 tools 中添加一行打印，表示欢迎使用这个模块。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> tools = &#123;&#125;<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Welcome to use this tools module!&quot;</span>)<br><br>tools.<span class="hljs-built_in">log</span> = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(title, message)</span></span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">string</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&quot;[%s] %s&quot;</span>, title, message))<br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">return</span> tools<br></code></pre></td></tr></table></figure><p>先尝试使用 loadfile，注意，第一行代码加载的是 <code>tools.lua</code>，需要增加 <code>.lua</code> 后缀名，第一行并没有输出。</p><p>第二行代码打印了 loadfile 的返回值，输出的是一个 function。</p><p>第三行代码手动调用了返回的函数，才执行了 <code>tools.lua</code> 里面的一行打印。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> tools = <span class="hljs-built_in">loadfile</span>(<span class="hljs-string">&quot;tools.lua&quot;</span>)<br><span class="hljs-built_in">print</span>(tools)  <span class="hljs-comment">-- function: 0000025E2F7791D0</span><br>tools()       <span class="hljs-comment">-- Welcome to use this tools module!</span><br></code></pre></td></tr></table></figure><p>再尝试一下 dofile，同样的，第一行代码加载的是 <code>tools.lua</code>，第一行就输出了。</p><p>第二行代码打印的返回值是 table，也就是 <code>tools.lua</code> 最后一行的 <code>return tools</code>。</p><p>第三行代码则不是直接调用 tools 了，因为它并不是一个函数。应该调用 <code>tools.log</code>。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> tools = <span class="hljs-built_in">dofile</span>(<span class="hljs-string">&quot;tools.lua&quot;</span>)  <span class="hljs-comment">-- Welcome to use this tools module!</span><br><span class="hljs-built_in">print</span>(tools)                       <span class="hljs-comment">-- table: 00000150C5D61D30</span><br>tools.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;console&quot;</span>, <span class="hljs-string">&quot;hello lua&quot;</span>)  <span class="hljs-comment">-- [console] hello lua</span><br></code></pre></td></tr></table></figure><p>最后回到 require，注意，第一行代码没有 <code>.lua</code> 后缀名，第一行就输出了。</p><p>后面两行代码和 dofile 是一致的。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> tools = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;tools&quot;</span>)     <span class="hljs-comment">-- Welcome to use this tools module!</span><br><span class="hljs-built_in">print</span>(tools)                       <span class="hljs-comment">-- table: 0000025D08BF13D0</span><br>tools.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;console&quot;</span>, <span class="hljs-string">&quot;hello lua&quot;</span>)  <span class="hljs-comment">-- [console] hello lua</span><br></code></pre></td></tr></table></figure><p>如果再次加载 lua 文件，loadfile 依然是需要手动调用，dofile 会再次输出，require 则只输出一次，除非移除已加载的模块。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> tools_loadfile = <span class="hljs-built_in">loadfile</span>(<span class="hljs-string">&quot;tools.lua&quot;</span>)<br><span class="hljs-keyword">local</span> tools_loadfile = <span class="hljs-built_in">loadfile</span>(<span class="hljs-string">&quot;tools.lua&quot;</span>)<br><br><span class="hljs-keyword">local</span> tools_dofile = <span class="hljs-built_in">dofile</span>(<span class="hljs-string">&quot;tools.lua&quot;</span>)  <span class="hljs-comment">-- Welcome to use this tools module!</span><br><span class="hljs-keyword">local</span> tools_dofile = <span class="hljs-built_in">dofile</span>(<span class="hljs-string">&quot;tools.lua&quot;</span>)  <span class="hljs-comment">-- Welcome to use this tools module!</span><br><br><span class="hljs-keyword">local</span> tools_require = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;tools&quot;</span>)    <span class="hljs-comment">-- Welcome to use this tools module!</span><br><span class="hljs-keyword">local</span> tools_require = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;tools&quot;</span>)<br><br><span class="hljs-built_in">package</span>.<span class="hljs-built_in">loaded</span>.tools = <span class="hljs-literal">nil</span><br><span class="hljs-keyword">local</span> tools_require = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;tools&quot;</span>)    <span class="hljs-comment">-- Welcome to use this tools module!</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Lua</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Lua 基础 03 常用函数</title>
    <link href="/2024/05/26/lua-basic-3/"/>
    <url>/2024/05/26/lua-basic-3/</url>
    
    <content type="html"><![CDATA[<p>Lua 基础相关知识 第三期</p><span id="more"></span><h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><h2 id="格式化字符串-string-format"><a href="#格式化字符串-string-format" class="headerlink" title="格式化字符串 string.format"></a>格式化字符串 <code>string.format</code></h2><p>通常字符串的连接可以使用 .. 符号，不过当字符串比较长，这样的连接方式就很繁琐，这时可以使用 <code>string.format</code> 进行格式化。</p><p>常用的格式控制符：</p><ul><li>%s 接收一个字符串</li><li>%d 接收一个数字并转化为有符号整数，%02d 可以显示两位数，个位数时前面补 0，通常用于倒计时格式</li><li>%f 接收一个数字并转化为浮点数，默认保留 6 位小数，后面补 0，%.2f 可以保留两位小数</li></ul><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> str = <span class="hljs-string">&quot;hello&quot;</span><br><span class="hljs-keyword">local</span> result = <span class="hljs-built_in">string</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&quot;str = %s&quot;</span>, str)<br><span class="hljs-built_in">print</span>(result)<br><br><span class="hljs-comment">-- str = hello</span><br><br><span class="hljs-keyword">local</span> minute = <span class="hljs-number">2</span><br><span class="hljs-keyword">local</span> second = <span class="hljs-number">30</span><br><span class="hljs-keyword">local</span> result = <span class="hljs-built_in">string</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&quot;%02d:%02d&quot;</span>, minute, second)<br><span class="hljs-built_in">print</span>(result)<br><br><span class="hljs-comment">-- 02:30</span><br><br><span class="hljs-keyword">local</span> multi = <span class="hljs-number">0.214</span><br><span class="hljs-keyword">local</span> result = <span class="hljs-built_in">string</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&quot;%.2f&quot;</span>, multi)<br><span class="hljs-built_in">print</span>(result)<br><br><span class="hljs-comment">-- 0.21</span><br></code></pre></td></tr></table></figure><h2 id="字符串长度-string-len"><a href="#字符串长度-string-len" class="headerlink" title="字符串长度 string.len"></a>字符串长度 <code>string.len</code></h2><p>通常只包含英文的字符串，可以使用 <code>string.len</code> 计算字符串长度。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> str = <span class="hljs-string">&quot;hello&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">string</span>.<span class="hljs-built_in">len</span>(str))  <span class="hljs-comment">-- 5</span><br></code></pre></td></tr></table></figure><p>如果字符串包含中文，那么就需要使用 <code>utf8.len</code> 计算 ASCII 字符。</p><p>可以看到，<code>string.len</code> 把小明的长度计算为 6，<code>utf8.len</code> 则是 2。空格的长度为 1。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> str = <span class="hljs-string">&quot;hello 小明&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">string</span>.<span class="hljs-built_in">len</span>(str))  <span class="hljs-comment">-- 12</span><br><span class="hljs-built_in">print</span>(utf8.<span class="hljs-built_in">len</span>(str))    <span class="hljs-comment">-- 8</span><br></code></pre></td></tr></table></figure><h2 id="字符串查找-string-find"><a href="#字符串查找-string-find" class="headerlink" title="字符串查找 string.find"></a>字符串查找 <code>string.find</code></h2><p>在一个字符串中查找指定的子串内容，如果找到第一个匹配的子串（后续的不查找），则返回这个子串的开始位置和结束位置，否则返回 nil。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> str = <span class="hljs-string">&quot;hello lua&quot;</span><br><span class="hljs-keyword">local</span> startPos, endPos = <span class="hljs-built_in">string</span>.<span class="hljs-built_in">find</span>(str, <span class="hljs-string">&quot;lua&quot;</span>)<br><span class="hljs-built_in">print</span>(startPos, endPos)<br><br><span class="hljs-comment">-- 7       9</span><br></code></pre></td></tr></table></figure><p>如果要倒着查找，可以在第三个参数位置指定倒数多少个字符。</p><p>例如，倒数一个字符，因为要查找的 lua 是三个字符，只查找一个字符肯定是不匹配的。如果倒数三个字符，就正好能匹配。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> str = <span class="hljs-string">&quot;hello lua&quot;</span><br><span class="hljs-keyword">local</span> startPos, endPos = <span class="hljs-built_in">string</span>.<span class="hljs-built_in">find</span>(str, <span class="hljs-string">&quot;lua&quot;</span>, <span class="hljs-number">-1</span>)<br><span class="hljs-built_in">print</span>(startPos, endPos)<br><br><span class="hljs-comment">-- nil     nil</span><br><br><span class="hljs-keyword">local</span> str = <span class="hljs-string">&quot;hello lua&quot;</span><br><span class="hljs-keyword">local</span> startPos, endPos = <span class="hljs-built_in">string</span>.<span class="hljs-built_in">find</span>(str, <span class="hljs-string">&quot;lua&quot;</span>, <span class="hljs-number">-3</span>)<br><span class="hljs-built_in">print</span>(startPos, endPos)<br><br><span class="hljs-comment">-- 7       9</span><br></code></pre></td></tr></table></figure><h2 id="字符串截取-string-sub"><a href="#字符串截取-string-sub" class="headerlink" title="字符串截取 string.sub"></a>字符串截取 <code>string.sub</code></h2><p>指定截取的开始位置和结束位置，如果是负数，则从倒数位置开始截取。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> str = <span class="hljs-string">&quot;hello lua&quot;</span><br><span class="hljs-keyword">local</span> strSub = <span class="hljs-built_in">string</span>.<span class="hljs-built_in">sub</span>(str, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>)<br><span class="hljs-built_in">print</span>(strSub)<br><br><span class="hljs-comment">-- hel</span><br><br><span class="hljs-keyword">local</span> str = <span class="hljs-string">&quot;hello lua&quot;</span><br><span class="hljs-keyword">local</span> strSub = <span class="hljs-built_in">string</span>.<span class="hljs-built_in">sub</span>(str, <span class="hljs-number">-3</span>)<br><span class="hljs-built_in">print</span>(strSub)<br><br><span class="hljs-comment">-- lua</span><br></code></pre></td></tr></table></figure><h2 id="字符串替换-string-gsub"><a href="#字符串替换-string-gsub" class="headerlink" title="字符串替换 string.gsub"></a>字符串替换 <code>string.gsub</code></h2><p>指定被替换和要替换的字符，还可以指定替换次数，如果没有指定替换次数，默认全部替换。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> str = <span class="hljs-string">&quot;hello lua&quot;</span><br><span class="hljs-keyword">local</span> strSub = <span class="hljs-built_in">string</span>.<span class="hljs-built_in">gsub</span>(str, <span class="hljs-string">&quot;l&quot;</span>, <span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(strSub)<br><br><span class="hljs-comment">-- heaao lua</span><br></code></pre></td></tr></table></figure><h1 id="表"><a href="#表" class="headerlink" title="表"></a>表</h1><h2 id="插入-table-insert"><a href="#插入-table-insert" class="headerlink" title="插入 table.insert"></a>插入 <code>table.insert</code></h2><p>在表的末尾插入新的元素，也可以指定插入的位置。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> names = &#123; <span class="hljs-string">&quot;Alice&quot;</span>, <span class="hljs-string">&quot;Bob&quot;</span> &#125;<br><span class="hljs-built_in">table</span>.<span class="hljs-built_in">insert</span>(names, <span class="hljs-string">&quot;Jack&quot;</span>)  <span class="hljs-comment">-- 在末尾插入</span><br><span class="hljs-keyword">for</span> key, value <span class="hljs-keyword">in</span> <span class="hljs-built_in">pairs</span>(names) <span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">print</span>(key, value)<br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">-- 1       Alice</span><br><span class="hljs-comment">-- 2       Bob</span><br><span class="hljs-comment">-- 3       Jack</span><br><br><span class="hljs-keyword">local</span> names = &#123; <span class="hljs-string">&quot;Alice&quot;</span>, <span class="hljs-string">&quot;Bob&quot;</span> &#125;<br><span class="hljs-built_in">table</span>.<span class="hljs-built_in">insert</span>(names, <span class="hljs-number">1</span>, <span class="hljs-string">&quot;Jack&quot;</span>)  <span class="hljs-comment">-- 在索引为 1 的位置插入（也可以认为是在开头插入）</span><br><span class="hljs-keyword">for</span> key, value <span class="hljs-keyword">in</span> <span class="hljs-built_in">pairs</span>(names) <span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">print</span>(key, value)<br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">-- 1       Jack</span><br><span class="hljs-comment">-- 2       Alice</span><br><span class="hljs-comment">-- 3       Bob</span><br></code></pre></td></tr></table></figure><h2 id="移除-table-remove"><a href="#移除-table-remove" class="headerlink" title="移除 table.remove"></a>移除 <code>table.remove</code></h2><p>从表的末尾移除一个元素，也可以指定移除的位置。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> names = &#123; <span class="hljs-string">&quot;Alice&quot;</span>, <span class="hljs-string">&quot;Bob&quot;</span>, <span class="hljs-string">&quot;Jack&quot;</span> &#125;<br><span class="hljs-built_in">table</span>.<span class="hljs-built_in">remove</span>(names)  <span class="hljs-comment">-- 移除末尾</span><br><span class="hljs-keyword">for</span> key, value <span class="hljs-keyword">in</span> <span class="hljs-built_in">pairs</span>(names) <span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">print</span>(key, value)<br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">-- 1       Alice</span><br><span class="hljs-comment">-- 2       Bob</span><br><br><span class="hljs-keyword">local</span> names = &#123; <span class="hljs-string">&quot;Alice&quot;</span>, <span class="hljs-string">&quot;Bob&quot;</span>, <span class="hljs-string">&quot;Jack&quot;</span> &#125;<br><span class="hljs-built_in">table</span>.<span class="hljs-built_in">remove</span>(names, <span class="hljs-number">1</span>)  <span class="hljs-comment">-- 移除索引为 1 的元素（也可以认为是移除开头）</span><br><span class="hljs-keyword">for</span> key, value <span class="hljs-keyword">in</span> <span class="hljs-built_in">pairs</span>(names) <span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">print</span>(key, value)<br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">-- 1       Bob</span><br><span class="hljs-comment">-- 2       Jack</span><br></code></pre></td></tr></table></figure><h2 id="排序-table-sort"><a href="#排序-table-sort" class="headerlink" title="排序 table.sort"></a>排序 <code>table.sort</code></h2><p>简单排序。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> nums = &#123; <span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span> &#125;<br><span class="hljs-built_in">table</span>.<span class="hljs-built_in">sort</span>(nums)<br><span class="hljs-keyword">for</span> key, value <span class="hljs-keyword">in</span> <span class="hljs-built_in">pairs</span>(nums) <span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">print</span>(value)<br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">-- 1 2 3 4 5</span><br></code></pre></td></tr></table></figure><p>如果表中嵌套了表，还可以根据表的字段进行排序，需要给 <code>table.sort</code> 传入一个 function 作为参数，在函数内判断字段大小。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> children =<br>&#123;<br>    &#123;<br>        name = <span class="hljs-string">&quot;Alice&quot;</span>,<br>        age = <span class="hljs-number">5</span><br>    &#125;,<br>    &#123;<br>        name = <span class="hljs-string">&quot;Bob&quot;</span>,<br>        age = <span class="hljs-number">2</span><br>    &#125;,<br>    &#123;<br>        name = <span class="hljs-string">&quot;Jack&quot;</span>,<br>        age = <span class="hljs-number">0</span><br>    &#125;<br>&#125;<br><span class="hljs-built_in">table</span>.<span class="hljs-built_in">sort</span>(children, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(a, b)</span></span><br>    <span class="hljs-comment">-- age 从小到大排序</span><br>    <span class="hljs-keyword">if</span> a.age &lt; b.age <span class="hljs-keyword">then</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br><span class="hljs-keyword">end</span>)<br><span class="hljs-keyword">for</span> key, value <span class="hljs-keyword">in</span> <span class="hljs-built_in">pairs</span>(children) <span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">print</span>(value.name, value.age)<br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">-- Jack    0</span><br><span class="hljs-comment">-- Bob     2</span><br><span class="hljs-comment">-- Alice   5</span><br></code></pre></td></tr></table></figure><h2 id="拼接-table-concat"><a href="#拼接-table-concat" class="headerlink" title="拼接 table.concat"></a>拼接 <code>table.concat</code></h2><p>可以把表中的所有元素拼接成一个字符串，可以指定分隔符，拼接的元素范围。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> names = &#123; <span class="hljs-string">&quot;Alice&quot;</span>, <span class="hljs-string">&quot;Bob&quot;</span>, <span class="hljs-string">&quot;Jack&quot;</span> &#125;<br><span class="hljs-keyword">local</span> str = <span class="hljs-built_in">table</span>.<span class="hljs-built_in">concat</span>(names)  <span class="hljs-comment">-- 直接拼接</span><br><span class="hljs-built_in">print</span>(str)<br><br><span class="hljs-comment">-- AliceBobJack</span><br><br><span class="hljs-keyword">local</span> names = &#123; <span class="hljs-string">&quot;Alice&quot;</span>, <span class="hljs-string">&quot;Bob&quot;</span>, <span class="hljs-string">&quot;Jack&quot;</span> &#125;<br><span class="hljs-keyword">local</span> str = <span class="hljs-built_in">table</span>.<span class="hljs-built_in">concat</span>(names, <span class="hljs-string">&quot;,&quot;</span>)  <span class="hljs-comment">-- 用逗号隔开</span><br><span class="hljs-built_in">print</span>(str)<br><br><span class="hljs-comment">-- Alice,Bob,Jack</span><br><br><span class="hljs-keyword">local</span> names = &#123; <span class="hljs-string">&quot;Alice&quot;</span>, <span class="hljs-string">&quot;Bob&quot;</span>, <span class="hljs-string">&quot;Jack&quot;</span> &#125;<br><span class="hljs-keyword">local</span> str = <span class="hljs-built_in">table</span>.<span class="hljs-built_in">concat</span>(names, <span class="hljs-string">&quot;,&quot;</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)  <span class="hljs-comment">-- 只拼接索引为 2 和 3 的元素</span><br><span class="hljs-built_in">print</span>(str)<br><br><span class="hljs-comment">-- Bob,Jack</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Lua</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Lua 基础 02 元表</title>
    <link href="/2024/05/19/lua-basic-2/"/>
    <url>/2024/05/19/lua-basic-2/</url>
    
    <content type="html"><![CDATA[<p>Lua 基础相关知识 第二期</p><span id="more"></span><h1 id="元表"><a href="#元表" class="headerlink" title="元表"></a>元表</h1><p>元表是一种特殊类型，可以附加到另一个表上，控制该表的操作行为。</p><p>元表通常会结合元方法一起使用，最常用的元方法是 <code>__index</code> 和 <code>__newindex</code>，它们的作用就相当于其他语言中的 get 和 set。</p><ul><li><code>__index</code>：当访问表中不存在的 key 时，会进一步查找元表中的 <code>__index</code> 元方法，将表和 key 传递进去，再次尝试访问该 key。</li><li><code>__newindex</code>：当对表进行赋值时，如果不存在该 key，也就是新增 key，会调用元表中的 <code>__newindex</code> 元方法，将表、key 和 value 传递进去，可定义一些额外逻辑。</li></ul><p>其他的元方法还有：</p><p><code>__add</code>、<code>__sub</code>、<code>__mul</code>、<code>__div</code>，重载表的算术运算符，对表进行算术运算时，可以自定义算术逻辑。</p><p><code>__eq</code>、<code>__lt</code>、<code>__le</code>，重载表的比较运算符，对表进行逻辑运算时，可以自定义比较逻辑。</p><p>要把元表附加到另一个表上，需要使用 <code>setmetatable</code> 函数，第一个参数是表，第二个参数是元表。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> obj = &#123;&#125;   <span class="hljs-comment">-- 表</span><br><span class="hljs-keyword">local</span> meta = &#123;&#125;  <span class="hljs-comment">-- 元表</span><br><span class="hljs-built_in">setmetatable</span>(obj, meta)  <span class="hljs-comment">-- 附加元表</span><br></code></pre></td></tr></table></figure><p>接着，可以在元表中定义 <code>__index</code> 和 <code>__newindex</code> 元方法。</p><p>首先尝试 <code>__index</code>，为它赋值一个函数，然后尝试访问 obj 表中不存在的 key，会调用 <code>__index</code>。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> obj = &#123;&#125;<br><span class="hljs-keyword">local</span> meta = &#123;<br>    <span class="hljs-built_in">__index</span> = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(table, key)</span></span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;call __index&quot;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">table</span>)<br>        <span class="hljs-built_in">print</span>(key)<br>    <span class="hljs-keyword">end</span><br>&#125;<br><span class="hljs-built_in">setmetatable</span>(obj, meta)<br><br><span class="hljs-built_in">print</span>(obj.name)  <span class="hljs-comment">-- 访问 obj 表中不存在的 name 字段</span><br><br><span class="hljs-comment">-- call __index</span><br><span class="hljs-comment">-- table: 00000273AA151980</span><br><span class="hljs-comment">-- name</span><br><span class="hljs-comment">-- nil</span><br></code></pre></td></tr></table></figure><p>接着尝试 <code>__newindex</code>，为它赋值一个函数，然后尝试为 obj 表赋值一个不存在的 key，会调用 <code>__newindex</code>。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> obj = &#123;&#125;<br><span class="hljs-keyword">local</span> meta = &#123;<br>    <span class="hljs-built_in">__newindex</span> = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(table, key, value)</span></span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;call __newindex&quot;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">table</span>)<br>        <span class="hljs-built_in">print</span>(key)<br>        <span class="hljs-built_in">print</span>(value)<br>    <span class="hljs-keyword">end</span><br>&#125;<br><span class="hljs-built_in">setmetatable</span>(obj, meta)<br><br>obj.name = <span class="hljs-string">&quot;myObj&quot;</span>  <span class="hljs-comment">-- 赋值 obj 表中不存在的 name 字段</span><br><br><span class="hljs-comment">-- call __newindex</span><br><span class="hljs-comment">-- table: 0000017CCA2B0320</span><br><span class="hljs-comment">-- name</span><br><span class="hljs-comment">-- myObj</span><br></code></pre></td></tr></table></figure><h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><p>利用元表的 <code>__index</code> 元方法，为表 A 附加一个元表 B，表 A 就会在元表 B 中查找它所没有的操作。</p><p>此时可以把表 A 看作对象，表 B 看作类。因为所谓的类，就是已经为对象定义好一系列的属性和方法，对象是以类为模板进行实例化。</p><p>下面定义一个 Person 表，它拥有两个函数 New 和 Say，其中 New 函数是用来实例化对象的，可以传入一个已有的表，也可以不传，默认为空表。</p><p>对于 <code>self.__index = self</code> 这行代码可能会有疑惑，此时 self 指的是 Person，为什么要把 Person 的 <code>__index</code> 指向自己呢？因为元表是需要结合元方法一起使用的，只设置了元表是没有作用的，我们需要从元表 Person 中获取 Person 已经定义好的函数，就需要为 <code>__index</code> 赋值，直接赋值为 Person 即可。</p><p>最后就是调用 <code>setmetatable</code> 附加元表，把对象 o 返回。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs lua">Person = &#123;&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person:New</span><span class="hljs-params">(o)</span></span><br>    o = o <span class="hljs-keyword">or</span> &#123;&#125;             <span class="hljs-comment">-- 一个对象</span><br>    <span class="hljs-built_in">self</span>.<span class="hljs-built_in">__index</span> = <span class="hljs-built_in">self</span>     <span class="hljs-comment">-- Person.__index = Person</span><br>    <span class="hljs-built_in">setmetatable</span>(o, <span class="hljs-built_in">self</span>)   <span class="hljs-comment">-- 对象 o 附加元表 Person</span><br>    <span class="hljs-keyword">return</span> o                <span class="hljs-comment">-- 返回对象 o</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person:Say</span><span class="hljs-params">(content)</span></span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Person Say : &quot;</span> .. content)<br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">local</span> obj = Person:New()    <span class="hljs-comment">-- 实例化对象</span><br>obj:Say(<span class="hljs-string">&quot;obj&quot;</span>)              <span class="hljs-comment">-- 调用 Say 函数</span><br><br><span class="hljs-comment">-- Person Say : obj</span><br></code></pre></td></tr></table></figure><p>通过使用 <code>Person:New</code> 实例化一个对象，然后让对象调用 Say 函数，传入参数，打印结果。</p><p>注意到，这里的函数定义和调用都是使用 : 冒号，其实是 Lua 的一个语法糖，隐式传入 self 参数，放在第一个参数位置。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person:Say</span><span class="hljs-params">(content)</span></span><br><br><span class="hljs-keyword">end</span><br><span class="hljs-comment">-- 等价于</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person.Say</span><span class="hljs-params">(self, content)</span></span><br><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Lua</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Lua 基础 01 入门</title>
    <link href="/2024/05/12/lua-basic-1/"/>
    <url>/2024/05/12/lua-basic-1/</url>
    
    <content type="html"><![CDATA[<p>Lua 基础相关知识 第一期</p><span id="more"></span><h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-comment">--  单行注释</span><br><br><span class="hljs-comment">--[[</span><br><span class="hljs-comment">    多行注释</span><br><span class="hljs-comment">--]]</span><br><br><span class="hljs-comment">-- 多加一个横杠符号就能重新启用注释内的代码</span><br><span class="hljs-comment">---[[</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Lua&quot;</span>)<br><span class="hljs-comment">--]]</span><br></code></pre></td></tr></table></figure><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><p>Lua 是动态类型语言，变量不需要类型定义，只需要为变量赋值。</p><p>Lua 有 8 种基本类型：</p><ol><li>nil（表示一个无效值，条件表达式中表示 false）</li><li>boolean（false 或 true，0 也是 true）</li><li>number（表示双精度类型的实浮点数）</li><li>string（字符串，由一对单引号或双引号包括，也可以用两个方括号）</li><li>table（表，是一个关联数组，数组的索引可以是数字、字符串或表类型）</li><li>function（函数）</li><li>userdata（表示任意存储在变量中的 C 语言数据结构）</li><li>thread（表示执行的独立线程，用于执行协同程序）</li></ol><p>可以使用 type() 函数查看数据类型。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(<span class="hljs-literal">nil</span>))     <span class="hljs-comment">-- nil</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(<span class="hljs-literal">true</span>))    <span class="hljs-comment">-- boolean</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(<span class="hljs-number">1</span>))       <span class="hljs-comment">-- number</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(<span class="hljs-string">&quot;Lua&quot;</span>))   <span class="hljs-comment">-- string</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(&#123;&#125;))      <span class="hljs-comment">-- table</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(<span class="hljs-built_in">print</span>))   <span class="hljs-comment">-- function</span><br></code></pre></td></tr></table></figure><h2 id="布尔"><a href="#布尔" class="headerlink" title="布尔"></a>布尔</h2><p>false 或 true，但需要注意，Lua 把除了 false 和 nil 以外的值都视为 true，例如 0 和 <code>&quot;&quot;</code> 都是 true。</p><p>逻辑运算符 and，or，not 的使用：</p><ol><li>and，如果第一个操作数为 false，就返回第一个操作数，否则返回第二个操作数。</li><li>or，如果第一个操作数为 true，就返回第一个操作数，否则返回第二个操作数。</li><li>not，取反。</li></ol><p>and 和 or 都是短路求值，只有在必要时才会计算第二个操作数。</p><p>常见的写法：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs lua">a = a <span class="hljs-keyword">or</span> <span class="hljs-number">0</span>  <span class="hljs-comment">-- 如果 a 不存在，则使用默认值 0</span><br><br>a = x &lt; y <span class="hljs-keyword">and</span> x <span class="hljs-keyword">or</span> y  <span class="hljs-comment">-- 类似三目运算符，但不完全是</span><br><span class="hljs-comment">-- 操作过程 --</span><br><br><span class="hljs-comment">-- 若 x &lt; y 为 true，则 ( x &lt; y and x ) 返回 x</span><br><span class="hljs-comment">-- 接着 x or y，若 x 存在则为 true，返回 x ( 如果此时 x 不存在或 false，则返回 y，这里是跟三目运算符的区别)</span><br><br><span class="hljs-comment">-- 若 x &lt; y 为 false，则 ( x &lt; y and x ) 返回 x &lt; y 的结果 false</span><br><span class="hljs-comment">-- 接着 false or y，返回 y</span><br><br><span class="hljs-keyword">not</span> <span class="hljs-literal">nil</span>    <span class="hljs-comment">-- true</span><br><span class="hljs-keyword">not</span> <span class="hljs-literal">false</span>  <span class="hljs-comment">-- true</span><br><span class="hljs-keyword">not</span> <span class="hljs-literal">true</span>   <span class="hljs-comment">-- false</span><br><span class="hljs-keyword">not</span> <span class="hljs-number">0</span>      <span class="hljs-comment">-- false</span><br></code></pre></td></tr></table></figure><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>在对一个数字字符串进行算术运算时，Lua 会尝试将字符串转成数字。</p><p>其他语言，例如 C#，是把数字转成字符串进行连接，这里要注意 Lua 的处理方式。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;1&quot;</span> + <span class="hljs-number">2</span>)  <span class="hljs-comment">-- 3</span><br></code></pre></td></tr></table></figure><p>而连接字符串则使用 .. 符号。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;How &quot;</span> .. <span class="hljs-string">&quot;are &quot;</span> .. <span class="hljs-string">&quot;you&quot;</span>)  <span class="hljs-comment">-- How are you</span><br></code></pre></td></tr></table></figure><p>计算字符串长度用 # 符号。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-built_in">print</span>(#<span class="hljs-string">&quot;hello&quot;</span>)  <span class="hljs-comment">-- 5</span><br></code></pre></td></tr></table></figure><p>字符串可以使用两个方括号表示。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs lua">html = <span class="hljs-string">[[</span><br><span class="hljs-string">&lt;html&gt;</span><br><span class="hljs-string">&lt;head&gt;&lt;/head&gt;</span><br><span class="hljs-string">&lt;body&gt;</span><br><span class="hljs-string">    &lt;p&gt;Lua&lt;/p&gt;</span><br><span class="hljs-string">&lt;/body&gt;</span><br><span class="hljs-string">&lt;/html&gt;</span><br><span class="hljs-string">]]</span><br><br><span class="hljs-built_in">print</span>(html)<br><br><span class="hljs-comment">--[[ 打印结果也有换行</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">&lt;html&gt;</span><br><span class="hljs-comment">&lt;head&gt;&lt;/head&gt;</span><br><span class="hljs-comment">&lt;body&gt;</span><br><span class="hljs-comment">    &lt;p&gt;Lua&lt;/p&gt;</span><br><span class="hljs-comment">&lt;/body&gt;</span><br><span class="hljs-comment">&lt;/html&gt;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">--]]</span><br></code></pre></td></tr></table></figure><p>如果字符串的内容也有两个方括号，就会有语法错误，此时可以在最外围的两对方括号中间添加 &#x3D; 号。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs lua">html = <span class="hljs-string">[=[</span><br><span class="hljs-string">&lt;html&gt;</span><br><span class="hljs-string">&lt;head&gt;&lt;/head&gt;</span><br><span class="hljs-string">&lt;body&gt;</span><br><span class="hljs-string">    &lt;p&gt;Lua 这里多出的 ]]</span> 会和 <span class="hljs-string">[[ 匹配，后面的内容就不被包括在字符串内了&lt;/p&gt;</span><br><span class="hljs-string">&lt;/body&gt;</span><br><span class="hljs-string">&lt;/html&gt;</span><br><span class="hljs-string">]=]</span><br></code></pre></td></tr></table></figure><h2 id="表"><a href="#表" class="headerlink" title="表"></a>表</h2><p>表可以看成是数组或哈希表，取决于 key 值是从 1 开始的连续正整数还是其他类型。</p><p>如果没有指定 key 值，默认就是数组。</p><p>不同于其他语言，Lua 的数组索引是从 1 开始的。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-built_in">table</span> = &#123; <span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span> &#125;<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">table</span>[<span class="hljs-number">1</span>])  <span class="hljs-comment">-- a</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">table</span>[<span class="hljs-number">2</span>])  <span class="hljs-comment">-- b</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">table</span>[<span class="hljs-number">3</span>])  <span class="hljs-comment">-- c</span><br></code></pre></td></tr></table></figure><p>指定 key 值，就变成了哈希表。可以使用 [] 或 . 的方式获取 value 值。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-built_in">table</span> = &#123;<br>    [<span class="hljs-string">&quot;name&quot;</span>] = <span class="hljs-string">&quot;Alice&quot;</span>,<br>    [<span class="hljs-string">&quot;age&quot;</span>] = <span class="hljs-number">18</span>,<br>&#125;<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">table</span>[<span class="hljs-string">&quot;name&quot;</span>])  <span class="hljs-comment">-- Alice</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">table</span>.age)      <span class="hljs-comment">-- 18</span><br></code></pre></td></tr></table></figure><p>需要注意的是，如果直接给表赋值第三个位置的值，那么前两个位置的值会自动填充为 nil。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-built_in">table</span> = &#123;<br>    [<span class="hljs-number">3</span>] = <span class="hljs-string">&quot;Alice&quot;</span>,<br>&#125;<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">table</span>[<span class="hljs-number">1</span>])  <span class="hljs-comment">-- nil</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">table</span>[<span class="hljs-number">2</span>])  <span class="hljs-comment">-- nil</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">table</span>[<span class="hljs-number">3</span>])  <span class="hljs-comment">-- Alice</span><br></code></pre></td></tr></table></figure><p>计算表的长度也是用 # 符号，前提是数组的形式，哈希表不适用（只能计算 key 值为连续正整数的部分）。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-built_in">table</span> = &#123; <span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span> &#125;<br><span class="hljs-built_in">print</span>(#<span class="hljs-built_in">table</span>)  <span class="hljs-comment">-- 3</span><br><br><span class="hljs-built_in">table</span> = &#123;<br>    [<span class="hljs-number">1</span>] = <span class="hljs-string">&quot;a&quot;</span>,<br>    [<span class="hljs-number">3</span>] = <span class="hljs-string">&quot;c&quot;</span><br>&#125;<br><span class="hljs-built_in">print</span>(#<span class="hljs-built_in">table</span>)  <span class="hljs-comment">-- 1</span><br><br><span class="hljs-built_in">table</span> = &#123;<br>    [<span class="hljs-number">1</span>] = <span class="hljs-string">&quot;a&quot;</span>,<br>    [<span class="hljs-string">&quot;2&quot;</span>] = <span class="hljs-string">&quot;b&quot;</span>,  <span class="hljs-comment">-- key 值为字符串</span><br>    [<span class="hljs-number">3</span>] = <span class="hljs-string">&quot;c&quot;</span><br>&#125;<br><br><span class="hljs-built_in">print</span>(#<span class="hljs-built_in">table</span>)  <span class="hljs-comment">-- 1</span><br></code></pre></td></tr></table></figure><p>如果要判断表是否为空，可以使用 next() 函数，获取下一个键值对。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-built_in">table</span> = &#123;&#125;<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(<span class="hljs-built_in">table</span>) == <span class="hljs-literal">nil</span>)  <span class="hljs-comment">-- true</span><br><br><span class="hljs-built_in">table</span> = &#123; <span class="hljs-string">&quot;a&quot;</span> &#125;<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(<span class="hljs-built_in">table</span>) == <span class="hljs-literal">nil</span>)  <span class="hljs-comment">-- false</span><br></code></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>函数使用 function 定义，指定函数名和参数，end 结尾。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Add</span><span class="hljs-params">(a, b)</span></span><br>    <span class="hljs-keyword">return</span> a + b<br><span class="hljs-keyword">end</span><br><br><span class="hljs-built_in">print</span>(Add(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))  <span class="hljs-comment">-- 3</span><br></code></pre></td></tr></table></figure><p>函数可以保存到变量中，也可以保存到表中。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs lua">add = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(a, b)</span></span><br>    <span class="hljs-keyword">return</span> a + b<br><span class="hljs-keyword">end</span><br><span class="hljs-built_in">print</span>(add(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))  <span class="hljs-comment">-- 3</span><br><br><span class="hljs-built_in">table</span> = &#123;<br>    [<span class="hljs-string">&quot;add&quot;</span>] = add<br>&#125;<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">table</span>[<span class="hljs-string">&quot;add&quot;</span>](<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))   <span class="hljs-comment">-- 3</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">table</span>.add(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))      <span class="hljs-comment">-- 3</span><br></code></pre></td></tr></table></figure><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><p>Lua 中声明变量默认是全局变量，只有在变量前添加 local 关键字才是局部变量。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lua">a = <span class="hljs-number">1</span>         <span class="hljs-comment">-- 全局变量</span><br><span class="hljs-keyword">local</span> b = <span class="hljs-number">2</span>   <span class="hljs-comment">-- 局部变量</span><br></code></pre></td></tr></table></figure><p>可以同时对多个变量进行赋值。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lua">a, b = <span class="hljs-number">5</span>, <span class="hljs-number">6</span><br><span class="hljs-built_in">print</span>(a, b)  <span class="hljs-comment">-- 5 6</span><br></code></pre></td></tr></table></figure><p>赋值前，Lua 会先计算右边的值再赋值，所以可以简便地进行变量的交换。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs lua">a, b = <span class="hljs-number">5</span>, <span class="hljs-number">6</span><br>a, b = b, a<br><span class="hljs-built_in">print</span>(a, b)  <span class="hljs-comment">-- 6 5</span><br></code></pre></td></tr></table></figure><p>当变量的个数和值的个数不同时，Lua 会采取以下策略：</p><ul><li>变量的个数 &gt; 值的个数：补足 nil</li><li>变量的个数 &lt; 值的个数：多余的值被忽略</li></ul><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs lua">a, b, c = <span class="hljs-number">0</span><br><span class="hljs-built_in">print</span>(a, b, c)  <span class="hljs-comment">-- 0 nil nil</span><br><br>a = <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span><br><span class="hljs-built_in">print</span>(a)  <span class="hljs-comment">-- 0</span><br></code></pre></td></tr></table></figure><h1 id="分支循环"><a href="#分支循环" class="headerlink" title="分支循环"></a>分支循环</h1><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><p>分支结构如下，每个 if 后面要接 then，最后以 end 结尾。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> score = <span class="hljs-number">60</span><br><span class="hljs-keyword">if</span> score &lt; <span class="hljs-number">60</span> <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;不及格&quot;</span>)<br><span class="hljs-keyword">elseif</span> score &lt; <span class="hljs-number">80</span> <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;及格&quot;</span>)<br><span class="hljs-keyword">elseif</span> score &lt; <span class="hljs-number">100</span> <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;优秀&quot;</span>)<br><span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;超标&quot;</span>)<br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">-- 及格</span><br></code></pre></td></tr></table></figure><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><p>循环结构如下，指定 i 的初始值、终止值、步长。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">for</span> i = <span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span> <span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;i = &quot;</span> .. i)<br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">-- i = 1</span><br><span class="hljs-comment">-- i = 2</span><br><span class="hljs-comment">-- i = 3</span><br><span class="hljs-comment">-- i = 4</span><br><span class="hljs-comment">-- i = 5</span><br></code></pre></td></tr></table></figure><h2 id="遍历表"><a href="#遍历表" class="headerlink" title="遍历表"></a>遍历表</h2><p>有三种方法遍历表，常规的第一种如下：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-built_in">table</span> = &#123; <span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span> &#125;<br><br><span class="hljs-comment">-- #table 获取 table 的长度</span><br><span class="hljs-keyword">for</span> i = <span class="hljs-number">1</span>, #<span class="hljs-built_in">table</span>, <span class="hljs-number">1</span> <span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">table</span>[i])<br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">-- a</span><br><span class="hljs-comment">-- b</span><br><span class="hljs-comment">-- c</span><br></code></pre></td></tr></table></figure><p>第二种是使用 pairs 方法：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-built_in">table</span> = &#123; <span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span> &#125;<br><br><span class="hljs-keyword">for</span> key, value <span class="hljs-keyword">in</span> <span class="hljs-built_in">pairs</span>(<span class="hljs-built_in">table</span>) <span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;key = &quot;</span> .. key .. <span class="hljs-string">&quot; value = &quot;</span> .. value)<br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">-- key = 1 value = a</span><br><span class="hljs-comment">-- key = 2 value = b</span><br><span class="hljs-comment">-- key = 3 value = c</span><br></code></pre></td></tr></table></figure><p>第三种是使用 ipairs 方法：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-built_in">table</span> = &#123; <span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span> &#125;<br><br><span class="hljs-keyword">for</span> key, value <span class="hljs-keyword">in</span> <span class="hljs-built_in">ipairs</span>(<span class="hljs-built_in">table</span>) <span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;key = &quot;</span> .. key .. <span class="hljs-string">&quot; value = &quot;</span> .. value)<br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">-- key = 1 value = a</span><br><span class="hljs-comment">-- key = 2 value = b</span><br><span class="hljs-comment">-- key = 3 value = c</span><br></code></pre></td></tr></table></figure><h2 id="pairs-和-ipairs-的区别"><a href="#pairs-和-ipairs-的区别" class="headerlink" title="pairs 和 ipairs 的区别"></a>pairs 和 ipairs 的区别</h2><p>pairs，遍历所有键值对，顺序随机，可以返回 nil。</p><p>ipairs，从 key 值为 1 开始顺序遍历，key 值不连续则会停止，不能返回 nil。</p><p>例 1，表中有两个键值对，缺失了 key 为 2 的值。</p><p>pairs 会遍历所有键值对，ipairs 只会遍历第一个键值对，因为找不到 key 为 2 的值，就停止了。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-built_in">table</span> = &#123;<br>    [<span class="hljs-number">1</span>] = <span class="hljs-string">&quot;a&quot;</span>,<br>    [<span class="hljs-number">3</span>] = <span class="hljs-string">&quot;c&quot;</span><br>&#125;<br><br><span class="hljs-keyword">for</span> key, value <span class="hljs-keyword">in</span> <span class="hljs-built_in">pairs</span>(<span class="hljs-built_in">table</span>) <span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;key = &quot;</span> .. key .. <span class="hljs-string">&quot; value = &quot;</span> .. value)<br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">-- key = 1 value = a</span><br><span class="hljs-comment">-- key = 3 value = c</span><br><br><span class="hljs-keyword">for</span> key, value <span class="hljs-keyword">in</span> <span class="hljs-built_in">ipairs</span>(<span class="hljs-built_in">table</span>) <span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;key = &quot;</span> .. key .. <span class="hljs-string">&quot; value = &quot;</span> .. value)<br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">-- key = 1 value = a</span><br></code></pre></td></tr></table></figure><p>例 2，补上了一个键值对，但是 key 值是字符串 “2”。</p><p>pairs 依然会遍历所有键值对，但是顺序乱了。ipairs 依然只能遍历第一个键值对。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-built_in">table</span> = &#123;<br>    [<span class="hljs-number">1</span>] = <span class="hljs-string">&quot;a&quot;</span>,<br>    [<span class="hljs-string">&quot;2&quot;</span>] = <span class="hljs-string">&quot;b&quot;</span>,  <span class="hljs-comment">-- key 值为字符串</span><br>    [<span class="hljs-number">3</span>] = <span class="hljs-string">&quot;c&quot;</span><br>&#125;<br><br><span class="hljs-keyword">for</span> key, value <span class="hljs-keyword">in</span> <span class="hljs-built_in">pairs</span>(<span class="hljs-built_in">table</span>) <span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;key = &quot;</span> .. key .. <span class="hljs-string">&quot; value = &quot;</span> .. value)<br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">-- key = 3 value = c</span><br><span class="hljs-comment">-- key = 1 value = a</span><br><span class="hljs-comment">-- key = 2 value = b</span><br><br><span class="hljs-keyword">for</span> key, value <span class="hljs-keyword">in</span> <span class="hljs-built_in">ipairs</span>(<span class="hljs-built_in">table</span>) <span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;key = &quot;</span> .. key .. <span class="hljs-string">&quot; value = &quot;</span> .. value)<br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">-- key = 1 value = a</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Lua</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Unity3D DOTween</title>
    <link href="/2024/05/05/unity-dotween/"/>
    <url>/2024/05/05/unity-dotween/</url>
    
    <content type="html"><![CDATA[<p>简单介绍一下 DOTween 插件的使用。</p><span id="more"></span><h1 id="导入插件"><a href="#导入插件" class="headerlink" title="导入插件"></a>导入插件</h1><p>先到 Asset Store 获取 DOTween 插件，然后在 Package Manager 的 My Assets 中搜索，下载并导入插件。</p><p><img src="/../images/unity-dotween/%E5%AF%BC%E5%85%A5%E6%8F%92%E4%BB%B6.png"></p><p>导入后，会自动弹出一个窗口，提示需要先对插件进行配置。</p><p><img src="/../images/unity-dotween/%E6%89%93%E5%BC%80%E6%8F%92%E4%BB%B6%E8%AE%BE%E7%BD%AE%E7%95%8C%E9%9D%A2.png"></p><p>点击上图中的按钮，打开下图的窗口，按顺序点击 Setup DOTween 和 Create ASMDEF 按钮。</p><p><img src="/../images/unity-dotween/%E8%BF%9B%E8%A1%8C%E6%8F%92%E4%BB%B6%E9%85%8D%E7%BD%AE.png"></p><p>配置完成后就可以开始使用 DOTween 插件了。</p><h1 id="简单动画"><a href="#简单动画" class="headerlink" title="简单动画"></a>简单动画</h1><p>创建一个脚本 DOTweenDemo.cs，在场景中创建一个空物体并挂载脚本。</p><p>在场景中创建一个 Cube，拖拽引用。</p><p>要使用 DOTween，需要引入命名空间 <code>DG.Tweening</code>，然后通过组件扩展的以 DO 开头的函数方法进行调用。</p><p>例如，<code>transform.DOMoveX</code> 是让物体在 X 轴方向上进行移动，第一个参数是目标位置，第二个参数是持续时间。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">using</span> UnityEngine;<br><span class="hljs-keyword">using</span> DG.Tweening;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">DOTweenDemo</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-keyword">public</span> GameObject cube;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">float</span> posX = <span class="hljs-number">5f</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">float</span> duration = <span class="hljs-number">1f</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Update</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-keyword">if</span> (Input.GetKeyDown(KeyCode.Alpha1))<br>        &#123;<br>            cube.transform.DOMoveX(-posX, duration);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (Input.GetKeyDown(KeyCode.Alpha2))<br>        &#123;<br>            cube.transform.DOMoveX(posX, duration);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行游戏，按下键盘 1 键时 Cube 向左移动，按下键盘 2 键时 Cube 向右移动。</p><p><img src="/../images/unity-dotween/%E7%AE%80%E5%8D%95%E5%8A%A8%E7%94%BB.gif"></p><h1 id="动画序列"><a href="#动画序列" class="headerlink" title="动画序列"></a>动画序列</h1><p>在实际项目中，动画会更加复杂一些，可能会有多段位移，或者位移后缩小的需求。</p><p>通常会使用动画序列来实现复杂动画。</p><p>使用 <code>DOTween.Sequence</code> 创建一个动画序列对象，通过 <code>sequence.Insert</code> 在指定时刻插入一个简单动画。</p><p>例如，在最开始 0 秒的位置，让 Cube 移动到右边。</p><p>因为持续时间是 1 秒，所以在 1 秒的位置，上一个动画结束了，继续插入第二个动画，让 Cube 向上移动。</p><p>后续的动画以此类推。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">using</span> UnityEngine;<br><span class="hljs-keyword">using</span> DG.Tweening;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">DOTweenDemo</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-keyword">public</span> GameObject cube;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">float</span> posX = <span class="hljs-number">5f</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">float</span> posY = <span class="hljs-number">5f</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">float</span> duration = <span class="hljs-number">1f</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Update</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-keyword">if</span> (Input.GetKeyDown(KeyCode.Alpha1))<br>        &#123;<br>            Sequence sequence = DOTween.Sequence();<br>            sequence.Insert(<span class="hljs-number">0f</span>, cube.transform.DOMoveX(posX, duration));<br>            sequence.Insert(<span class="hljs-number">1f</span>, cube.transform.DOMoveY(posY, duration));<br>            sequence.Insert(<span class="hljs-number">2f</span>, cube.transform.DOMoveX(-posX, duration));<br>            sequence.Insert(<span class="hljs-number">3f</span>, cube.transform.DOMoveY(<span class="hljs-number">0f</span>, duration));<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行游戏，按下键盘 1 键时 Cube 进行了四段位移。</p><p><img src="/../images/unity-dotween/%E5%8A%A8%E7%94%BB%E5%BA%8F%E5%88%97.gif"></p><h1 id="动画回调"><a href="#动画回调" class="headerlink" title="动画回调"></a>动画回调</h1><p>有时候，我们想要在动画播放完成之后执行一些逻辑，就可以使用动画的回调方法。</p><p>例如，让 Cube 向前移动，到达指定位置之后，再缩小。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">using</span> UnityEngine;<br><span class="hljs-keyword">using</span> DG.Tweening;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">DOTweenDemo</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-keyword">public</span> GameObject cube;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">float</span> posX = <span class="hljs-number">5f</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">float</span> posY = <span class="hljs-number">5f</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">float</span> duration = <span class="hljs-number">1f</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Update</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-keyword">if</span> (Input.GetKeyDown(KeyCode.Alpha1))<br>        &#123;<br>            cube.transform.DOMoveZ(<span class="hljs-number">5f</span>, duration).OnComplete(()=&gt;<br>            &#123;<br>                cube.transform.DOScale(<span class="hljs-number">0f</span>, duration);<br>            &#125;);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行效果：</p><p><img src="/../images/unity-dotween/%E5%8A%A8%E7%94%BB%E5%9B%9E%E8%B0%83.gif"></p><h1 id="结束动画"><a href="#结束动画" class="headerlink" title="结束动画"></a>结束动画</h1><p>有时候，玩家进行了某些操作，需要提前让动画结束，有两种方法。</p><p>一种是直接 Kill 掉动画，即中断动画。</p><p>一种是提前完成动画。</p><p>在 Kill 掉动画的时候，需要先为动画设置 id，然后使用 <code>DOTween.Kill</code> 中断指定 id 的动画。</p><blockquote><p>注意：这里只为 DOMoveZ 设置了 id，当它结束时播放的另一个缩放动画是不会被 Kill 掉的。</p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">using</span> UnityEngine;<br><span class="hljs-keyword">using</span> DG.Tweening;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">DOTweenDemo</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-keyword">public</span> GameObject cube;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">float</span> posX = <span class="hljs-number">5f</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">float</span> posY = <span class="hljs-number">5f</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">float</span> duration = <span class="hljs-number">1f</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Update</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-keyword">if</span> (Input.GetKeyDown(KeyCode.Alpha1))<br>        &#123;<br>            cube.transform.DOMoveZ(<span class="hljs-number">5f</span>, duration).OnComplete(()=&gt;<br>            &#123;<br>                cube.transform.DOScale(<span class="hljs-number">0f</span>, duration);<br>            &#125;).SetId(<span class="hljs-string">&quot;cube&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (Input.GetKeyDown(KeyCode.Alpha2))<br>        &#123;<br>            DOTween.Kill(<span class="hljs-string">&quot;cube&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行效果，先按键盘 1 键执行动画，再立刻按键盘 2 键中断动画。</p><p><img src="/../images/unity-dotween/%E6%9D%80%E6%8E%89%E5%8A%A8%E7%94%BB.gif"></p><p>提前完成动画，只需要调用 DOComplete 函数即可。</p><p>这里因为是 transform 调用的，对于两段动画来说，都是可以提前完成的。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">using</span> UnityEngine;<br><span class="hljs-keyword">using</span> DG.Tweening;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">DOTweenDemo</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-keyword">public</span> GameObject cube;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">float</span> posX = <span class="hljs-number">5f</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">float</span> posY = <span class="hljs-number">5f</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">float</span> duration = <span class="hljs-number">1f</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Update</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-keyword">if</span> (Input.GetKeyDown(KeyCode.Alpha1))<br>        &#123;<br>            cube.transform.DOMoveZ(<span class="hljs-number">5f</span>, duration).OnComplete(()=&gt;<br>            &#123;<br>                cube.transform.DOScale(<span class="hljs-number">0f</span>, duration);<br>            &#125;);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (Input.GetKeyDown(KeyCode.Alpha2))<br>        &#123;<br>            cube.transform.DOComplete();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行效果，先按键盘 1 键执行动画，再立刻按键盘 2 键提前完成动画，会有一个动画跳跃的视觉效果。</p><p><img src="/../images/unity-dotween/%E6%8F%90%E5%89%8D%E5%AE%8C%E6%88%90%E5%8A%A8%E7%94%BB.gif"></p><h1 id="延迟调用"><a href="#延迟调用" class="headerlink" title="延迟调用"></a>延迟调用</h1><p>DOTween 除了做一些动画效果外，还可以当做定时器，延迟一段时间后调用。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">using</span> UnityEngine;<br><span class="hljs-keyword">using</span> DG.Tweening;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">DOTweenDemo</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Update</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-keyword">if</span> (Input.GetKeyDown(KeyCode.Alpha1))<br>        &#123;<br>            Debug.Log(<span class="hljs-string">&quot;开始定时&quot;</span>);<br>            DOVirtual.DelayedCall(<span class="hljs-number">1f</span>, ()=&gt;<br>            &#123;<br>                Debug.Log(<span class="hljs-string">&quot;1 秒后调用&quot;</span>);<br>            &#125;);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行效果：</p><p><img src="/../images/unity-dotween/%E5%BB%B6%E8%BF%9F%E8%B0%83%E7%94%A8.gif"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Unity3D</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Unity3D 菜单栏快速切换场景</title>
    <link href="/2024/04/27/unity-editor-switch-scene/"/>
    <url>/2024/04/27/unity-editor-switch-scene/</url>
    
    <content type="html"><![CDATA[<p>扩展编辑器菜单栏，快速切换常用场景。</p><span id="more"></span><h1 id="菜单栏快速切换场景"><a href="#菜单栏快速切换场景" class="headerlink" title="菜单栏快速切换场景"></a>菜单栏快速切换场景</h1><p>一般要打开一个场景，需要在 Assets 文件夹下找到场景文件，双击打开。</p><p>但是当资源文件夹太多，搜索起来也比较麻烦。</p><p>此时可以在顶部菜单栏上显示几个按钮，点击切换到常用的场景。</p><p>这类扩展了编辑器按钮的代码，需要在 Assets 下创建一个 Editor 文件夹，把脚本放到 Editor 文件夹中。</p><p>例如，在 Editor 文件夹中创建 EditorSwitchScene.cs，引用 <code>UnityEditor</code> 命名空间，在静态类中写静态方法。</p><p>使用 <code>MenuItem</code> 这个标签给编辑器添加新的菜单按钮，点击按钮则会调用对应的静态方法。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">using</span> UnityEditor;<br><span class="hljs-keyword">using</span> UnityEditor.SceneManagement;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title">EditorSwitchScene</span><br>&#123;<br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> 打开场景</span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;filename&quot;&gt;</span>场景路径<span class="hljs-doctag">&lt;/param&gt;</span></span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OpenScene</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> filename</span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-comment">// 询问是否保存对当前场景的修改</span><br>        <span class="hljs-keyword">if</span> (EditorSceneManager.SaveCurrentModifiedScenesIfUserWantsTo())<br>        &#123;<br>            EditorSceneManager.OpenScene(filename);<br>        &#125;<br>    &#125;<br><br>    [<span class="hljs-meta">MenuItem(<span class="hljs-meta-string">&quot;切换场景/Start&quot;</span>)</span>]<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">SwitchStart</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        OpenScene(<span class="hljs-string">&quot;Assets/Scenes/Start.unity&quot;</span>);<br>    &#125;<br><br>    [<span class="hljs-meta">MenuItem(<span class="hljs-meta-string">&quot;切换场景/Game&quot;</span>)</span>]<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">SwitchGame</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        OpenScene(<span class="hljs-string">&quot;Assets/Scenes/Game.unity&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到菜单栏多出的按钮：</p><p><img src="/../images/unity-editor-switch-scene/%E8%8F%9C%E5%8D%95%E6%A0%8F%E6%8C%89%E9%92%AE.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Unity3D</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Unity3D 存档读档</title>
    <link href="/2024/04/21/unity-save-data/"/>
    <url>/2024/04/21/unity-save-data/</url>
    
    <content type="html"><![CDATA[<p>Unity3D json 存档读档功能。</p><span id="more"></span><h1 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h1><p>游戏存档通常是把存在于内存中的对象，通过序列化，把对象中的数据存储到文件中，实现数据的持久化。</p><p>游戏读档则是把文件中的数据，通过反序列化，重新生成内存中的对象。</p><p>存档的格式，一般使用 json 存储，也可以使用二进制、XML等。</p><h1 id="存档"><a href="#存档" class="headerlink" title="存档"></a>存档</h1><p>首先，需要安装一个 json 库，在 Package Manager 窗口中，搜索 Newtonsoft Json 进行安装。</p><p>也可以使用其他 json 库，Newtonsoft Json 的优点是可以很好地序列化字典。</p><p>接着，创建一个 GameData 类，标记为可序列化。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">using</span> System;<br><br>[<span class="hljs-meta">Serializable</span>]<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">GameData</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> playerID;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">GameData</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        playerID = <span class="hljs-number">100001</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后创建一个 DataManager 类，用来管理存档。</p><p>这里的 SavePath 添加了平台宏定义，如果是在 unity editor 中运行，就直接存储到 Assets 文件夹中，其他平台则是存储到可读写的数据目录中。</p><p>通过调用 <code>JsonConvert.SerializeObject</code> 方法，把 gameData 序列化成 json 字符串，再使用 <code>StreamWriter</code> 写入本地文件。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">using</span> System.IO;<br><span class="hljs-keyword">using</span> UnityEngine;<br><span class="hljs-keyword">using</span> Newtonsoft.Json;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">DataManager</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-keyword">public</span> GameData gameData;<br><br>    <span class="hljs-built_in">string</span> SavePath<br>    &#123;<br>        <span class="hljs-keyword">get</span><br>        &#123;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> UNITY_EDITOR</span><br>            <span class="hljs-keyword">return</span> Application.dataPath + <span class="hljs-string">&quot;/SaveData.json&quot;</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">else</span></span><br>            <span class="hljs-keyword">return</span> Application.persistentDataPath + <span class="hljs-string">&quot;/SaveData.json&quot;</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span>            </span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        Save();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Save</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-built_in">string</span> json = JsonConvert.SerializeObject(gameData);<br>        StreamWriter sw = <span class="hljs-keyword">new</span> StreamWriter(SavePath);<br>        sw.Write(json);<br>        sw.Close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行游戏之后，停止运行，刷新工程资源目录，可以看到 Assets 文件夹下多出了一个 SaveData.json 文件。</p><p>json 的内容如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<span class="hljs-attr">&quot;playerID&quot;</span>:<span class="hljs-number">100001</span>&#125;<br></code></pre></td></tr></table></figure><h1 id="读档"><a href="#读档" class="headerlink" title="读档"></a>读档</h1><p>读档的时候，要先判断本地是否有存档文件，再进行文件的读取和反序列化，还原 gameData 数据对象。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">DataManager</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-comment">// ...</span><br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Load</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-keyword">if</span> (File.Exists(SavePath))<br>        &#123;<br>            StreamReader sr = <span class="hljs-keyword">new</span> StreamReader(SavePath);<br>            <span class="hljs-built_in">string</span> json = sr.ReadToEnd();<br>            sr.Close();<br>            gameData = JsonConvert.DeserializeObject&lt;GameData&gt;(json);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在游戏开始时，先读档，再修改数据对象，再次存档。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">DataManager</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-comment">// ...</span><br>    <br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        Load();<br>        gameData.playerID = <span class="hljs-number">100002</span>;<br>        Save();<br>    &#125;<br>    <br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到，json 的内容改变了。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<span class="hljs-attr">&quot;playerID&quot;</span>:<span class="hljs-number">100002</span>&#125;<br></code></pre></td></tr></table></figure><h1 id="数据对象扩展"><a href="#数据对象扩展" class="headerlink" title="数据对象扩展"></a>数据对象扩展</h1><p>目前 GameData 中只有一个 playerID，实际上可以再定义更多的数据类，统一放到 GameData 中作为成员字段。</p><p>例如，定义一个 DataPlayer 类，保存玩家的数据。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">DataPlayer</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> playerID;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> playerName;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> health;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">DataPlayer</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        playerID = <span class="hljs-number">100001</span>;<br>        playerName = <span class="hljs-string">&quot;Player&quot;</span>;<br>        health = <span class="hljs-number">100</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后把 DataPlayer 放到 GameData 中，在构造函数中要记得实例化对象。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">using</span> System;<br><br>[<span class="hljs-meta">Serializable</span>]<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">GameData</span><br>&#123;<br>    <span class="hljs-keyword">public</span> DataPlayer dataPlayer;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">GameData</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        dataPlayer = <span class="hljs-keyword">new</span> DataPlayer();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>游戏开始时，修改一下玩家名字，再存档。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">DataManager</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-comment">// ...</span><br>    <br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        Load();<br>        gameData.dataPlayer.playerName = <span class="hljs-string">&quot;起个名字很难&quot;</span>;<br>        Save();<br>    &#125;<br>    <br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>此时，json 的内容如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>    <span class="hljs-attr">&quot;dataPlayer&quot;</span>: &#123;<br>        <span class="hljs-attr">&quot;playerID&quot;</span>: <span class="hljs-number">100001</span>,<br>        <span class="hljs-attr">&quot;playerName&quot;</span>: <span class="hljs-string">&quot;起个名字很难&quot;</span>,<br>        <span class="hljs-attr">&quot;health&quot;</span>: <span class="hljs-number">100</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Unity3D</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Unity3D ScriptableObject</title>
    <link href="/2024/04/14/unity-scriptable-object/"/>
    <url>/2024/04/14/unity-scriptable-object/</url>
    
    <content type="html"><![CDATA[<p>Unity3D ScriptableObject 的使用。</p><span id="more"></span><h1 id="创建-SO"><a href="#创建-SO" class="headerlink" title="创建 SO"></a>创建 SO</h1><p>ScriptableObject 是 unity 提供的一个数据存储类。</p><p>使用时，只需创建一个类继承 ScriptableObject，加上创建菜单代码，就可以在资源文件夹创建 SO 脚本对应的数据文件。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">using</span> UnityEngine;<br><br>[<span class="hljs-meta">CreateAssetMenu(fileName = <span class="hljs-meta-string">&quot;SOConfig&quot;</span>, menuName = <span class="hljs-meta-string">&quot;SOConfig&quot;</span>, order = 0)</span>]<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">SOConfig</span> : <span class="hljs-title">ScriptableObject</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> version;<br>&#125;<br></code></pre></td></tr></table></figure><p>创建数据文件：</p><p><img src="/../images/unity-scriptable-object/%E5%88%9B%E5%BB%BASO%E6%96%87%E4%BB%B6.png"></p><p>填写数据：</p><p><img src="/../images/unity-scriptable-object/%E9%85%8D%E7%BD%AESO%E6%95%B0%E6%8D%AE.png"></p><h1 id="获取-SO-数据"><a href="#获取-SO-数据" class="headerlink" title="获取 SO 数据"></a>获取 SO 数据</h1><p>可以直接引用数据文件。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">using</span> UnityEngine;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">SODemo</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-keyword">public</span> SOConfig config;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        Debug.Log(<span class="hljs-string">$&quot;version = <span class="hljs-subst">&#123;config.version&#125;</span>&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行效果：</p><p><img src="/../images/unity-scriptable-object/%E8%8E%B7%E5%8F%96SO%E6%95%B0%E6%8D%AE.png"></p><h1 id="序列化类"><a href="#序列化类" class="headerlink" title="序列化类"></a>序列化类</h1><p>除了在 SO 脚本中定义单一的字段，也可以使用类来组织数据结构。这个类是需要打上 Serializable 的标签。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">using</span> System;<br><span class="hljs-keyword">using</span> UnityEngine;<br><br>[<span class="hljs-meta">CreateAssetMenu(fileName = <span class="hljs-meta-string">&quot;SOConfig&quot;</span>, menuName = <span class="hljs-meta-string">&quot;SOConfig&quot;</span>, order = 0)</span>]<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">SOConfig</span> : <span class="hljs-title">ScriptableObject</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> version;<br>    <span class="hljs-keyword">public</span> ConfigData configData;<br>&#125;<br><br>[<span class="hljs-meta">Serializable</span>]<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">ConfigData</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> name;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> description;<br>&#125;<br></code></pre></td></tr></table></figure><p>SO 数据文件的变化：</p><p><img src="/../images/unity-scriptable-object/SO%E5%BA%8F%E5%88%97%E5%8C%96%E7%B1%BB.png"></p><h1 id="简单的游戏配置"><a href="#简单的游戏配置" class="headerlink" title="简单的游戏配置"></a>简单的游戏配置</h1><p>对于一些简单的小游戏来说，使用 SO 做配置表，会比较简单快捷。</p><p>例如，一个商店的商品列表：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">using</span> System;<br><span class="hljs-keyword">using</span> System.Collections.Generic;<br><span class="hljs-keyword">using</span> UnityEngine;<br><br>[<span class="hljs-meta">CreateAssetMenu(fileName = <span class="hljs-meta-string">&quot;SOShop&quot;</span>, menuName = <span class="hljs-meta-string">&quot;SOShop&quot;</span>, order = 1)</span>]<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">SOShop</span> : <span class="hljs-title">ScriptableObject</span><br>&#123;<br>    <span class="hljs-keyword">public</span> List&lt;SOShopItem&gt; shopItems;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> SOShopItem <span class="hljs-title">GetItem</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> id</span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-keyword">return</span> shopItems.Find(x =&gt; x.id == id);<br>    &#125;<br>&#125;<br><br>[<span class="hljs-meta">Serializable</span>]<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">SOShopItem</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> name;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> id;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> description;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> price;<br>&#125;<br></code></pre></td></tr></table></figure><p>配置数据：</p><p><img src="/../images/unity-scriptable-object/%E7%AE%80%E5%8D%95%E6%B8%B8%E6%88%8F%E9%85%8D%E7%BD%AE.png"></p><p>使用配置：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">using</span> UnityEngine;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">SODemo</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-keyword">public</span> SOConfig config;<br>    <span class="hljs-keyword">public</span> SOShop shop;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; shop.shopItems.Count; i++)<br>        &#123;<br>            SOShopItem item = shop.shopItems[i];<br>            Debug.Log(<span class="hljs-string">$&quot;name = <span class="hljs-subst">&#123;item.name&#125;</span> price = <span class="hljs-subst">&#123;item.price&#125;</span>&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行效果：</p><p><img src="/../images/unity-scriptable-object/%E9%81%8D%E5%8E%86%E5%95%86%E5%93%81%E5%88%97%E8%A1%A8.png"></p><h1 id="动态修改配置"><a href="#动态修改配置" class="headerlink" title="动态修改配置"></a>动态修改配置</h1><p>SO 文件中填写的数据是可以在代码中赋值的。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">using</span> UnityEngine;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">SODemo</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-keyword">public</span> SOConfig config;<br>    <span class="hljs-keyword">public</span> SOShop shop;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        config.version = <span class="hljs-string">&quot;1.0.1&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行之后 version 就变成了 1.0.1，并且这个修改是持久化的，新值覆盖了旧值。</p><p>如果只想在运行时修改，不想覆盖旧值，可以让 SO 创建实例。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">using</span> UnityEngine;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">SODemo</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-keyword">public</span> SOConfig config;<br>    <span class="hljs-keyword">public</span> SOShop shop;<br><br>    <span class="hljs-keyword">public</span> SOConfig configInstance;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        configInstance = ScriptableObject.CreateInstance&lt;SOConfig&gt;();<br>        configInstance.version = <span class="hljs-string">&quot;1.0.2&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行后，可以看到有一个 SO 实例。</p><p><img src="/../images/unity-scriptable-object/SO%E5%AE%9E%E4%BE%8B.png"></p><p>双击查看实例数据，可以看到 SO 实例的 version 是 1.0.2，本地文件的 version 还是 1.0.1。</p><p><img src="/../images/unity-scriptable-object/SO%E5%AE%9E%E4%BE%8B%E6%95%B0%E6%8D%AE.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Unity3D</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Unity3D 对象池</title>
    <link href="/2024/04/07/unity-objectpool/"/>
    <url>/2024/04/07/unity-objectpool/</url>
    
    <content type="html"><![CDATA[<p>Unity3D 官方对象池的使用。</p><span id="more"></span><h1 id="对象池"><a href="#对象池" class="headerlink" title="对象池"></a>对象池</h1><p>对象池是一个可以复用对象的容器。</p><p>当需要创建对象时，调用对象池的接口获得对象。</p><p>当需要销毁对象时，调用对象池的接口归还对象。</p><p>而对象池会判断池子里是否有可用的对象，如果有，直接取出一个对象返回，如果没有，就创建一个新的对象。</p><p>从对象池里取出的对象，使用完毕之后要放回对象池。</p><p>通过复用对象，减少了创建和销毁对象的次数，避免因频繁创建和销毁对象带来的性能问题。</p><h1 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h1><p>下面来看看 Unity3D 官方提供的对象池类。</p><p>首先需要引用 <code>UnityEngine.Pool</code> 这个命名空间，然后使用 ObjectPool 这个类型定义一个成员字段，在 Start 中实例化，并提供一个用于创建对象的 OnCreate 函数，需要带有返回值，即创建好的新对象。</p><p>这里就简单地使用 <code>GameObject.CreatePrimitive</code> 创建一个 Cube。</p><p>在 Update 中，通过 <code>cubePool.Get()</code> 函数获得对象。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">using</span> System.Collections;<br><span class="hljs-keyword">using</span> System.Collections.Generic;<br><span class="hljs-keyword">using</span> UnityEngine;<br><br><span class="hljs-comment">// 对象池命名空间</span><br><span class="hljs-keyword">using</span> UnityEngine.Pool;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">ObjectPoolSample</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-comment">// 一个对象池</span><br>    <span class="hljs-keyword">public</span> ObjectPool&lt;GameObject&gt; cubePool;<br><br>    Vector3 pos;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-comment">// 实例化对象池，必须提供一个创建对象的回调函数（带返回值）</span><br>        cubePool = <span class="hljs-keyword">new</span> ObjectPool&lt;GameObject&gt;(OnCreate);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Update</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-comment">// 按下键盘 1 键</span><br>        <span class="hljs-keyword">if</span> (Input.GetKeyDown(KeyCode.Alpha1))<br>        &#123;<br>            <span class="hljs-comment">// 从对象池中获得对象</span><br>            GameObject obj = cubePool.Get();<br>            obj.transform.position = pos;<br>            pos += Vector3.right;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> 创建对象</span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;returns&gt;</span>新的对象<span class="hljs-doctag">&lt;/returns&gt;</span></span><br>    <span class="hljs-function">GameObject <span class="hljs-title">OnCreate</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-comment">// 创建一个 Cube</span><br>        GameObject obj = GameObject.CreatePrimitive(PrimitiveType.Cube);<br>        <span class="hljs-keyword">return</span> obj;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="归还对象"><a href="#归还对象" class="headerlink" title="归还对象"></a>归还对象</h1><p>目前只提供了创建对象的函数，还需要提供归还对象的函数。</p><p>添加一个 List，用于维护已创建的对象。</p><p>在实例化对象池时，第三个参数是归还对象时的回调函数 OnRelease，带有一个参数 GameObject obj，可以获取到被归还的对象，通过 <code>SetActive(false)</code> 把它隐藏。第二个参数暂时填 null。</p><p>然后在 Update 中添加一个按键 2 的逻辑，遍历 cubeList，把所有的对象都通过 <code>cubePool.Release</code> 归还，归还之前会调用 OnRelease 回调函数。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">using</span> System.Collections;<br><span class="hljs-keyword">using</span> System.Collections.Generic;<br><span class="hljs-keyword">using</span> UnityEngine;<br><span class="hljs-keyword">using</span> UnityEngine.Pool;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">ObjectPoolSample</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-keyword">public</span> List&lt;GameObject&gt; cubeList;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-comment">// 实例化对象池时，添加一个新的回调函数 OnRelease</span><br>        cubePool = <span class="hljs-keyword">new</span> ObjectPool&lt;GameObject&gt;(OnCreate, <span class="hljs-literal">null</span>, OnRelease);<br>        cubeList = <span class="hljs-keyword">new</span> List&lt;GameObject&gt;();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Update</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-keyword">if</span> (Input.GetKeyDown(KeyCode.Alpha1))<br>        &#123;<br>            GameObject obj = cubePool.Get();<br>            <span class="hljs-comment">// ...</span><br>            cubeList.Add(obj);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (Input.GetKeyDown(KeyCode.Alpha2))<br>        &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; cubeList.Count; i++)<br>            &#123;<br>                cubePool.Release(cubeList[i]);<br>            &#125;<br>            cubeList.Clear();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// ...</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OnRelease</span>(<span class="hljs-params">GameObject obj</span>)</span><br><span class="hljs-function"></span>    &#123;<br>        obj.SetActive(<span class="hljs-literal">false</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="再次获得对象"><a href="#再次获得对象" class="headerlink" title="再次获得对象"></a>再次获得对象</h1><p>因为在 OnRelease 函数中，隐藏了对象，此时对象池中存有的对象都是隐藏的，所以取出的对象都是隐藏的。</p><p>刚开始因为对象池内是空的，所以每次调用 <code>cubePool.Get()</code> 时，都会调用 OnCreate 函数。</p><p>但是当对象池不为空时，就不会再去调用 OnCreate 函数，而是调用另一个回调函数（也就是实例化对象池时，暂时填 null 的那个参数）。</p><p>所以还需要提供一个获得对象时的回调函数 OnGet，在这个函数中通过 <code>SetActive(true)</code> 把它显示出来。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">using</span> System.Collections;<br><span class="hljs-keyword">using</span> System.Collections.Generic;<br><span class="hljs-keyword">using</span> UnityEngine;<br><span class="hljs-keyword">using</span> UnityEngine.Pool;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">ObjectPoolSample</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-comment">// ...</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-comment">// 实例化对象池时，添加一个新的回调函数 OnGet</span><br>        cubePool = <span class="hljs-keyword">new</span> ObjectPool&lt;GameObject&gt;(OnCreate, OnGet, OnRelease);<br>        <span class="hljs-comment">// ...</span><br>    &#125;<br><br>    <span class="hljs-comment">// ...</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OnGet</span>(<span class="hljs-params">GameObject obj</span>)</span><br><span class="hljs-function"></span>    &#123;<br>        obj.SetActive(<span class="hljs-literal">true</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>效果图：</p><p>可以看到，空池时，创建了三个 Cube，归还给对象池之后，再次获得三个 Cube，都是复用之前创建好的。</p><p><img src="/../images/unity-objectpool/%E5%AF%B9%E8%B1%A1%E6%B1%A0%E8%8E%B7%E5%BE%97%E4%B8%8E%E5%BD%92%E8%BF%98.gif"></p><h1 id="销毁对象"><a href="#销毁对象" class="headerlink" title="销毁对象"></a>销毁对象</h1><p>当对象池最大容量已满，归还的对象是不会被存入对象池的，而是调用一个被销毁的回调函数。</p><p>主动调用 Clear 函数，也会为池内的所有对象都调用一次被销毁的回调函数。</p><p>此时可以提供一个 OnObjectDestroy 函数作为对象销毁时的回调函数（OnDestroy 是脚本的生命周期函数，需要换个名字避免冲突）。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">using</span> System.Collections;<br><span class="hljs-keyword">using</span> System.Collections.Generic;<br><span class="hljs-keyword">using</span> UnityEngine;<br><span class="hljs-keyword">using</span> UnityEngine.Pool;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">ObjectPoolSample</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-comment">// ...</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-comment">// 实例化对象池时，添加一个新的回调函数 OnObjectDestroy</span><br>        cubePool = <span class="hljs-keyword">new</span> ObjectPool&lt;GameObject&gt;(OnCreate, OnGet, OnRelease, OnObjectDestroy);<br>        <span class="hljs-comment">// ...</span><br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Update</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-comment">// ...</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (Input.GetKeyDown(KeyCode.Alpha3))<br>        &#123;<br>            cubePool.Clear();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// ...</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OnObjectDestroy</span>(<span class="hljs-params">GameObject obj</span>)</span><br><span class="hljs-function"></span>    &#123;<br>        Debug.Log(<span class="hljs-string">$&quot;销毁对象 <span class="hljs-subst">&#123;obj.name&#125;</span> pos = <span class="hljs-subst">&#123;obj.transform.position&#125;</span>&quot;</span>);<br>        Destroy(obj);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>效果图：</p><p>按键 1 创建三个 Cube，按键 2 归还所有 Cube，按键 3 销毁池内所有对象。</p><p><img src="/../images/unity-objectpool/%E5%AF%B9%E8%B1%A1%E6%B1%A0%E9%94%80%E6%AF%81%E5%AF%B9%E8%B1%A1.gif"></p><h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">using</span> System.Collections;<br><span class="hljs-keyword">using</span> System.Collections.Generic;<br><span class="hljs-keyword">using</span> UnityEngine;<br><br><span class="hljs-comment">// 对象池命名空间</span><br><span class="hljs-keyword">using</span> UnityEngine.Pool;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">ObjectPoolSample</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-comment">// 一个对象池</span><br>    <span class="hljs-keyword">public</span> ObjectPool&lt;GameObject&gt; cubePool;<br><br>    <span class="hljs-comment">// 维护对象的列表</span><br>    <span class="hljs-keyword">public</span> List&lt;GameObject&gt; cubeList;<br>    Vector3 pos;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-comment">// 实例化对象池，必须提供一个创建对象的回调函数，其他回调函数都是可空的</span><br>        cubePool = <span class="hljs-keyword">new</span> ObjectPool&lt;GameObject&gt;(OnCreate, OnGet, OnRelease, OnObjectDestroy);<br>        cubeList = <span class="hljs-keyword">new</span> List&lt;GameObject&gt;();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Update</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-comment">// 按键 1 获得对象</span><br>        <span class="hljs-keyword">if</span> (Input.GetKeyDown(KeyCode.Alpha1))<br>        &#123;<br>            GameObject obj = cubePool.Get();<br>            obj.transform.position = pos;<br>            pos += Vector3.right;<br>            <span class="hljs-comment">// 添加到列表</span><br>            cubeList.Add(obj);<br>        &#125;<br>        <span class="hljs-comment">// 按键 2 归还所有对象</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (Input.GetKeyDown(KeyCode.Alpha2))<br>        &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; cubeList.Count; i++)<br>            &#123;<br>                cubePool.Release(cubeList[i]);<br>            &#125;<br>            cubeList.Clear();<br>        &#125;<br>        <span class="hljs-comment">// 按键 3 销毁池内的所有对象</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (Input.GetKeyDown(KeyCode.Alpha3))<br>        &#123;<br>            cubePool.Clear();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> 创建对象</span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;returns&gt;</span>新的对象<span class="hljs-doctag">&lt;/returns&gt;</span></span><br>    <span class="hljs-function">GameObject <span class="hljs-title">OnCreate</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        GameObject obj = GameObject.CreatePrimitive(PrimitiveType.Cube);<br>        <span class="hljs-keyword">return</span> obj;<br>    &#125;<br><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> 获得对象</span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;obj&quot;&gt;</span>获得的对象<span class="hljs-doctag">&lt;/param&gt;</span></span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OnGet</span>(<span class="hljs-params">GameObject obj</span>)</span><br><span class="hljs-function"></span>    &#123;<br>        obj.SetActive(<span class="hljs-literal">true</span>);<br>    &#125;<br><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> 归还对象</span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;obj&quot;&gt;</span>归还的对象<span class="hljs-doctag">&lt;/param&gt;</span></span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OnRelease</span>(<span class="hljs-params">GameObject obj</span>)</span><br><span class="hljs-function"></span>    &#123;<br>        obj.SetActive(<span class="hljs-literal">false</span>);<br>    &#125;<br><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> 销毁对象</span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;obj&quot;&gt;</span>销毁的对象<span class="hljs-doctag">&lt;/param&gt;</span></span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OnObjectDestroy</span>(<span class="hljs-params">GameObject obj</span>)</span><br><span class="hljs-function"></span>    &#123;<br>        Debug.Log(<span class="hljs-string">$&quot;销毁对象 <span class="hljs-subst">&#123;obj.name&#125;</span> pos = <span class="hljs-subst">&#123;obj.transform.position&#125;</span>&quot;</span>);<br>        Destroy(obj);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Unity3D</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Unity3D 基础 07 动画</title>
    <link href="/2024/03/31/unity-basic-7/"/>
    <url>/2024/03/31/unity-basic-7/</url>
    
    <content type="html"><![CDATA[<p>Unity3D 基础系列（第七期 完结）</p><span id="more"></span><h1 id="动画控制器"><a href="#动画控制器" class="headerlink" title="动画控制器"></a>动画控制器</h1><p>首先，创建一个 Animator Controller 和一个 Animation 资源文件。</p><p><img src="/../images/unity-basic-7/%E5%88%9B%E5%BB%BA%E5%8A%A8%E7%94%BB.png"></p><p>双击 Animator Controller 文件，可以打开 Animator 窗口。</p><p>然后把 Animation 文件拖拽到 Animator 窗口，生成一个动画片段。</p><p><img src="/../images/unity-basic-7/%E5%88%9B%E5%BB%BA%E5%8A%A8%E7%94%BB%E7%89%87%E6%AE%B5.png"></p><p>给场景中的 Cube 添加一个 Animator 组件，并把资源文件拖拽赋值。</p><p><img src="/../images/unity-basic-7/%E6%B7%BB%E5%8A%A0%E5%8A%A8%E7%94%BB%E6%8E%A7%E5%88%B6%E5%99%A8%E7%BB%84%E4%BB%B6.png"></p><p>通过顶部菜单栏打开 Animation 编辑窗口。</p><p><img src="/../images/unity-basic-7/%E5%8A%A8%E7%94%BB%E6%97%B6%E9%97%B4%E8%BD%B4%E7%AA%97%E5%8F%A3.png"></p><p>给 Cube 添加一个动画属性。</p><p><img src="/../images/unity-basic-7/%E6%B7%BB%E5%8A%A0%E5%8A%A8%E7%94%BB%E5%B1%9E%E6%80%A7.png"></p><p>点击录制按钮，开始录制动画。</p><p><img src="/../images/unity-basic-7/%E5%BD%95%E5%88%B6%E5%8A%A8%E7%94%BB.gif"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Unity3D</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Unity3D 基础 06 UGUI</title>
    <link href="/2024/03/24/unity-basic-6/"/>
    <url>/2024/03/24/unity-basic-6/</url>
    
    <content type="html"><![CDATA[<p>Unity3D 基础系列（第六期）</p><span id="more"></span><h1 id="创建画布"><a href="#创建画布" class="headerlink" title="创建画布"></a>创建画布</h1><p>在 Hierarchy 面板右键，选择 UI -&gt; Canvas，创建一个画布。</p><p><img src="/../images/unity-basic-6/%E5%88%9B%E5%BB%BA%E7%94%BB%E5%B8%83.png"></p><p>可以看到画布默认带有一些组件：</p><ul><li>Canvas</li><li>Canvas Scaler</li><li>Graphic Raycaster</li></ul><p><img src="/../images/unity-basic-6/%E7%94%BB%E5%B8%83%E7%BB%84%E4%BB%B6.png"></p><p>Canvas 组件可以选择 Render Mode，有三种渲染模式。</p><ol><li>Overlay 模式会把画布渲染到最顶层，不会被其他元素遮挡。</li><li>Camera 模式需要指定一个相机，画布会被缩小到相机的尺寸范围内，可以通过设置 Plane Distance、Sorting Layer、Order in Layer 来控制画布的渲染层级。通常是推荐使用 Camera 模式。</li><li>World Space 模式是把画布当做 3D 世界物体来使用，可以自行调整画布的位置、旋转和缩放。</li></ol><p>Canvas Scaler 组件可以设置画布的分辨率。通常会设置成 Scale With Screen Size，指定一个合适的分辨率，当屏幕尺寸发生变化时，可以选择根据宽度还是高度进行适配。</p><p>Graphic Raycaster 组件是一个容易被忽略的组件，如果没有这个组件，画布是不会响应点击事件的。</p><h1 id="图片和文本"><a href="#图片和文本" class="headerlink" title="图片和文本"></a>图片和文本</h1><p>在 Hierarchy 面板右键，选择 UI -&gt; Image，创建一个图片。</p><p>旧版文本是在 Legacy 菜单中，选择 Text。</p><p>新版文本则是 Text-TextMeshPro。</p><p><img src="/../images/unity-basic-6/%E5%9B%BE%E7%89%87%E5%92%8C%E6%96%87%E6%9C%AC.png"></p><p>Image 组件可以在 Source Image 属性选择想要显示的图片，</p><p>Color 调整颜色和不透明度，</p><p>Raycast Target 控制是否要接收点击事件，</p><p>Maskable 控制是否被遮罩裁剪。</p><p><img src="/../images/unity-basic-6/%E5%9B%BE%E7%89%87%E7%BB%84%E4%BB%B6.png"></p><p>Text 组件主要填写 Text 属性的内容，</p><p>修改 Font 字体，Font Size 字体大小，Alignment 对齐方式。</p><p>同样也有 Raycast Target 和 Maskable 属性。</p><p><img src="/../images/unity-basic-6/%E6%96%87%E6%9C%AC%E7%BB%84%E4%BB%B6.png"></p><p>效果图：</p><p><img src="/../images/unity-basic-6/%E5%9B%BE%E7%89%87%E6%96%87%E6%9C%AC%E6%95%88%E6%9E%9C.png"></p><h1 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h1><p>在 Hierarchy 面板右键，选择 UI -&gt; Legacy -&gt; Button，创建一个按钮。</p><p><img src="/../images/unity-basic-6/%E6%8C%89%E9%92%AE.png"></p><p>Button 组件主要添加 OnClick 点击事件。</p><p>可以简单的，点击 OnClick 列表右下角的 + 号，添加一个事件，把标题文本拖拽到 Runtime Only 下面的选框中。</p><p>点击 Runtime Only 右侧的方法列表，例如选择 GameObject -&gt; SetActive，方法下面就会出现一个方框，勾选则代表 true，不勾选则代表 false。</p><p><img src="/../images/unity-basic-6/%E6%8C%89%E9%92%AE%E7%BB%84%E4%BB%B6.png"></p><p>除了直接在面板上添加点击事件，还可以通过代码添加。</p><p>例如，创建一个脚本 ButtonClick.cs，挂到按钮上，并拖拽一个文本给 text 字段。</p><p>在 Start 方法中，先获取按钮自身的 Button 组件，再通过 onClick.AddListener 方法添加另一个方法 HideText 作为点击事件，这个方法里把 text 字段引用的文本隐藏。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">using</span> System.Collections;<br><span class="hljs-keyword">using</span> System.Collections.Generic;<br><span class="hljs-keyword">using</span> UnityEngine;<br><span class="hljs-keyword">using</span> UnityEngine.UI;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">ButtonClick</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-keyword">public</span> Text text;<br>    Button button;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        button = GetComponent&lt;Button&gt;();<br>        button.onClick.AddListener(HideText);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">HideText</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        text.gameObject.SetActive(<span class="hljs-literal">false</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>效果图：</p><p><img src="/../images/unity-basic-6/%E9%9A%90%E8%97%8F%E6%96%87%E6%9C%AC.gif"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Unity3D</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Unity3D 基础 05 场景加载</title>
    <link href="/2024/03/17/unity-basic-5/"/>
    <url>/2024/03/17/unity-basic-5/</url>
    
    <content type="html"><![CDATA[<p>Unity3D 基础系列（第五期）</p><span id="more"></span><h1 id="场景配置"><a href="#场景配置" class="headerlink" title="场景配置"></a>场景配置</h1><p>首先，在资源文件夹里创建一个 LoadScene 场景，摆放一些物体，用来做初始场景。</p><p>然后创建一个 Stage 文件夹，并创建两个场景 Stage1、Stage2。</p><p>两个 Stage 场景也可以简单布置一下，方便区分。</p><p><img src="/../images/unity-basic-5/%E5%B8%83%E7%BD%AE%E5%9C%BA%E6%99%AF.png"></p><p>接着，打开 Build Settings，把需要加载的场景添加到配置中。</p><p><img src="/../images/unity-basic-5/%E5%9C%BA%E6%99%AF%E6%89%93%E5%8C%85%E8%AE%BE%E7%BD%AE.png"></p><h1 id="切换场景"><a href="#切换场景" class="headerlink" title="切换场景"></a>切换场景</h1><p>创建一个 SceneLoader 脚本，并在 LoadScene 场景中创建一个空物体，挂载这个脚本。</p><p>这里为了方便调用加载场景的方法，简单使用了单例模式，在 Awake 初始化时，把当前脚本实例保存到 instance 变量里，并且设置为 DontDestroyOnLoad，保证这个对象不会因为场景切换而被销毁，其他对象通过 Instance 属性获取到单例。</p><p>当前脚本提供一个 LoadScene 方法，传入一个场景名称就可以直接切换场景。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">using</span> System.Collections;<br><span class="hljs-keyword">using</span> System.Collections.Generic;<br><span class="hljs-keyword">using</span> UnityEngine;<br><span class="hljs-keyword">using</span> UnityEngine.SceneManagement;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">SceneLoader</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-comment">// 单例模式</span><br>    <span class="hljs-keyword">static</span> SceneLoader instance;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SceneLoader Instance<br>    &#123;<br>        <span class="hljs-keyword">get</span> &#123; <span class="hljs-keyword">return</span> instance; &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Awake</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-keyword">if</span> (instance != <span class="hljs-literal">null</span>)<br>        &#123;<br>            Destroy(gameObject);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            instance = <span class="hljs-keyword">this</span>;<br>            DontDestroyOnLoad(gameObject);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">LoadScene</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> sceneName</span>)</span><br><span class="hljs-function"></span>    &#123;<br>        SceneManager.LoadScene(sceneName);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>接着再创建一个脚本 ChangeScene，挂载到场景中的 3D 物体上，并填写目标场景的名称。</p><p>OnMouseDown 方法会在物体被鼠标点击时调用。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">using</span> System.Collections;<br><span class="hljs-keyword">using</span> System.Collections.Generic;<br><span class="hljs-keyword">using</span> UnityEngine;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">ChangeScene</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> sceneName;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OnMouseDown</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        SceneLoader.Instance.LoadScene(sceneName);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/../images/unity-basic-5/%E7%9B%AE%E6%A0%87%E5%9C%BA%E6%99%AF.png"></p><p><img src="/../images/unity-basic-5/%E5%9B%9E%E5%88%B0%E4%B8%BB%E5%9C%BA%E6%99%AF.png"></p><p>场景切换效果：</p><p><img src="/../images/unity-basic-5/%E5%9C%BA%E6%99%AF%E5%88%87%E6%8D%A2%E6%95%88%E6%9E%9C.gif"></p><h1 id="场景叠加"><a href="#场景叠加" class="headerlink" title="场景叠加"></a>场景叠加</h1><p>目前场景加载是卸载掉原来的场景，加载新的场景，DontDestroyOnLoad 场景一直存在。</p><p>并且场景加载是同步的，如果新的场景包含的物体资源太多，加载时间稍慢的话，就会感觉到卡顿。</p><p>场景是可以叠加的，也就是同时加载了多个场景，也有异步加载的方式。</p><p>下面添加两个方法，用来加载或卸载场景。因为是异步加载，需要使用协程，场景加载完成后可以执行其他操作。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">SceneLoader</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-comment">// ...</span><br>    <br>    <span class="hljs-comment">// 当前加载的场景</span><br>    Scene currentScene;<br>    <br>    <span class="hljs-comment">// 加载场景（异步加载，叠加模式）</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">LoadSceneAdditive</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> sceneName</span>)</span><br><span class="hljs-function"></span>    &#123;<br>        StartCoroutine(LoadSceneAsync(sceneName));<br>    &#125;<br><br>    <span class="hljs-function">IEnumerator <span class="hljs-title">LoadSceneAsync</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> sceneName</span>)</span><br><span class="hljs-function"></span>    &#123;<br>        AsyncOperation operation = SceneManager.LoadSceneAsync(sceneName, LoadSceneMode.Additive);<br>        <span class="hljs-keyword">yield</span> <span class="hljs-keyword">return</span> operation;<br>        <span class="hljs-comment">// 加载完成后，保存当前加载的场景</span><br>        currentScene = SceneManager.GetSceneByName(sceneName);<br>    &#125;<br><br>    <span class="hljs-comment">// 卸载当前已加载的场景</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">UnloadCurrentScene</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-comment">// 判断是否加载过当前场景</span><br>        <span class="hljs-keyword">if</span> (!currentScene.IsValid()) <span class="hljs-keyword">return</span>;<br>        StartCoroutine(UnloadCurrentSceneAsync());<br>    &#125;<br><br>    <span class="hljs-function">IEnumerator <span class="hljs-title">UnloadCurrentSceneAsync</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        AsyncOperation operation = SceneManager.UnloadSceneAsync(currentScene);<br>        <span class="hljs-keyword">yield</span> <span class="hljs-keyword">return</span> operation;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后修改一下 ChangeScene 脚本调用的方法。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">ChangeScene</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> sceneName;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OnMouseDown</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-comment">// 先卸载当前加载的场景</span><br>        SceneLoader.Instance.UnloadCurrentScene();<br>        <br>        <span class="hljs-comment">// 加载新的场景（叠加模式）</span><br>        SceneLoader.Instance.LoadSceneAdditive(sceneName);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Stage 场景也需要修改一下，隐藏掉相机和灯光，因为主场景已经有了，多个相机和灯光会影响视觉效果。</p><p><img src="/../images/unity-basic-5/%E4%BF%AE%E6%94%B9%E5%9C%BA%E6%99%AF.png"></p><p>场景叠加效果：</p><p><img src="/../images/unity-basic-5/%E5%9C%BA%E6%99%AF%E5%8F%A0%E5%8A%A0.gif"></p><p><img src="/../images/unity-basic-5/%E5%9C%BA%E6%99%AF%E5%8F%A0%E5%8A%A02.gif"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Unity3D</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Unity3D 基础 04 物理效果</title>
    <link href="/2024/03/10/unity-basic-4/"/>
    <url>/2024/03/10/unity-basic-4/</url>
    
    <content type="html"><![CDATA[<p>Unity3D 基础系列（第四期）</p><span id="more"></span><h1 id="刚体"><a href="#刚体" class="headerlink" title="刚体"></a>刚体</h1><p>在场景中创建一个 Cube，然后为它添加一个 Rigidbody 组件。</p><p>此时，Cube 就有了重力，如果运行游戏，Cube 会模拟自由落体，往下掉落。</p><p><img src="/../images/unity-basic-4/%E6%B7%BB%E5%8A%A0%E5%88%9A%E4%BD%93.png"></p><p>可以简单布置一下场景，在 Cube 下面放置一个 Plane，这样 Cube 就会站立在平面上。</p><p>当然，也可以修改 Rigidbody 组件的参数，取消勾选 Use Gravity 或者勾选 Is Kinematic，也会取消重力效果。</p><p><img src="/../images/unity-basic-4/%E5%B8%83%E7%BD%AE%E5%9C%BA%E6%99%AF.png"></p><p>刚体组件也可以让物体移动，只需要修改刚体的 velocity 属性。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">using</span> System.Collections;<br><span class="hljs-keyword">using</span> System.Collections.Generic;<br><span class="hljs-keyword">using</span> UnityEngine;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">RigidbodyMove</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">float</span> speed = <span class="hljs-number">5f</span>;   <span class="hljs-comment">// 移动速度</span><br>    <span class="hljs-keyword">public</span> Vector3 direction;  <span class="hljs-comment">// 移动方向</span><br>    <span class="hljs-keyword">public</span> Rigidbody rb;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        rb = GetComponent&lt;Rigidbody&gt;();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Update</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-comment">// 水平偏移量</span><br>        <span class="hljs-built_in">float</span> h = Input.GetAxis(<span class="hljs-string">&quot;Horizontal&quot;</span>);<br>        <span class="hljs-comment">// 垂直偏移量</span><br>        <span class="hljs-built_in">float</span> v = Input.GetAxis(<span class="hljs-string">&quot;Vertical&quot;</span>);<br>        <span class="hljs-comment">// 修改方向向量</span><br>        direction.x = h;<br>        direction.z = v;<br>        <span class="hljs-comment">// 设置刚体速度</span><br>        rb.velocity = speed * direction;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行效果：</p><p><img src="/../images/unity-basic-4/%E5%88%9A%E4%BD%93%E7%A7%BB%E5%8A%A8.gif"></p><h1 id="碰撞体"><a href="#碰撞体" class="headerlink" title="碰撞体"></a>碰撞体</h1><p>在创建 Cube 时，默认会挂载一个碰撞体组件。</p><p>勾选 Is Trigger 会取消碰撞效果，只做触发器。</p><p>Center 和 Size 用来控制碰撞体的中心位置和大小。</p><p><img src="/../images/unity-basic-4/%E7%A2%B0%E6%92%9E%E4%BD%93%E5%B1%9E%E6%80%A7.png"></p><p>如果要让两个物体碰撞，监听发生碰撞的时刻，需要其中一个物体带有刚体组件，另一个物体可以没有刚体。</p><p>当然，两个物体都要有碰撞体。</p><p>如果没有刚体的碰撞体，勾选了 Is Trigger，那么带有刚体的物体监听的碰撞回调函数是 OnTrigger 系列的函数。</p><p>如果没有刚体的碰撞体，没有勾选 Is Trigger，那么带有刚体的物体监听的碰撞回调函数是 OnCollision 系列的函数。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">RigidbodyMove</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-comment">// ...</span><br>    <br>    <span class="hljs-comment">// 进入触发</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OnTriggerEnter</span>(<span class="hljs-params">Collider other</span>)</span><br><span class="hljs-function"></span>    &#123;<br>        Debug.Log(<span class="hljs-string">&quot;触发 &quot;</span> + other.name);<br>    &#125;<br><br>    <span class="hljs-comment">// 进入碰撞</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OnCollisionEnter</span>(<span class="hljs-params">Collision other</span>)</span><br><span class="hljs-function"></span>    &#123;<br>        Debug.Log(<span class="hljs-string">&quot;碰撞 &quot;</span> + other.collider.name);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在场景中添加一个球体，并且把球的碰撞体设置为 Trigger。</p><p>可以看到 Console 窗口打印的信息。</p><p>因为 Plane 也带有碰撞体，并且不是 Trigger，所以会打印 碰撞 Plane。</p><p>而球体是 Trigger，所以会打印 触发 Sphere。</p><p><img src="/../images/unity-basic-4/%E8%A7%A6%E5%8F%91.png"></p><p>类似的碰撞回调函数</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-comment">// 进入触发器</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OnTriggerEnter</span>(<span class="hljs-params">Collider other</span>)</span><br><span class="hljs-function"></span>&#123;<br>&#125;<br><br><span class="hljs-comment">// 停留触发器</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OnTriggerStay</span>(<span class="hljs-params">Collider other</span>)</span><br><span class="hljs-function"></span>&#123;<br>&#125;<br><br><span class="hljs-comment">// 退出触发器</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OnTriggerExit</span>(<span class="hljs-params">Collider other</span>)</span><br><span class="hljs-function"></span>&#123;<br>&#125;<br><br><span class="hljs-comment">// 进入碰撞体</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OnCollisionEnter</span>(<span class="hljs-params">Collision other</span>)</span><br><span class="hljs-function"></span>&#123;<br>&#125;<br><br><span class="hljs-comment">// 停留碰撞体</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OnCollisionStay</span>(<span class="hljs-params">Collision other</span>)</span><br><span class="hljs-function"></span>&#123;<br>&#125;<br><br><span class="hljs-comment">// 退出碰撞体</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OnCollisionExit</span>(<span class="hljs-params">Collision other</span>)</span><br><span class="hljs-function"></span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Unity3D</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Unity3D 基础 03 预制体</title>
    <link href="/2024/03/03/unity-basic-3/"/>
    <url>/2024/03/03/unity-basic-3/</url>
    
    <content type="html"><![CDATA[<p>Unity3D 基础系列（第三期）</p><span id="more"></span><h1 id="创建预制体"><a href="#创建预制体" class="headerlink" title="创建预制体"></a>创建预制体</h1><p>创建预制体的方法很简单，直接把场景中的游戏物体，拖拽到 Assets 文件夹里，就会生成一个预制体资源了。</p><p><img src="/../images/unity-basic-3/%E5%88%9B%E5%BB%BA%E9%A2%84%E5%88%B6%E4%BD%93.png"></p><p>除了拖拽的方式，也可以在 Create 菜单中找到创建预制体的按钮，此时会创建一个空的预制体。</p><p><img src="/../images/unity-basic-3/%E5%88%9B%E5%BB%BA%E9%A2%84%E5%88%B6%E4%BD%932.png"></p><h1 id="修改预制体"><a href="#修改预制体" class="headerlink" title="修改预制体"></a>修改预制体</h1><p>双击 Assets 文件夹里的预制体资源，可以进入编辑模式。</p><p>在编辑模式下，给预制体增加一个球模型，点击 Save 按钮保存。</p><p>保存之后，点击 Save 按钮旁边的 &lt; 按钮，退出编辑模式，回到场景。</p><p><img src="/../images/unity-basic-3/%E4%BF%AE%E6%94%B9%E9%A2%84%E5%88%B6%E4%BD%93.png"></p><p>回到场景之后，发现场景中的游戏物体都会随之修改。</p><p>同时，也可以把预制体从 Assets 文件夹里再次拖拽到场景中，会生成新的一模一样的游戏物体。</p><p>后续对预制体的修改，都会同时改变场景中引用同一个预制体资源的所有游戏物体。</p><p><img src="/../images/unity-basic-3/%E6%8B%96%E6%8B%BD%E6%96%B0%E7%9A%84%E9%A2%84%E5%88%B6%E4%BD%93.png"></p><p>除了在 Assets 文件夹中双击预制体进行编辑的方式外，还可以直接在场景中，对游戏物体进行修改，然后应用到预制体上。</p><p>例如，在其中一个游戏物体中，再次添加一个小球，点击 Overrides 按钮，可以看到有哪些修改。</p><p>如果直接点击 Apply All，就会把所有修改都覆盖到预制体。</p><p>也可以单独点击其中某个修改，点击 Apply 按钮，再次点击 Apply to Prefab ‘Cube’ 按钮，就可以把单条修改覆盖到预制体。</p><p><img src="/../images/unity-basic-3/%E5%9C%BA%E6%99%AF%E4%B8%AD%E4%BF%AE%E6%94%B9%E9%A2%84%E5%88%B6%E4%BD%93.png"></p><p>应用覆盖之后，场景中的游戏物体和资源里的预制体都会发生改变。</p><p><img src="/../images/unity-basic-3/%E8%A6%86%E7%9B%96%E9%A2%84%E5%88%B6%E4%BD%93.png"></p><h1 id="实例化预制体"><a href="#实例化预制体" class="headerlink" title="实例化预制体"></a>实例化预制体</h1><p>除了直接从 Assets 文件夹里拖拽预制体到场景中，进行游戏物体的生成外，还可以通过代码的方式实例化预制体。</p><p>创建一个脚本 CreateGameObjectByPrefab.cs，代码如下。</p><p>其中 cubePrefab 是要实例化的预制体资源，</p><p>pos 是生成的位置，</p><p>step 是每次修改生成位置的步长。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">using</span> System.Collections;<br><span class="hljs-keyword">using</span> System.Collections.Generic;<br><span class="hljs-keyword">using</span> UnityEngine;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">CreateGameObjectByPrefab</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-keyword">public</span> GameObject cubePrefab;<br>    <span class="hljs-keyword">public</span> Vector3 pos;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">float</span> step = <span class="hljs-number">1f</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Update</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-comment">// 按下键盘 G 键</span><br>        <span class="hljs-keyword">if</span> (Input.GetKeyDown(KeyCode.G))<br>        &#123;<br>            Generate();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Generate</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        GameObject obj = Instantiate(cubePrefab);<br>        obj.transform.position = pos;<br>        pos.x += step;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在场景中创建一个空物体，并把脚本拖拽到空物体上，再把 Cube 预制体拖拽到 Cube Prefab 属性上，设置好 pos 和 step 的参数。</p><p><img src="/../images/unity-basic-3/%E6%8B%96%E6%8B%BD%E9%A2%84%E5%88%B6%E4%BD%93%E5%BC%95%E7%94%A8.png"></p><p>运行游戏，按下键盘 G 键，可以看到场景中不断地生成新的游戏物体。</p><p><img src="/../images/unity-basic-3/%E5%8A%A8%E6%80%81%E7%94%9F%E6%88%90%E6%B8%B8%E6%88%8F%E7%89%A9%E4%BD%93.gif"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Unity3D</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Unity3D 基础 02 控制移动</title>
    <link href="/2024/02/25/unity-basic-2/"/>
    <url>/2024/02/25/unity-basic-2/</url>
    
    <content type="html"><![CDATA[<p>Unity3D 基础系列（第二期）</p><span id="more"></span><h1 id="创建脚本"><a href="#创建脚本" class="headerlink" title="创建脚本"></a>创建脚本</h1><p>首先，新建一个场景，创建一个 Cube。</p><p>在 Assets 文件夹中创建一个 Scripts 文件夹，用来存放代码文件。</p><p>然后创建一个 PlayerController.cs 代码文件，拖拽挂载到 Cube 身上。</p><p><img src="/../images/unity-basic-2/%E5%88%9B%E5%BB%BA%E8%84%9A%E6%9C%AC.png"></p><h1 id="物体移动"><a href="#物体移动" class="headerlink" title="物体移动"></a>物体移动</h1><p>打开 PlayerController.cs 编辑代码。</p><p>添加 speed 和 direction 两个变量，在 Update 方法中，通过 Input.GetAxis 获取键盘 WSAD 或 方向键 的输入，修改移动方向，并计算改变 transform.position 的数值。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">using</span> System.Collections;<br><span class="hljs-keyword">using</span> System.Collections.Generic;<br><span class="hljs-keyword">using</span> UnityEngine;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">PlayerController</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">float</span> speed = <span class="hljs-number">5f</span>;   <span class="hljs-comment">// 移动速度</span><br>    <span class="hljs-keyword">public</span> Vector3 direction;  <span class="hljs-comment">// 移动方向</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Update</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-comment">// 水平偏移量</span><br>        <span class="hljs-built_in">float</span> h = Input.GetAxis(<span class="hljs-string">&quot;Horizontal&quot;</span>);<br>        <span class="hljs-comment">// 垂直偏移量</span><br>        <span class="hljs-built_in">float</span> v = Input.GetAxis(<span class="hljs-string">&quot;Vertical&quot;</span>);<br>        <span class="hljs-comment">// 修改方向向量</span><br>        direction.x = h;<br>        direction.y = v;<br>        <span class="hljs-comment">// 计算移动距离并修改物体位置</span><br>        transform.position += speed * Time.deltaTime * direction;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>移动效果：</p><p><img src="/../images/unity-basic-2/%E7%A7%BB%E5%8A%A8%E6%95%88%E6%9E%9C.gif"></p><blockquote><p>注意到，这里计算移动距离时，乘了一个 Time.deltaTime 变量，可以尝试去掉这个变量，看看效果。</p></blockquote><p>Time.deltaTime 表示一帧的间隔时间，根据设备配置和运行状况，这个变量的数值会不断变化。</p><p>假设运行帧率是 30 FPS，Time.deltaTime 的数值是 1&#x2F;30。</p><p>假设运行帧率是 60 FPS，Time.deltaTime 的数值是 1&#x2F;60。</p><p>Update 方法是每帧调用一次，假设 Cube 每帧移动的距离为 5，在每秒 30 帧的情况下，每秒移动的距离是 150。</p><p>而在每秒 60 帧的情况下，每秒移动的距离是 300。</p><p>也就是说，不同帧率的效果表现是不同的。</p><p>为了解决这个问题，乘上一个 Time.deltaTime，使得每秒移动的距离都变为常量 5，得到相同的表现效果。</p><h1 id="物体旋转"><a href="#物体旋转" class="headerlink" title="物体旋转"></a>物体旋转</h1><p>除了通过 Input.GetAxis 获取水平和垂直方向上的偏移量，还可以通过 Input.GetKey 获取键盘的其他按键。</p><p>例如，使用枚举 KeyCode.Q 获取键盘 Q 键，当 Q 键被持续按下时，持续修改 Y 轴 旋转角度，并使用 Quaternion.Euler 方法进行转换，使物体的旋转属性保持在一个正常的范围内，然后赋值给 transform.rotation。</p><p>反向同理。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">using</span> System.Collections;<br><span class="hljs-keyword">using</span> System.Collections.Generic;<br><span class="hljs-keyword">using</span> UnityEngine;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">PlayerController</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-comment">// ...</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">float</span> rotateSpeed = <span class="hljs-number">100f</span>;   <span class="hljs-comment">// 旋转速度</span><br>    <span class="hljs-keyword">public</span> Vector3 rotation;           <span class="hljs-comment">// 旋转角度</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Update</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-comment">// ...</span><br><br>        <span class="hljs-comment">// 按住 Q 键</span><br>        <span class="hljs-keyword">if</span> (Input.GetKey(KeyCode.Q))<br>        &#123;<br>            <span class="hljs-comment">// 持续修改 Y 轴 旋转角度（顺时针）</span><br>            rotation.y += rotateSpeed * Time.deltaTime;<br>            transform.rotation = Quaternion.Euler(rotation);<br>        &#125;<br>        <span class="hljs-comment">// 按住 E 键</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (Input.GetKey(KeyCode.E))<br>        &#123;<br>            <span class="hljs-comment">// 持续修改 Y 轴 旋转角度（逆时针）</span><br>            rotation.y -= rotateSpeed * Time.deltaTime;<br>            transform.rotation = Quaternion.Euler(rotation);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>旋转效果：</p><p><img src="/../images/unity-basic-2/%E6%97%8B%E8%BD%AC%E6%95%88%E6%9E%9C.gif"></p><h1 id="物体缩放"><a href="#物体缩放" class="headerlink" title="物体缩放"></a>物体缩放</h1><p>了解了键盘按键，可以再看看鼠标按键。</p><p>可以通过 Input.GetMouseButtonDown 方法获取鼠标按键按下的状态，传入 0 则是鼠标左键，传入 1 则是鼠标右键。</p><p>这里修改了 transform.localScale，让 Cube 放大或变回原样。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">using</span> System.Collections;<br><span class="hljs-keyword">using</span> System.Collections.Generic;<br><span class="hljs-keyword">using</span> UnityEngine;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">PlayerController</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-comment">// ...</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">float</span> bigger = <span class="hljs-number">2f</span>;    <span class="hljs-comment">// 缩放系数（放大）</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">float</span> normal = <span class="hljs-number">1f</span>;    <span class="hljs-comment">// 缩放系数（正常）</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Update</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-comment">// ...</span><br><br>        <span class="hljs-comment">// 按下鼠标左键</span><br>        <span class="hljs-keyword">if</span> (Input.GetMouseButtonDown(<span class="hljs-number">0</span>))<br>        &#123;<br>            transform.localScale = Vector3.one * bigger;<br>        &#125;<br>        <span class="hljs-comment">// 按下鼠标右键</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (Input.GetMouseButtonDown(<span class="hljs-number">1</span>))<br>        &#123;<br>            transform.localScale = Vector3.one * normal;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>缩放效果：</p><p><img src="/../images/unity-basic-2/%E7%BC%A9%E6%94%BE%E6%95%88%E6%9E%9C.gif"></p><h1 id="按键总结"><a href="#按键总结" class="headerlink" title="按键总结"></a>按键总结</h1><p>下面列举了一系列按键输入。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-comment">// 键盘</span><br>Input.GetKey(KeyCode.W)           <span class="hljs-comment">// 按住 W 键持续返回 true, 松开后返回 false</span><br>Input.GetKeyDown(KeyCode.W)       <span class="hljs-comment">// 按下 W 键返回 true，按住也只会返回 false</span><br>Input.GetKeyUp(KeyCode.W)         <span class="hljs-comment">// 抬起 W 键返回 true</span><br><br><span class="hljs-comment">// 注：这里的 Jump 在 Input Manager 里默认是空格键</span><br>Input.GetButton(<span class="hljs-string">&quot;Jump&quot;</span>)           <span class="hljs-comment">// 按住自定义的键持续返回 true, 松开后返回 false</span><br>Input.GetButtonDown(<span class="hljs-string">&quot;Jump&quot;</span>)       <span class="hljs-comment">// 按下自定义的键返回 true，按住也只会返回 false</span><br>Input.GetButtonUp(<span class="hljs-string">&quot;Jump&quot;</span>)         <span class="hljs-comment">// 抬起自定义的键返回 true</span><br><br>Input.GetAxis(<span class="hljs-string">&quot;Horizontal&quot;</span>)       <span class="hljs-comment">// AD 或左右方向键的偏移量 (从 0 到 1 变化，或从 0 到 -1 变化)</span><br>Input.GetAxis(<span class="hljs-string">&quot;Vertical&quot;</span>)         <span class="hljs-comment">// WS 或上下方向键的偏移量 (从 0 到 1 变化，或从 0 到 -1 变化)</span><br>    <br>Input.GetAxisRaw(<span class="hljs-string">&quot;Horizontal&quot;</span>)    <span class="hljs-comment">// AD 或左右方向键的偏移量 (-1 0 1)</span><br>Input.GetAxisRaw(<span class="hljs-string">&quot;Vertical&quot;</span>)      <span class="hljs-comment">// WS 或上下方向键的偏移量 (-1 0 1)</span><br><br><br><span class="hljs-comment">// 鼠标 0: 左键  1: 右键  2: 中键</span><br>Input.GetMouseButton(<span class="hljs-number">0</span>)       <span class="hljs-comment">// 按住鼠标左键</span><br>Input.GetMouseButtonDown(<span class="hljs-number">1</span>)   <span class="hljs-comment">// 按下鼠标右键</span><br>Input.GetMouseButtonUp(<span class="hljs-number">2</span>)     <span class="hljs-comment">// 抬起鼠标中键</span><br><br>Input.GetAxis(<span class="hljs-string">&quot;Mouse X&quot;</span>)      <span class="hljs-comment">// 鼠标水平方向移动的偏移量</span><br>Input.GetAxis(<span class="hljs-string">&quot;Mouse Y&quot;</span>)      <span class="hljs-comment">// 鼠标垂直方向移动的偏移量</span><br></code></pre></td></tr></table></figure><p>Input Manager 可以自定义按键名称和对应的键盘按键。</p><p><img src="/../images/unity-basic-2/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%89%E9%94%AE.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Unity3D</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Unity3D 基础 01 安装入门</title>
    <link href="/2024/02/18/unity-basic-1/"/>
    <url>/2024/02/18/unity-basic-1/</url>
    
    <content type="html"><![CDATA[<p>Unity3D 基础系列（第一期）</p><span id="more"></span><h1 id="安装编辑器"><a href="#安装编辑器" class="headerlink" title="安装编辑器"></a>安装编辑器</h1><p>Unity 中文官网：<a href="https://unity.cn/releases">https://unity.cn/releases</a></p><p>在官网找到想要安装的版本，点击<kbd>从Unity Hub下载</kbd></p><p><img src="/../images/unity-basic-1/%E5%AE%89%E8%A3%85hub.png"></p><p>如果电脑上没有安装 hub，就需要先安装好 hub，再点击上图的按钮，hub 会弹窗安装对应的编辑器版本。</p><p>如果需要打包到安卓手机，则需要安装 Android Build Support 模块。需要其他平台就勾选对应的模块。</p><p>如果只需要打包到 Windows 平台，可以不用勾选模块，默认是可以打包 Windows 程序的。</p><p><img src="/../images/unity-basic-1/%E5%AE%89%E8%A3%85%E6%A8%A1%E5%9D%97.png"></p><h1 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h1><p>安装完成之后，在 hub 界面点击右上角的<kbd>New project</kbd>创建项目。</p><p><img src="/../images/unity-basic-1/%E6%96%B0%E5%BB%BA%E9%A1%B9%E7%9B%AE.png"></p><p>默认是 3D 项目模板，修改一下 Project name（项目名称）和 Location（本地文件夹存放位置），点击右下角的<kbd>Create project</kbd>按钮开始创建新项目。</p><p><img src="/../images/unity-basic-1/%E6%96%B0%E9%A1%B9%E7%9B%AE%E6%A8%A1%E6%9D%BF.png"></p><p>项目创建完成后，可以在右上角的下拉列表中，选择一个自己喜欢的窗口布局。</p><p><img src="/../images/unity-basic-1/%E4%BF%AE%E6%94%B9%E7%AA%97%E5%8F%A3%E5%B8%83%E5%B1%80.png"></p><p>右键点击窗口的标签栏，还可以选择单列或双列的布局。</p><p><img src="/../images/unity-basic-1/%E4%BF%AE%E6%94%B9%E5%B0%8F%E7%AA%97%E5%8F%A3%E5%B8%83%E5%B1%80.png"></p><h1 id="认识窗口"><a href="#认识窗口" class="headerlink" title="认识窗口"></a>认识窗口</h1><p>主要的窗口有</p><ul><li>Scene（编辑场景）</li><li>Game（运行游戏）</li><li>Inspector（组件属性）</li><li>Hierarchy（物体层级）</li><li>Project（项目资源）</li><li>Console（调试输出）</li></ul><p>这六个基本的窗口可以在 Window 菜单里面找到并打开。</p><p><img src="/../images/unity-basic-1/%E6%89%93%E5%BC%80%E8%B0%83%E8%AF%95%E7%AA%97%E5%8F%A3.png"></p><p>通常会在 Hierarchy 窗口空白处，右键单击，可以创建一个 Cube 立方体或者其他物体。</p><p><img src="/../images/unity-basic-1/%E5%88%9B%E5%BB%BA%E7%AB%8B%E6%96%B9%E4%BD%93.png"></p><p>Project 窗口，则是右键单击 Assets 文件夹，展开 Create 菜单，可以看到很多选项，用于创建 unity 内置资源。</p><ul><li>Folder（创建文件夹）</li><li>C# Script（创建 C# 脚本）</li><li>Scene（创建场景）</li><li>Material（创建材质）</li><li>Animator Controller（创建动画控制器）</li><li>Animation（创建动画片段）</li></ul><p><img src="/../images/unity-basic-1/%E5%88%9B%E5%BB%BA%E8%B5%84%E6%BA%90.png"></p><p>需要导入外部资源时，也可以直接将资源拖到 Assets 文件夹下。</p><p><img src="/../images/unity-basic-1/%E5%AF%BC%E5%85%A5%E5%9B%BE%E7%89%87.png"></p><p>然后选中导入后的图片，可以在 Inspector 窗口看到图片资源的一些属性设置，通常会把图片的 Texture Type 改成 Sprite 类型，用于 2D Sprite 和 UI 图片，最后点击下方的 Apply 按钮确认修改。</p><p><img src="/../images/unity-basic-1/%E4%BF%AE%E6%94%B9%E5%9B%BE%E7%89%87%E7%B1%BB%E5%9E%8B.png"></p><p>在 Hierarchy 窗口空白处，右键单击，可以创建一个 Image 图片，修改它的 Source Image 属性，可以点击右侧的小圆圈按钮，选择刚刚导入的图片，或者直接把图片拖拽到 Source Image 处。</p><p>点击 Set Native Size 按钮，可以让图片自动设置成图片源本身的宽度和高度，具体数值也可以在右上角的 Rect Transform 组件属性里调整。</p><p>此时就可以在 Scene 窗口看到导入的图片了。</p><p>Scene 窗口有个 2D 按钮，可以切换成 2D 平面视角。</p><p><img src="/../images/unity-basic-1/UI%E6%98%BE%E7%A4%BA%E5%9B%BE%E7%89%87.png"></p><p>点击顶部的播放按钮，可以运行游戏，查看游戏运行效果。此时会自动跳转到 Game 窗口。</p><p>Game 窗口可以设置游戏运行的屏幕分辨率尺寸，点击下拉菜单最下方的 + 号，可以添加自定义的分辨率尺寸。</p><p><img src="/../images/unity-basic-1/%E8%BF%90%E8%A1%8C%E6%B8%B8%E6%88%8F.png"></p><p>每个窗口的位置也是可以自行调整的，例如，点击 Console 窗口的标签，按住鼠标左键，拖动到 Project 标签旁边，就可以让这两个窗口共用一个区域，点击窗口标签的时候会切换窗口显示。</p><p>Console 窗口是运行游戏时，显示代码脚本输出的一些调试信息，目前还没有写代码输出信息，所以这个窗口就是空白的。</p><p><img src="/../images/unity-basic-1/%E7%A7%BB%E5%8A%A8%E7%AA%97%E5%8F%A3%E6%A0%87%E7%AD%BE.png"></p><h1 id="插件管理"><a href="#插件管理" class="headerlink" title="插件管理"></a>插件管理</h1><p>在 Window 菜单，找到 Package Manager，打开插件包管理窗口。</p><p>Packages: Unity Registry 表示有经过 unity 注册认证过的插件，此处可以选择其他类型的筛选条件。</p><p>右上角的搜索框可以快速搜索到需要的插件，点击右下角的 Install 按钮安装插件。</p><p><img src="/../images/unity-basic-1/%E6%8F%92%E4%BB%B6%E7%AE%A1%E7%90%86.png"></p><p>Packages: In Project 可以查看当前项目里已安装的所有插件，可以对选中的插件进行升级或者移除。</p><p><img src="/../images/unity-basic-1/%E5%8D%87%E7%BA%A7%E6%88%96%E5%88%A0%E9%99%A4%E6%8F%92%E4%BB%B6.png"></p><h1 id="打包项目"><a href="#打包项目" class="headerlink" title="打包项目"></a>打包项目</h1><p>点击菜单栏的 File -&gt; Build Settings，点击 Add Open Scenes 把当前打开的场景添加到打包列表中，也可以自行从 Assets 文件夹中拖拽需要打包的场景，有勾选的场景会被打包，去掉勾选就不会被打包。</p><p>Platform 可以选择要打包的目标平台，默认是 Windows，如果需要打包到其他平台，就需要安装对应的模块。</p><p>最后点击 Build 按钮，选择一个存放的位置，进行打包。</p><p><img src="/../images/unity-basic-1/%E6%89%93%E5%8C%85%E8%AE%BE%E7%BD%AE.png"></p><p>Player Settings 可以修改一些打包参数，例如公司名称、项目名称、版本号、图标等等。</p><p><img src="/../images/unity-basic-1/%E6%89%93%E5%8C%85%E5%8F%82%E6%95%B0.png"></p><p>打包完成后，如果是 Windows 平台，可以双击 .exe 文件运行游戏。</p><p>打开游戏后，默认是全屏的，没有退出游戏按钮，可以直接按 Alt + F4 快捷键关闭游戏。</p><p><img src="/../images/unity-basic-1/%E8%BF%90%E8%A1%8C%E6%89%93%E5%8C%85%E5%90%8E%E7%9A%84%E6%B8%B8%E6%88%8F.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Unity3D</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C# 基础语法 07 抽象接口</title>
    <link href="/2024/02/12/csharp-basic-7/"/>
    <url>/2024/02/12/csharp-basic-7/</url>
    
    <content type="html"><![CDATA[<p>简单复习一下 C# 基础语法（第七期 完结）。</p><span id="more"></span><h1 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h1><p>抽象类是未完全实现逻辑的类，专门作为基类来使用，将具体逻辑推迟到合适的派生类去实现。</p><p>下面是一个具体类 FlyObject，包含一个虚方法 Fly，它可以有方法体，此时方法体内是空的，没有需要实现的逻辑。</p><p>由它衍生出两个具体类，Bird 和 Plane，它们都重写了 Fly 方法，并且加上了具体逻辑。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">FlyObject</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Fly</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Bird</span> : <span class="hljs-title">FlyObject</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Fly</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        Console.WriteLine(<span class="hljs-string">&quot;小鸟在飞行&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Plane</span> : <span class="hljs-title">FlyObject</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Fly</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        Console.WriteLine(<span class="hljs-string">&quot;飞机在飞行&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用时</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        FlyObject bird = <span class="hljs-keyword">new</span> Bird();<br>        bird.Fly();<br>        <span class="hljs-comment">// 小鸟在飞行</span><br><br>        FlyObject plane = <span class="hljs-keyword">new</span> Plane();<br>        plane.Fly();<br>        <span class="hljs-comment">// 飞机在飞行</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>由于基类 FlyObject 的 Fly 方法并没有具体实现逻辑，只是一个空的方法，此时可以将基类的 Fly 方法改成一个抽象方法，并去掉方法体。</p><p>因为包含了抽象方法，FlyObject 也需要加上 abstract 变成一个抽象类。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title">FlyObject</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Fly</span>(<span class="hljs-params"></span>)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>抽象类不能被实例化，需要有派生类继承它，通过派生类实例化。</p><p>继承了抽象类的派生类，必须通过重写，实现抽象方法。</p><h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><p>接口是完全未实现逻辑的“类”，只有方法成员。</p><p>和抽象类一样，接口也不能被实例化，需要有其他类去实现接口。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title">IFlyObject</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Fly</span>(<span class="hljs-params"></span>)</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Bird</span> : <span class="hljs-title">IFlyObject</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Fly</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        Console.WriteLine(<span class="hljs-string">&quot;小鸟在飞行&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Plane</span> : <span class="hljs-title">IFlyObject</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Fly</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        Console.WriteLine(<span class="hljs-string">&quot;飞机在飞行&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>接口约定以 I 为开头进行命名，接口内定义的方法成员必须是 public 的，可以省略不写。</p><p>实现接口的类，必须包含接口内定义的所有方法成员，并且不需要写 override。</p><p>使用时</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        IFlyObject bird = <span class="hljs-keyword">new</span> Bird();<br>        bird.Fly();<br><br>        IFlyObject plane = <span class="hljs-keyword">new</span> Plane();<br>        plane.Fly();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>和抽象类不同的是，抽象类只能继承一个，接口可以同时实现多个。</p>]]></content>
    
    
    
    <tags>
      
      <tag>C#</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C# 基础语法 06 委托事件</title>
    <link href="/2024/02/04/csharp-basic-6/"/>
    <url>/2024/02/04/csharp-basic-6/</url>
    
    <content type="html"><![CDATA[<p>简单复习一下 C# 基础语法（第六期）。</p><span id="more"></span><h1 id="委托"><a href="#委托" class="headerlink" title="委托"></a>委托</h1><p>委托是一个类，可以被实例化，包装一系列的方法，相当于一个方法的容器，可以作为参数传入其他方法。</p><h3 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h3><p>方法的参数列表内，有一个委托参数，方法体会调用这个委托参数。</p><p>而委托参数包装的是什么样的方法，则由外部传入的方法决定。</p><p>相当于一个填空题，借助外部的方法产生结果。</p><p>模板委托方法通常在代码的中间部分，有返回值。</p><p>定义一个 Person 类，包含人物的名字和正在思考的内容。</p><p>同时，定义一个 Answer 类，用来包装人物答题的内容。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Person</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> person;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> result;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> name, <span class="hljs-built_in">string</span> thinking</span>)</span><br><span class="hljs-function"></span>    &#123;<br>        person = name;<br>        result = thinking;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Answer <span class="hljs-title">Think</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        Answer answer = <span class="hljs-keyword">new</span> Answer();<br>        answer.person = person;<br>        answer.result = result;<br>        <span class="hljs-keyword">return</span> answer;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Answer</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> person;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p>再定义一个 Exam 类，输出答题人和答案。</p><p>其中，方法的参数是一个委托，Func 类是 C# 内部定义好的一个委托类，它可以有返回值，尖括号 &lt; &gt; 内填入返回值的类型。</p><p>在方法内部调用委托，得到 Answer 类型的返回值，把内容打印输出。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Exam</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">AnswerQuestion</span>(<span class="hljs-params">Func&lt;Answer&gt; solution</span>)</span><br><span class="hljs-function"></span>    &#123;<br>        Answer answer = solution.Invoke();<br>        Console.WriteLine(<span class="hljs-string">$&quot;答题人：<span class="hljs-subst">&#123;answer.person&#125;</span> 答案：<span class="hljs-subst">&#123;answer.result&#125;</span>&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>实际使用时，可以定义 Func 变量，new 一个委托实例，将一个实例的方法作为参数传入。</p><p>然后把委托变量传给 AnswerQuestion 方法，同一个方法，可以接收不同的委托变量，实现功能的复用。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        Exam exam = <span class="hljs-keyword">new</span> Exam();<br>        Person person1 = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;小明&quot;</span>, <span class="hljs-string">&quot;鸡排&quot;</span>);<br>        Person person2 = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;小红&quot;</span>, <span class="hljs-string">&quot;奶茶&quot;</span>);<br><br>        Func&lt;Answer&gt; func1 = <span class="hljs-keyword">new</span> Func&lt;Answer&gt;(person1.Think);<br>        Func&lt;Answer&gt; func2 = <span class="hljs-keyword">new</span> Func&lt;Answer&gt;(person2.Think);<br><br>        exam.AnswerQuestion(func1);<br>        exam.AnswerQuestion(func2);<br>        <br>        <span class="hljs-comment">// 答题人：小明 答案：鸡排</span><br>        <span class="hljs-comment">// 答题人：小红 答案：奶茶</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="回调"><a href="#回调" class="headerlink" title="回调"></a>回调</h3><p>同样，方法的参数列表内，有一个委托参数。</p><p>在执行完一系列代码之后，调用外部方法进行回调。</p><p>回调委托方法通常在代码的末尾部分，无返回值。</p><p>继续上面的例子，添加一个 Logger 类，用于答题后的信息提示。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Logger</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> message;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Logger</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> message</span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-keyword">this</span>.message = message;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Log</span>(<span class="hljs-params"></span>) </span><br><span class="hljs-function"></span>    &#123;<br>        Console.WriteLine(message);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>扩展 AnswerQuestion 的参数列表，并在打印答题结果之后进行回调。</p><p>Action 类也是 C# 内部定义好的一个委托类，无返回值。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Exam</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">AnswerQuestion</span>(<span class="hljs-params">Func&lt;Answer&gt; solution, Action callback</span>)</span><br><span class="hljs-function"></span>    &#123;<br>        Answer answer = solution.Invoke();<br>        Console.WriteLine(<span class="hljs-string">$&quot;答题人：<span class="hljs-subst">&#123;answer.person&#125;</span> 答案：<span class="hljs-subst">&#123;answer.result&#125;</span>&quot;</span>);<br>        callback.Invoke();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>实例化 Logger 类，填入信息提示。</p><p>可以定义 Action 变量并实例化，传入 Logger 类的 Log 方法。</p><p>然后把 action 变量作为参数，作为回调方法传入 AnswerQuestion 方法中。</p><p>现在每次打印答题结果之后，都会有答题成功的信息提示。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        Exam exam = <span class="hljs-keyword">new</span> Exam();<br>        Person person1 = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;小明&quot;</span>, <span class="hljs-string">&quot;鸡排&quot;</span>);<br>        Person person2 = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;小红&quot;</span>, <span class="hljs-string">&quot;奶茶&quot;</span>);<br><br>        Func&lt;Answer&gt; func1 = <span class="hljs-keyword">new</span> Func&lt;Answer&gt;(person1.Think);<br>        Func&lt;Answer&gt; func2 = <span class="hljs-keyword">new</span> Func&lt;Answer&gt;(person2.Think);<br><br>        Logger logger = <span class="hljs-keyword">new</span> Logger(<span class="hljs-string">&quot;答题成功&quot;</span>);<br>        Action action = <span class="hljs-keyword">new</span> Action(logger.Log);<br><br>        exam.AnswerQuestion(func1, action);<br>        exam.AnswerQuestion(func2, action);<br>        <br>        <span class="hljs-comment">// 答题人：小明 答案：鸡排</span><br>        <span class="hljs-comment">// 答题成功</span><br>        <span class="hljs-comment">// 答题人：小红 答案：奶茶</span><br>        <span class="hljs-comment">// 答题成功</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="多播"><a href="#多播" class="headerlink" title="多播"></a>多播</h3><p>委托是一对多的，也就是说，可以包装多个方法，当委托被调用时，会有多个方法被同时调用，调用的顺序则是方法被填入委托变量时的顺序。</p><p>在上述的例子进行扩展，再实例化一个 Logger，会提示【请继续答题】，并且使用 +&#x3D; 符号给 action 变量再添加一个方法引用。</p><p>此时回调方法会输出两行。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-comment">// ...</span><br><br>        Logger logger1 = <span class="hljs-keyword">new</span> Logger(<span class="hljs-string">&quot;答题成功&quot;</span>);<br>        Logger logger2 = <span class="hljs-keyword">new</span> Logger(<span class="hljs-string">&quot;请继续答题&quot;</span>);<br>        Action action = <span class="hljs-keyword">new</span> Action(logger1.Log);<br>        action += logger2.Log;<br><br>        exam.AnswerQuestion(func1, action);<br>        exam.AnswerQuestion(func2, action);<br>        <br>        <span class="hljs-comment">// 答题人：小明 答案：鸡排</span><br>        <span class="hljs-comment">// 答题成功</span><br>        <span class="hljs-comment">// 请继续答题</span><br>        <span class="hljs-comment">// 答题人：小红 答案：奶茶</span><br>        <span class="hljs-comment">// 答题成功</span><br>        <span class="hljs-comment">// 请继续答题</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h1><p>事件是在委托的基础上，对委托的访问进行限制，事件的右侧只能是 +&#x3D; 或 -&#x3D; 符号，不能被 &#x3D; 符号直接覆盖，也不能被 .Invoke 调用。</p><p>接着上述的例子，自定义一个 SubmitEventHandler 委托，和一个 SubmitSystem 类。</p><p>SubmitSystem 类包含一个委托字段，和一个事件。</p><p>事件必须同时包含 add 和 remove，对委托字段进行添加方法和移除方法。</p><p>同时，因为委托字段是私有的，外部无法调用，事件也不能被调用，所以提供一个方法 TriggerSubmit 对委托字段进行调用。</p><blockquote><p>注意：如果 submitEventHandler 没有包含任何方法，则会是 null，需要进行判空。</p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">delegate</span> <span class="hljs-keyword">void</span> <span class="hljs-title">SubmitEventHandler</span>(<span class="hljs-params"></span>)</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">SubmitSystem</span><br>&#123;<br>    <span class="hljs-keyword">private</span> SubmitEventHandler submitEventHandler;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">event</span> SubmitEventHandler OnSubmit<br>    &#123;<br>        <span class="hljs-keyword">add</span><br>        &#123;<br>            submitEventHandler += <span class="hljs-keyword">value</span>;<br>        &#125;<br>        <span class="hljs-keyword">remove</span><br>        &#123;<br>            submitEventHandler -= <span class="hljs-keyword">value</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">TriggerSubmit</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-keyword">if</span> (submitEventHandler != <span class="hljs-literal">null</span>)<br>        &#123;<br>            submitEventHandler.Invoke();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>现在，继续添加主程序的逻辑。</p><p>实例化 submitSystem 变量，给它的事件添加两个方法，并通过 TriggerSubmit 调用被事件保护起来的私有委托。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-comment">// ...</span><br>        <br>        Logger logger3 = <span class="hljs-keyword">new</span> Logger(<span class="hljs-string">&quot;小明提交了试卷&quot;</span>);<br>        Logger logger4 = <span class="hljs-keyword">new</span> Logger(<span class="hljs-string">&quot;小红提交了试卷&quot;</span>);<br>        <br>        SubmitSystem submitSystem = <span class="hljs-keyword">new</span> SubmitSystem();<br>        submitSystem.OnSubmit += logger3.Log;<br>        submitSystem.OnSubmit += logger4.Log;<br>        <br>        submitSystem.TriggerSubmit();<br>        <br>        <span class="hljs-comment">// ...</span><br>        <span class="hljs-comment">// 小明提交了试卷</span><br>        <span class="hljs-comment">// 小红提交了试卷</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上述事件的定义是一个完整定义，实际上可以简化。</p><p>可以直接定义事件，无需定义私有委托字段，也无需为事件添加 add 和 remove 访问器。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">delegate</span> <span class="hljs-keyword">void</span> <span class="hljs-title">SubmitEventHandler</span>(<span class="hljs-params"></span>)</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">SubmitSystem</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">event</span> SubmitEventHandler OnSubmit;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">TriggerSubmit</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-keyword">if</span> (OnSubmit != <span class="hljs-literal">null</span>)<br>        &#123;<br>            OnSubmit.Invoke();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>此时，事件的右侧似乎可以被 .Invoke 调用，还可以判空。</p><p>实际上，因为 C# 会在编译时自动生成私有委托字段，但是编写代码时并没有私有委托字段，所以不得不使用事件来触发调用，不过外部对事件的访问依然只能是 +&#x3D; 和 -&#x3D; 符号。</p>]]></content>
    
    
    
    <tags>
      
      <tag>C#</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C# 基础语法 05 泛型集合</title>
    <link href="/2024/01/28/csharp-basic-5/"/>
    <url>/2024/01/28/csharp-basic-5/</url>
    
    <content type="html"><![CDATA[<p>简单复习一下 C# 基础语法（第五期）。</p><span id="more"></span><h1 id="泛型集合"><a href="#泛型集合" class="headerlink" title="泛型集合"></a>泛型集合</h1><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><p>泛型是一个类型占位符，在定义泛型类的时候，可以先使用一个字母 T 占位，在实际使用时，需要传入一个具体的类型替代 T。</p><p>例如，定义一个泛型类，后面的尖括号 &lt; &gt; 先填 T，并且使用 T 声明一个变量 myType，在构造函数给 myType 赋值。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">MyGeneric</span>&lt;<span class="hljs-title">T</span>&gt;<br>&#123;<br>    <span class="hljs-keyword">public</span> T myType;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyGeneric</span>(<span class="hljs-params">T type</span>)</span><br><span class="hljs-function"></span>    &#123;<br>        myType = type;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用时，需要填入具体的类型替代 T。</p><p>通过 myType 字段的 GetType 方法，查看它的数据类型。</p><p>填入 int 的泛型实例，它的 myType 字段的类型是 System.Int32。</p><p>填入 string 的泛型实例，它的 myType 字段的类型是 System.String。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        MyGeneric&lt;<span class="hljs-built_in">int</span>&gt; myGenericInt = <span class="hljs-keyword">new</span> MyGeneric&lt;<span class="hljs-built_in">int</span>&gt;(<span class="hljs-number">1</span>);<br>        Console.WriteLine(myGenericInt.myType.GetType());<br>        <span class="hljs-comment">// System.Int32</span><br><br>        MyGeneric&lt;<span class="hljs-built_in">string</span>&gt; myGenericString = <span class="hljs-keyword">new</span> MyGeneric&lt;<span class="hljs-built_in">string</span>&gt;(<span class="hljs-string">&quot;小明&quot;</span>);<br>        Console.WriteLine(myGenericString.myType.GetType());<br>        <span class="hljs-comment">// System.String</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样，泛型类就可以通过填入不同的数据类型，提升代码的复用性，无需将类型写死。</p><h2 id="列表（List）"><a href="#列表（List）" class="headerlink" title="列表（List）"></a>列表（List）</h2><p>列表是数组的扩展，内部实现是以数组为基础的。</p><p>列表的使用方法主要有：</p><ol><li>添加元素（Add）</li><li>访问元素（[]）</li><li>删除元素（Remove）</li><li>清空列表（Clear）</li></ol><p>使用 List 声明一个列表，尖括号 &lt; &gt; 内填入数据类型。</p><p>使用 Add 添加三个元素，并用 for 循环访问每个元素，打印输出。其中，Count 可以获取列表的长度。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        List&lt;<span class="hljs-built_in">int</span>&gt; nums = <span class="hljs-keyword">new</span> List&lt;<span class="hljs-built_in">int</span>&gt;();<br>        nums.Add(<span class="hljs-number">1</span>);<br>        nums.Add(<span class="hljs-number">2</span>);<br>        nums.Add(<span class="hljs-number">3</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.Count; i++)<br>        &#123;<br>            Console.WriteLine(nums[i]);<br>        &#125;<br>        <br>        <span class="hljs-comment">// 1</span><br>        <span class="hljs-comment">// 2</span><br>        <span class="hljs-comment">// 3</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用 Remove 删除一个元素，后续的元素都会往前移动，列表长度减少。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        List&lt;<span class="hljs-built_in">int</span>&gt; nums = <span class="hljs-keyword">new</span> List&lt;<span class="hljs-built_in">int</span>&gt;();<br>        nums.Add(<span class="hljs-number">1</span>);<br>        nums.Add(<span class="hljs-number">2</span>);<br>        nums.Add(<span class="hljs-number">3</span>);<br>        nums.Remove(<span class="hljs-number">2</span>);<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.Count; i++)<br>        &#123;<br>            Console.WriteLine(nums[i]);<br>        &#125;<br>        <br>        <span class="hljs-comment">// 1</span><br>        <span class="hljs-comment">// 3</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用 Clear 清空列表。</p><p>打印列表的长度，输出 0，表示列表中没有任何元素了。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        List&lt;<span class="hljs-built_in">int</span>&gt; nums = <span class="hljs-keyword">new</span> List&lt;<span class="hljs-built_in">int</span>&gt;();<br>        nums.Add(<span class="hljs-number">1</span>);<br>        nums.Add(<span class="hljs-number">2</span>);<br>        nums.Add(<span class="hljs-number">3</span>);<br>        Console.WriteLine(nums.Count);<br>        <span class="hljs-comment">// 3</span><br>        <br>        nums.Clear();<br>        Console.WriteLine(nums.Count);<br>        <span class="hljs-comment">// 0</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="字典（Dictionary）"><a href="#字典（Dictionary）" class="headerlink" title="字典（Dictionary）"></a>字典（Dictionary）</h2><p>字典存储一系列键值对，通过 key 值，可以快速获取到对应的 value 值。</p><p>和列表类似，字典的使用方法主要有：</p><ol><li>添加元素（Add）</li><li>访问元素（[]）</li><li>删除元素（Remove）</li><li>判断是否包含某个 key 值（ContainsKey）</li><li>清空列表（Clear）</li></ol><p>使用 Dictionary 声明一个字典，尖括号 &lt; &gt; 内填入两个数据类型，第一个是 key，第二个是 value。</p><p>使用 Add 添加三个元素，记录每个学生的分数。</p><p>通过 [] 访问字典元素，填入 key 值获取 value 值。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        Dictionary&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">int</span>&gt; scores = <span class="hljs-keyword">new</span> Dictionary&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">int</span>&gt;();<br>        scores.Add(<span class="hljs-string">&quot;小明&quot;</span>, <span class="hljs-number">60</span>);<br>        scores.Add(<span class="hljs-string">&quot;小红&quot;</span>, <span class="hljs-number">80</span>);<br>        scores.Add(<span class="hljs-string">&quot;小坤&quot;</span>, <span class="hljs-number">100</span>);<br><br>        Console.WriteLine(<span class="hljs-string">&quot;小明的分数：&quot;</span> + scores[<span class="hljs-string">&quot;小明&quot;</span>]);<br>        Console.WriteLine(<span class="hljs-string">&quot;小红的分数：&quot;</span> + scores[<span class="hljs-string">&quot;小红&quot;</span>]);<br>        Console.WriteLine(<span class="hljs-string">&quot;小坤的分数：&quot;</span> + scores[<span class="hljs-string">&quot;小坤&quot;</span>]);<br>        <br>        <span class="hljs-comment">// 小明的分数：60</span><br>        <span class="hljs-comment">// 小红的分数：80</span><br>        <span class="hljs-comment">// 小坤的分数：100</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用 Remove 删除某个 key 对应的元素之后，再次使用此 key 值去访问字典，则会报错。</p><p>所以通常要判断字典是否包含某个 key 值，才能去访问。</p><p>例如，从 scores 字典中删除小红的数据，如果直接访问 scores[“小红”] 会报错，需要使用 ContainsKey 判断一下是否包含小红的数据。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        Dictionary&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">int</span>&gt; scores = <span class="hljs-keyword">new</span> Dictionary&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">int</span>&gt;();<br>        scores.Add(<span class="hljs-string">&quot;小明&quot;</span>, <span class="hljs-number">60</span>);<br>        scores.Add(<span class="hljs-string">&quot;小红&quot;</span>, <span class="hljs-number">80</span>);<br>        scores.Add(<span class="hljs-string">&quot;小坤&quot;</span>, <span class="hljs-number">100</span>);<br><br>        Console.WriteLine(<span class="hljs-string">&quot;小明的分数：&quot;</span> + scores[<span class="hljs-string">&quot;小明&quot;</span>]);<br>        Console.WriteLine(<span class="hljs-string">&quot;小坤的分数：&quot;</span> + scores[<span class="hljs-string">&quot;小坤&quot;</span>]);<br><br>        scores.Remove(<span class="hljs-string">&quot;小红&quot;</span>);<br><br>        <span class="hljs-keyword">if</span> (scores.ContainsKey(<span class="hljs-string">&quot;小红&quot;</span>))<br>        &#123;<br>            Console.WriteLine(<span class="hljs-string">&quot;小红的分数：&quot;</span> + scores[<span class="hljs-string">&quot;小红&quot;</span>]);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用 Clear 清空字典。</p><p>字典同样有 Count 属性，获取字典的键值对的个数。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        Dictionary&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">int</span>&gt; scores = <span class="hljs-keyword">new</span> Dictionary&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">int</span>&gt;();<br>        scores.Add(<span class="hljs-string">&quot;小明&quot;</span>, <span class="hljs-number">60</span>);<br>        scores.Add(<span class="hljs-string">&quot;小红&quot;</span>, <span class="hljs-number">80</span>);<br>        scores.Add(<span class="hljs-string">&quot;小坤&quot;</span>, <span class="hljs-number">100</span>);<br>        Console.WriteLine(scores.Count);<br>        <span class="hljs-comment">// 3</span><br>        <br>        scores.Clear();<br>        Console.WriteLine(scores.Count);<br>        <span class="hljs-comment">// 0</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>C#</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C# 基础语法 04 值和引用</title>
    <link href="/2024/01/21/csharp-basic-4/"/>
    <url>/2024/01/21/csharp-basic-4/</url>
    
    <content type="html"><![CDATA[<p>简单复习一下 C# 基础语法（第四期）。</p><span id="more"></span><h1 id="值类型和引用类型"><a href="#值类型和引用类型" class="headerlink" title="值类型和引用类型"></a>值类型和引用类型</h1><p>值类型，直接存储数据。</p><p>引用类型，存储内存地址，通过地址找到数据。</p><p>值类型：int，float，double，bool，char 等等。</p><p>引用类型：string，class 等等。</p><p>值类型赋值时，会创建值的副本。</p><p>修改值类型变量，不会影响其他值类型变量。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-built_in">int</span> x = <span class="hljs-number">1</span>;<br>        <span class="hljs-built_in">int</span> y = x;<br>        x = <span class="hljs-number">0</span>;<br>        Console.WriteLine(<span class="hljs-string">&quot;x = &quot;</span> + x);<br>        Console.WriteLine(<span class="hljs-string">&quot;y = &quot;</span> + y);<br>        <br>        <span class="hljs-comment">// x = 0</span><br>        <span class="hljs-comment">// y = 1</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>引用类型，两个变量引用的对象相同时，对其中一个变量引用的对象进行修改，另一个变量引用的对象也发生了变化。</p><p>因为这两个变量只是存储了一个地址，指向同一块数据区域。</p><p>就好比，两个人使用同一个银行账户，一个人取走了全部的钱，另一个人就没钱了。</p><p>例如，有一个账户类，包含余额字段，存钱、取钱、查询余额的方法。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Account</span><br>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">float</span> money;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Save</span>(<span class="hljs-params"><span class="hljs-built_in">float</span> money</span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-keyword">if</span> (money &gt; <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-keyword">this</span>.money += money;<br>            Console.WriteLine(<span class="hljs-string">&quot;存入 &quot;</span> + money);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Draw</span>(<span class="hljs-params"><span class="hljs-built_in">float</span> money</span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-keyword">if</span> (money &gt; <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.money &gt;= money)<br>            &#123;<br>                <span class="hljs-keyword">this</span>.money -= money;<br>                Console.WriteLine(<span class="hljs-string">&quot;取出 &quot;</span> + money);<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                Console.WriteLine(<span class="hljs-string">&quot;余额不足&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Query</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        Console.WriteLine(<span class="hljs-string">&quot;余额 &quot;</span> + money);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>现在创建一个账户对象，赋值给 myAccount，接着再赋值给 herAccount，两个 Account 变量引用的是同一个对象。</p><p>在我的账户存入 10 元，从她的账户取出 10 元，我的账户余额 0 元。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        Account myAccount = <span class="hljs-keyword">new</span> Account();    <span class="hljs-comment">// 我的账户</span><br>        Account herAccount = myAccount;       <span class="hljs-comment">// 她的账户</span><br><br>        myAccount.Save(<span class="hljs-number">10f</span>);    <span class="hljs-comment">// 我的账户存入 10 元</span><br>        herAccount.Draw(<span class="hljs-number">10f</span>);   <span class="hljs-comment">// 她的账户取出 10 元</span><br>        myAccount.Query();      <span class="hljs-comment">// 我的账户余额  0 元</span><br>        <br>        <span class="hljs-comment">// 存入 10</span><br>        <span class="hljs-comment">// 取出 10</span><br>        <span class="hljs-comment">// 余额 0</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="装箱和拆箱"><a href="#装箱和拆箱" class="headerlink" title="装箱和拆箱"></a>装箱和拆箱</h1><p>装箱，把值类型转换成引用类型。</p><p>拆箱，把引用类型转换成值类型。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-built_in">int</span> i = <span class="hljs-number">1</span>;<br>        <br>        <span class="hljs-built_in">object</span> obj = i;     <span class="hljs-comment">// 装箱</span><br>        <br>        <span class="hljs-built_in">int</span> j = (<span class="hljs-built_in">int</span>)obj;   <span class="hljs-comment">// 拆箱</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>有时候为了通用，会把方法的参数类型定义为 object，当传入一个值类型参数时，就会需要装箱。</p><p>由于装箱会生成新的对象，对运行效率有一定影响，一般是尽量避免装箱和拆箱的。</p><p>装箱和拆箱时，对两个变量的值进行修改，是互不影响的。</p><h1 id="ref-和-out"><a href="#ref-和-out" class="headerlink" title="ref 和 out"></a>ref 和 out</h1><p>通常，当方法的参数是值类型时，外部传入的变量和方法体内的参数变量，是分别独立的，对方法体内的参数变量修改时，不会影响到外部的变量。</p><p>这是因为方法内的形参，只是外部传入的实参的一个副本。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>;<br>        Add(i);<br>        Console.WriteLine(<span class="hljs-string">&quot;i = &quot;</span> + i);<br>        <br>        <span class="hljs-comment">// i = 0</span><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Add</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> i</span>)</span><br><span class="hljs-function"></span>    &#123;<br>        i++;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果要实现当 i 传入 Add 方法内，执行之后 i 的数值增加，则需要使用 ref 关键字。</p><p>方法的参数类型前面要加个 ref，调用方法时，传入的参数前面也要加个 ref。</p><p>此时，i 变成了按引用传参，在方法内对 i 进行修改，同时也会影响到外部的 i。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>;<br>        Add(<span class="hljs-keyword">ref</span> i);<br>        Console.WriteLine(<span class="hljs-string">&quot;i = &quot;</span> + i);<br>        <br>        <span class="hljs-comment">// i = 1</span><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Add</span>(<span class="hljs-params"><span class="hljs-keyword">ref</span> <span class="hljs-built_in">int</span> i</span>)</span><br><span class="hljs-function"></span>    &#123;<br>        i++;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>需要注意的是，外部的 i 需要赋初始值，如果没有赋值，则会报错。</p><p>ref 的特点是有进有出，需要先赋值，再传入，有输出。</p><p>out 也是按引用传参，不过 out 只是用来输出多个参数。</p><p>out 的特点是只出不进，不需要先赋值，方法会把内部的数值输出到外部的变量，即使赋初始值，也会被输出的数值覆盖。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-built_in">int</span> i;<br>        <span class="hljs-built_in">int</span> j = <span class="hljs-number">3</span>;<br>        Add(<span class="hljs-keyword">out</span> i, <span class="hljs-keyword">out</span> j);<br>        Console.WriteLine(<span class="hljs-string">&quot;i = &quot;</span> + i);<br>        Console.WriteLine(<span class="hljs-string">&quot;j = &quot;</span> + j);<br>        <br>        <span class="hljs-comment">// i = 1</span><br>        <span class="hljs-comment">// j = 2</span><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Add</span>(<span class="hljs-params"><span class="hljs-keyword">out</span> <span class="hljs-built_in">int</span> i, <span class="hljs-keyword">out</span> <span class="hljs-built_in">int</span> j</span>)</span><br><span class="hljs-function"></span>    &#123;<br>        i = <span class="hljs-number">1</span>;<br>        j = <span class="hljs-number">2</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>C#</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C# 基础语法 03 面向对象</title>
    <link href="/2024/01/14/csharp-basic-3/"/>
    <url>/2024/01/14/csharp-basic-3/</url>
    
    <content type="html"><![CDATA[<p>简单复习一下 C# 基础语法（第三期）。</p><span id="more"></span><h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><p>隐藏对象的信息，留出访问的接口，保护字段不被随意修改。</p><p>C# 的属性就是用来实现封装的。</p><p>例如，Hero 类有一个只读的等级属性，只能获取到英雄等级，而不能直接对等级进行修改。</p><p>如果要对英雄等级进行修改，只能通过给经验属性赋值，在类的内部进行经验和等级的转换。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Hero</span><br>&#123;<br>    <span class="hljs-comment">// 英雄等级 只读</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> level;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> Level<br>    &#123;<br>        <span class="hljs-keyword">get</span> &#123; <span class="hljs-keyword">return</span> level; &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 经验等级转换</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> factor = <span class="hljs-number">1000</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> Experience<br>    &#123;<br>        <span class="hljs-keyword">get</span><br>        &#123;<br>            <span class="hljs-keyword">return</span> level * factor;<br>        &#125;<br>        <span class="hljs-keyword">set</span><br>        &#123;<br>            level = Math.Abs(<span class="hljs-keyword">value</span> / factor);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>创建英雄对象，给他增加经验值，查看他的等级。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        Hero hero = <span class="hljs-keyword">new</span> Hero();<br>        hero.Experience = <span class="hljs-number">10000</span>;<br>        Console.WriteLine(<span class="hljs-string">&quot;英雄等级：&quot;</span> + hero.Level);<br>        Console.WriteLine(<span class="hljs-string">&quot;英雄经验：&quot;</span> + hero.Experience);<br>        <br>        <span class="hljs-comment">// 英雄等级：10</span><br>        <span class="hljs-comment">// 英雄经验：10000</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>一个类继承另一个类，它就拥有了另一个类的所有字段、属性和方法。</p><p>继承的类叫子类（或派生类），被继承的类叫父类（或基类）。</p><p>继承可以减少代码重复，提升代码的复用性。</p><p>现在出现了两位英雄，他们都继承了 Hero 类，并且类的内部没有定义任何成员字段、属性和方法。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> 剑圣</span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Blademaster</span> : <span class="hljs-title">Hero</span><br>&#123;<br><br>&#125;<br><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> 大魔法师</span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Archmage</span> : <span class="hljs-title">Hero</span><br>&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>分别创建剑圣和大魔法师对象，给他们增加不同的经验值，查看他们的等级。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        Blademaster blademaster = <span class="hljs-keyword">new</span> Blademaster();<br>        blademaster.Experience = <span class="hljs-number">10000</span>;<br>        Console.WriteLine(<span class="hljs-string">&quot;剑圣等级：&quot;</span> + blademaster.Level);<br>        Console.WriteLine(<span class="hljs-string">&quot;剑圣经验：&quot;</span> + blademaster.Experience);<br><br>        Archmage archmage = <span class="hljs-keyword">new</span> Archmage();<br>        archmage.Experience = <span class="hljs-number">20000</span>;<br>        Console.WriteLine(<span class="hljs-string">&quot;大魔法师等级：&quot;</span> + archmage.Level);<br>        Console.WriteLine(<span class="hljs-string">&quot;大魔法师经验：&quot;</span> + archmage.Experience);<br>        <br>        <span class="hljs-comment">// 剑圣等级：10</span><br>        <span class="hljs-comment">// 剑圣经验：10000</span><br>        <span class="hljs-comment">// 大魔法师等级：20</span><br>        <span class="hljs-comment">// 大魔法师经验：20000</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p>多态是在继承的基础上，子类重写父类的方法，使用父类的类型声明变量，引用子类的实例对象，从而产生类型代差，调用同样的方法，却产生不一样的行为。</p><p>现在给英雄增加一个攻击的方法，这个方法需要使用 virtual 修饰符，是一个虚方法，表示可以被重写。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> 英雄</span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Hero</span><br>&#123;<br>    <span class="hljs-comment">// ...</span><br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Attack</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        Console.WriteLine(<span class="hljs-string">&quot;英雄攻击&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>让剑圣和大魔法师重写父类的攻击方法，重写方法需要使用 override 修饰符。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> 剑圣</span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Blademaster</span> : <span class="hljs-title">Hero</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Attack</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        Console.WriteLine(<span class="hljs-string">&quot;致命一击&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> 大魔法师</span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Archmage</span> : <span class="hljs-title">Hero</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Attack</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        Console.WriteLine(<span class="hljs-string">&quot;暴风雪&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>现在，声明 Hero 类型的变量，引用不同类型的实例对象，调用 Attack。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-comment">// 普通英雄</span><br>        Hero hero = <span class="hljs-keyword">new</span> Hero();<br>        hero.Attack();<br><br>        <span class="hljs-comment">// 剑圣</span><br>        Hero blademaster = <span class="hljs-keyword">new</span> Blademaster();<br>        blademaster.Attack();<br><br>        <span class="hljs-comment">// 大魔法师</span><br>        Hero archmage = <span class="hljs-keyword">new</span> Archmage();<br>        archmage.Attack();<br>        <br>        <span class="hljs-comment">// 英雄攻击</span><br>        <span class="hljs-comment">// 致命一击</span><br>        <span class="hljs-comment">// 暴风雪</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里之所以可以使用 Hero 变量引用 Blademaster 和 Archmage 对象，是因为他们继承了 Hero 类。</p><p>可以说剑圣是一个英雄，但反过来不行，英雄不一定是剑圣。</p><blockquote><p>如果反过来写，Blademaster blademaster &#x3D; new Hero(); 则会报错：无法将类型 Hero 隐式转换为 Blademaster。</p><p>如果要强制类型转换，运行起来也会报错，无法将 Hero 强制转换为 Blademaster：Unhandled exception. System.InvalidCastException: Unable to cast object of type ‘Hero’ to type ‘Blademaster’.</p></blockquote><p>同时，也可以使用数组统一管理。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        Hero hero = <span class="hljs-keyword">new</span> Hero();<br>        Hero blademaster = <span class="hljs-keyword">new</span> Blademaster();<br>        Hero archmage = <span class="hljs-keyword">new</span> Archmage();<br><br>        Hero[] heros = &#123; hero, blademaster, archmage &#125;;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; heros.Length; i++)<br>        &#123;<br>            heros[i].Attack();<br>        &#125;<br>        <br>        <span class="hljs-comment">// 英雄攻击</span><br>        <span class="hljs-comment">// 致命一击</span><br>        <span class="hljs-comment">// 暴风雪</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>多态重写方法，实际上是在继承链上调用该方法的最新版本。</p><p>现在新增一个狂暴剑圣，继承了剑圣，也重写了 Attack 方法。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> 狂暴剑圣</span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">BerserkBlademaster</span> : <span class="hljs-title">Blademaster</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Attack</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        Console.WriteLine(<span class="hljs-string">&quot;剑刃风暴&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>跟往常一样声明 Hero 类型变量，引用子类实例，调用方法。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        Hero hero = <span class="hljs-keyword">new</span> Hero();<br>        Hero blademaster = <span class="hljs-keyword">new</span> Blademaster();<br>        Hero berserkBlademaster = <span class="hljs-keyword">new</span> BerserkBlademaster();<br>        <br>        hero.Attack();<br>        blademaster.Attack();<br>        berserkBlademaster.Attack();<br>        <br>        <span class="hljs-comment">// 英雄攻击</span><br>        <span class="hljs-comment">// 致命一击</span><br>        <span class="hljs-comment">// 剑刃风暴</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果狂暴剑圣没有重写 Attack 方法，而是声明了一个相同名字的方法。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> 狂暴剑圣</span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">BerserkBlademaster</span> : <span class="hljs-title">Blademaster</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Attack</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        Console.WriteLine(<span class="hljs-string">&quot;剑刃风暴&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>那么狂暴剑圣对象被 Hero 类型变量引用时，调用 Attack 方法，此时该方法被重写后的最新版本是剑圣的 Attack 方法，不会输出剑刃风暴，而是致命一击。</p><p>除非用狂暴剑圣本来的类型，才会输出剑刃风暴。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        Hero hero = <span class="hljs-keyword">new</span> Hero();<br>        Hero blademaster = <span class="hljs-keyword">new</span> Blademaster();<br>        Hero berserkBlademaster = <span class="hljs-keyword">new</span> BerserkBlademaster();<br>        <br>        hero.Attack();<br>        blademaster.Attack();<br>        berserkBlademaster.Attack();<br>        <br>        <span class="hljs-comment">// 英雄攻击</span><br>        <span class="hljs-comment">// 致命一击</span><br>        <span class="hljs-comment">// 致命一击</span><br>        <br>        BerserkBlademaster berserkBlademaster2 = <span class="hljs-keyword">new</span> BerserkBlademaster();<br>        berserkBlademaster2.Attack();<br>        <br>        <span class="hljs-comment">// 剑刃风暴</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>C#</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C# 基础语法 02 属性方法</title>
    <link href="/2024/01/07/csharp-basic-2/"/>
    <url>/2024/01/07/csharp-basic-2/</url>
    
    <content type="html"><![CDATA[<p>简单复习一下 C# 基础语法（第二期）。</p><span id="more"></span><h1 id="类"><a href="#类" class="headerlink" title="类"></a>类</h1><p>类包含字段、属性和方法，是一个抽象概念。</p><p>对象是类的一个实例。</p><h2 id="字段和属性"><a href="#字段和属性" class="headerlink" title="字段和属性"></a>字段和属性</h2><p>字段和属性定义了对象的特征。</p><p>声明一个学生类，包含若干个字段和属性。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-built_in">enum</span> Gender<br>&#123;<br>    Boy,<br>    Girl<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Student</span><br>&#123;<br>    <span class="hljs-comment">// 字段</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> name;    <span class="hljs-comment">// 姓名（公开）</span><br>    <span class="hljs-keyword">public</span> Gender gender;  <span class="hljs-comment">// 性别（公开）</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> age;       <span class="hljs-comment">// 年龄（私有）</span><br><br>    <span class="hljs-comment">// 属性</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> Age<br>    &#123;<br>        <span class="hljs-keyword">get</span> <span class="hljs-comment">// 可以获取年龄字段</span><br>        &#123;<br>            <span class="hljs-keyword">return</span> age;<br>        &#125;<br>        <span class="hljs-keyword">set</span> <span class="hljs-comment">// 设置年龄字段时，可以添加逻辑判断，例如限制在 (0, 100) 之间</span><br>        &#123;<br>            <span class="hljs-comment">// value 是一个关键字，对属性进行赋值时，value 是等号右边的值</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">value</span> &gt; <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-keyword">value</span> &lt; <span class="hljs-number">100</span>)<br>            &#123;<br>                age = <span class="hljs-keyword">value</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>实例化一个学生对象，对字段和属性进行赋值，并打印结果。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        Student student = <span class="hljs-keyword">new</span> Student();<br>        student.name = <span class="hljs-string">&quot;小明&quot;</span>;<br>        student.gender = Gender.Boy;<br>        student.Age = <span class="hljs-number">200</span>;<br>        <br>        Console.WriteLine(student.name);    <span class="hljs-comment">// 小明</span><br>        Console.WriteLine(student.gender);  <span class="hljs-comment">// Boy</span><br>        Console.WriteLine(student.Age);     <span class="hljs-comment">// 0（对 Age 属性赋值时，数值不在规定范围内，age 字段默认值为 0）</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>方法定义了对象的行为，可以执行一系列的逻辑。</p><h3 id="无参方法"><a href="#无参方法" class="headerlink" title="无参方法"></a>无参方法</h3><p>没有参数的方法。</p><p>例如，声明一个 Say 方法，打印三个句子。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Student</span><br>&#123;<br>    <span class="hljs-comment">// ...</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Say</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        Console.WriteLine(<span class="hljs-string">&quot;你好，我叫 &quot;</span> + name);<br>        Console.WriteLine(<span class="hljs-string">&quot;我是一个 &quot;</span> + gender);<br>        Console.WriteLine(<span class="hljs-string">&quot;我今年刚满 &quot;</span> + age + <span class="hljs-string">&quot; 岁~~~&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>通过实例对象调用方法。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        Student student = <span class="hljs-keyword">new</span> Student();<br>        student.name = <span class="hljs-string">&quot;喵喵球&quot;</span>;<br>        student.gender = Gender.Girl;<br>        student.Age = <span class="hljs-number">18</span>;<br>        <br>        student.Say();<br>        <br>        <span class="hljs-comment">// 你好，我叫 喵喵球</span><br>        <span class="hljs-comment">// 我是一个 Girl</span><br>        <span class="hljs-comment">// 我今年刚满 18 岁~~~</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="有参方法"><a href="#有参方法" class="headerlink" title="有参方法"></a>有参方法</h3><p>有参数的方法。</p><p>例如，声明一个 Repeat 方法，有一个 string 类型的参数，方法体内会复读传入的内容。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Student</span><br>&#123;<br>    <span class="hljs-comment">// ...</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Repeat</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> content</span>)</span><br><span class="hljs-function"></span>    &#123;<br>        Console.WriteLine(<span class="hljs-string">&quot;我再说一遍 &quot;</span> + content);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>通过实例对象调用方法，并传入一个字符串参数。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        Student student = <span class="hljs-keyword">new</span> Student();<br><br>        student.Repeat(<span class="hljs-string">&quot;我今年刚满 18 岁~~~&quot;</span>);<br>        <br>        <span class="hljs-comment">// 我再说一遍 我今年刚满 18 岁~~~</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><p>构造方法的名称和类名相同。</p><p>当类里面没有写任何构造方法时，会有一个默认的无参构造方法。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Student</span><br>&#123;<br>    <span class="hljs-comment">// 无参构造方法，不写也行</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Student</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果需要在实例化对象时，有一些执行逻辑，就可以显式写出构造方法。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Student</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Student</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>Console.WriteLine(<span class="hljs-string">&quot;一个对象被实例化了&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        Student student = <span class="hljs-keyword">new</span> Student();<br>        <br>        <span class="hljs-comment">// 一个对象被实例化了</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>也可以自定义一个有参构造方法。</p><p>当参数名和字段名相同时，为了区分是参数赋值给字段，就需要在使用字段时，加上 this。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Student</span><br>&#123;<br>    <span class="hljs-comment">// ...</span><br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Student</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> name, Gender gender, <span class="hljs-built_in">int</span> age</span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.gender = gender;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>此时，私有字段 age 可以被直接赋值。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        Student student = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;小明&quot;</span>, Gender.Boy, <span class="hljs-number">10</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="析构方法"><a href="#析构方法" class="headerlink" title="析构方法"></a>析构方法</h3><p>当对象被垃圾收集器回收时，会自动调用析构方法。</p><p>析构方法也跟类名相同，前面要加个 ~ 符号。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Student</span><br>&#123;<br>    ~Student()<br>    &#123;<br>        Console.WriteLine(<span class="hljs-string">&quot;我被回收了呜呜呜~~~&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在 Program 类声明一个静态方法 CreateStudent，方法体内实例化一个对象，当方法调用结束后，对象就没有引用了。</p><p>此时可以调用 GC.Collect 方法主动回收一次垃圾，student 对象就会调用析构方法。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        CreateStudent();<br>        GC.Collect();<br>        <br>        <span class="hljs-comment">// 我被回收了呜呜呜~~~</span><br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">CreateStudent</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        Student student = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;小明&quot;</span>, Gender.Boy, <span class="hljs-number">10</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h3><p>不用实例化对象就能调用的方法。</p><p>例如，上述的 CreateStudent 方法，前面有个修饰符 static，表示静态的，不需要 new 一个 Program 对象，就能够直接调用。</p><p>Student 类也可以声明一个静态方法。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Student</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Introduce</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        Console.WriteLine(<span class="hljs-string">&quot;我是一个学生&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>无需实例化对象，直接通过类名调用。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        Student.Introduce();<br>        <br>        <span class="hljs-comment">// 我是一个学生</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>C#</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C# 基础语法 01 入门概念</title>
    <link href="/2024/01/03/csharp-basic-1/"/>
    <url>/2024/01/03/csharp-basic-1/</url>
    
    <content type="html"><![CDATA[<p>简单复习一下 C# 基础语法（第一期）。</p><span id="more"></span><h1 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h1><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-comment">// 单行注释</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 多行注释</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> 文档注释，会显示在代码提示框里</span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-comment">// 打印输出</span><br>Console.Write(<span class="hljs-string">&quot;输出&quot;</span>);<br>Console.WriteLine(<span class="hljs-string">&quot;输出并换行&quot;</span>);<br><br><span class="hljs-comment">// 读取输入</span><br>Console.ReadLine();<br></code></pre></td></tr></table></figure><h2 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h2><p>在 C# 中被规定了用途的单词，声明变量时，变量名不可与关键字冲突。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">namespace</span> <span class="hljs-comment">// 命名空间</span><br><span class="hljs-title">using</span>     <span class="hljs-comment">// 引入命名空间</span><br><span class="hljs-title">class</span>     <span class="hljs-comment">// 声明类</span><br><span class="hljs-comment">// ...</span><br></code></pre></td></tr></table></figure><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-built_in">char</span> gender = <span class="hljs-string">&#x27;男&#x27;</span>;      <span class="hljs-comment">// 字符型</span><br><span class="hljs-built_in">string</span> name = <span class="hljs-string">&quot;柯南&quot;</span>;    <span class="hljs-comment">// 字符串型</span><br><span class="hljs-built_in">int</span> age = <span class="hljs-number">3</span>;            <span class="hljs-comment">// 整型</span><br><span class="hljs-built_in">float</span> money = <span class="hljs-number">0.1f</span>;     <span class="hljs-comment">// 单精度浮点型</span><br><span class="hljs-built_in">double</span> salary = <span class="hljs-number">0.1</span>;    <span class="hljs-comment">// 双精度浮点型</span><br><span class="hljs-built_in">bool</span> hasMoney = <span class="hljs-literal">false</span>;  <span class="hljs-comment">// 布尔型</span><br></code></pre></td></tr></table></figure><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><p>声明并赋值，不可修改。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">const</span> <span class="hljs-built_in">double</span> PI = <span class="hljs-number">3.14</span>;<br></code></pre></td></tr></table></figure><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>声明时可以赋值，如果没有赋值则会有相应类型的默认值。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-built_in">double</span> money = <span class="hljs-number">0.1</span>;   <span class="hljs-comment">// 初始赋值</span><br><span class="hljs-built_in">int</span> num;              <span class="hljs-comment">// 默认值 0</span><br></code></pre></td></tr></table></figure><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><p>低精度类型会自动转换成高精度类型</p><p>高精度类型需要强制转换成低精度类型，并且会丢失部分精度。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-built_in">double</span> i = <span class="hljs-number">2</span>;     <span class="hljs-comment">// 自动转换（隐式转换），int 转 double</span><br><span class="hljs-built_in">int</span> j = (<span class="hljs-built_in">int</span>)<span class="hljs-number">3.1</span>; <span class="hljs-comment">// 强制转换（显式转换），double 转 int，3.1 被转换成 3 再赋值给 j，丢失部分精度（小数点后的数字）</span><br></code></pre></td></tr></table></figure><h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><p>枚举值是从 0 递增的整数。</p><p>使用枚举可以限制变量只能从有限的选项中取值，避免随意取值。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-comment">// 声明时</span><br><span class="hljs-built_in">enum</span> Gender <span class="hljs-comment">// 性别只能是男、女</span><br>&#123;<br>    Boy,<br>    Girl<br>&#125;<br><br><span class="hljs-comment">// 使用时</span><br>Gender.Boy<br>Gender.Girl<br></code></pre></td></tr></table></figure><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-built_in">string</span>[] students = <span class="hljs-keyword">new</span> <span class="hljs-built_in">string</span>[<span class="hljs-number">3</span>]; <span class="hljs-comment">// 数组长度为 3</span><br><br><span class="hljs-comment">// 三个等效语句</span><br><span class="hljs-built_in">string</span>[] students1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">string</span>[] &#123; <span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;B&quot;</span>, <span class="hljs-string">&quot;C&quot;</span> &#125;;  <span class="hljs-comment">// 直接赋值</span><br><span class="hljs-built_in">string</span>[] students2 = &#123; <span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;B&quot;</span>, <span class="hljs-string">&quot;C&quot;</span> &#125;;               <span class="hljs-comment">// 直接赋值</span><br><span class="hljs-built_in">string</span>[] students3 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">string</span>[<span class="hljs-number">3</span>] &#123; <span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;B&quot;</span>, <span class="hljs-string">&quot;C&quot;</span> &#125;; <span class="hljs-comment">// 数组长度为 3，并赋值</span><br><br>Console.WriteLine(students1[<span class="hljs-number">0</span>]);  <span class="hljs-comment">// 输出 A</span><br></code></pre></td></tr></table></figure><h3 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-built_in">int</span>[,] scores = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>[<span class="hljs-number">3</span>, <span class="hljs-number">2</span>] &#123; &#123; <span class="hljs-number">11</span>, <span class="hljs-number">23</span> &#125;, &#123; <span class="hljs-number">25</span>, <span class="hljs-number">44</span> &#125;, &#123; <span class="hljs-number">76</span>, <span class="hljs-number">13</span> &#125; &#125;;  <span class="hljs-comment">// 3 行 2 列</span><br><span class="hljs-comment">// 11 23</span><br><span class="hljs-comment">// 25 44</span><br><span class="hljs-comment">// 76 13</span><br>Console.WriteLine(scores[<span class="hljs-number">0</span>, <span class="hljs-number">0</span>]); <span class="hljs-comment">// 取第一行第一列，结果 11</span><br>Console.WriteLine(scores[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>]); <span class="hljs-comment">// 取第二行第二列，结果 44</span><br></code></pre></td></tr></table></figure><h2 id="条件分支"><a href="#条件分支" class="headerlink" title="条件分支"></a>条件分支</h2><h3 id="if-语句"><a href="#if-语句" class="headerlink" title="if 语句"></a>if 语句</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-built_in">bool</span> hasMoney = <span class="hljs-literal">false</span>;<br><span class="hljs-built_in">bool</span> hasEnergy = <span class="hljs-literal">false</span>;<br><br><span class="hljs-keyword">if</span> (hasMoney)<br>&#123;<br>    Console.WriteLine(<span class="hljs-string">&quot;买买买&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (hasEnergy)<br>&#123;<br>    Console.WriteLine(<span class="hljs-string">&quot;冲冲冲&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>    Console.WriteLine(<span class="hljs-string">&quot;发呆&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">// 输出</span><br><span class="hljs-comment">// 发呆</span><br></code></pre></td></tr></table></figure><h3 id="switch-语句"><a href="#switch-语句" class="headerlink" title="switch 语句"></a>switch 语句</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-built_in">string</span> name = <span class="hljs-string">&quot;小樱&quot;</span>;<br><br><span class="hljs-keyword">switch</span> (name)<br>&#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;小樱&quot;</span>:<br>        Console.WriteLine(<span class="hljs-string">&quot;魔法杖&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;知世&quot;</span>:<br>        Console.WriteLine(<span class="hljs-string">&quot;摄像机&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-literal">default</span>:<br>        Console.WriteLine(<span class="hljs-string">&quot;未知&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>&#125;<br><br><span class="hljs-comment">// 输出</span><br><span class="hljs-comment">// 魔法杖</span><br></code></pre></td></tr></table></figure><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><h3 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++)<br>&#123;<br>    <span class="hljs-keyword">if</span> (i == <span class="hljs-number">3</span>)<br>    &#123;<br>        <span class="hljs-keyword">continue</span>; <span class="hljs-comment">// 跳过当次循环</span><br>    &#125;<br>    <span class="hljs-comment">// 打印 i</span><br>    Console.WriteLine(i);<br>&#125;<br><br><span class="hljs-comment">// 输出</span><br><span class="hljs-comment">// 0</span><br><span class="hljs-comment">// 1</span><br><span class="hljs-comment">// 2</span><br><span class="hljs-comment">// 4</span><br></code></pre></td></tr></table></figure><h3 id="foreach-循环"><a href="#foreach-循环" class="headerlink" title="foreach 循环"></a>foreach 循环</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-built_in">int</span>[] num = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;;<br><br><span class="hljs-keyword">foreach</span> (<span class="hljs-built_in">int</span> x <span class="hljs-keyword">in</span> num)<br>&#123;<br>    <span class="hljs-comment">// 打印 x</span><br>    Console.WriteLine(x);<br>    <span class="hljs-keyword">break</span>; <span class="hljs-comment">// 跳出循环</span><br>&#125;<br><br><span class="hljs-comment">// 输出</span><br><span class="hljs-comment">// 1</span><br></code></pre></td></tr></table></figure><h3 id="while-循环"><a href="#while-循环" class="headerlink" title="while 循环"></a>while 循环</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">while</span> (i &lt; <span class="hljs-number">3</span>)<br>&#123;<br>    <span class="hljs-comment">// 打印 i</span><br>    Console.WriteLine(i);<br>    i++;<br>&#125;<br><br><span class="hljs-comment">// 输出</span><br><span class="hljs-comment">// 0</span><br><span class="hljs-comment">// 1</span><br><span class="hljs-comment">// 2</span><br></code></pre></td></tr></table></figure><h3 id="do-while-循环"><a href="#do-while-循环" class="headerlink" title="do while 循环"></a>do while 循环</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-built_in">int</span> i = <span class="hljs-number">1</span>;<br><br><span class="hljs-comment">// 至少执行一次</span><br><span class="hljs-keyword">do</span><br>&#123;<br>    <span class="hljs-comment">// 打印 i</span><br>    Console.WriteLine(i);<br>    i++;<br>&#125; <span class="hljs-keyword">while</span> (i &lt; <span class="hljs-number">0</span>);<br><br><span class="hljs-comment">// 输出</span><br><span class="hljs-comment">// 1</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>C#</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Unity3D 输入系统</title>
    <link href="/2023/10/05/unity-input-system/"/>
    <url>/2023/10/05/unity-input-system/</url>
    
    <content type="html"><![CDATA[<p>这篇文章研究一下通过键盘和鼠标对游戏物体进行移动或是其他操作。</p><p>先来看看简单的按键输入。</p><span id="more"></span><h2 id="一、键盘按键"><a href="#一、键盘按键" class="headerlink" title="一、键盘按键"></a>一、键盘按键</h2><p>创建一个脚本，挂载到一个 Cube 上，在 Update 函数监听键盘按键。</p><p>使用的接口就是 Input.GetKeyDown，这个接口只会在按下按键的时候，返回一次 true。也就是说，长按键盘按键时，后续只会返回 false。</p><p>如果想要按住键盘的按键，持续不断地返回 true，就可以使用 Input.GetKey 接口。</p><p>（注：Input.GetKey 在按下的瞬间，可能会调用好几次，因为 Update 是每帧执行一次，每帧 0.016 秒左右）</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Update</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// 按下键盘的 W 键，向上移动一个单位</span><br>    <span class="hljs-keyword">if</span> (Input.GetKeyDown(KeyCode.W))<br>    &#123;<br>        transform.position += Vector3.up;<br>    &#125;<br>    <span class="hljs-comment">// 按下键盘的 S 键，向下移动一个单位</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (Input.GetKeyDown(KeyCode.S))<br>    &#123;<br>        transform.position += Vector3.down;<br>    &#125;<br>    <span class="hljs-comment">// 按下键盘的 A 键，向左移动一个单位</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (Input.GetKeyDown(KeyCode.A))<br>    &#123;<br>        transform.position += Vector3.left;<br>    &#125;<br>    <span class="hljs-comment">// 按下键盘的 D 键，向右移动一个单位</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (Input.GetKeyDown(KeyCode.D))<br>    &#123;<br>        transform.position += Vector3.right;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>当然，在移动游戏物体时，不会逐个按键去监听，而是使用 Input.GetAxis 去监听水平或垂直方向上的偏移量。</p><p>这里声明了一个速度和一个方向向量，通过获取水平和垂直方向的偏移量，修改方向向量，计算出每帧的移动距离，修改物体位置，达到通过键盘方向键移动游戏物体的目的。</p><p>上面通过监听每个键盘按键的例子，只对 WSAD 有效。而下面这个例子，对 WSAD 和 方向键 都有效。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-built_in">float</span> speed = <span class="hljs-number">5f</span>;<br><span class="hljs-keyword">public</span> Vector3 direction;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Update</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// 水平偏移量</span><br>    <span class="hljs-built_in">float</span> h = Input.GetAxis(<span class="hljs-string">&quot;Horizontal&quot;</span>);<br>    <span class="hljs-comment">// 垂直偏移量</span><br>    <span class="hljs-built_in">float</span> v = Input.GetAxis(<span class="hljs-string">&quot;Vertical&quot;</span>);<br>    <span class="hljs-comment">// 修改方向向量</span><br>    direction.x = h;<br>    direction.y = v;<br>    <span class="hljs-comment">// 计算移动距离并修改物体位置</span><br>    transform.position += speed * Time.deltaTime * direction;<br>&#125;<br></code></pre></td></tr></table></figure><p>为什么是 Horizontal 和 Vertical 呢？有没有其他的参数呢？</p><p>答案是有的。</p><p>打开 Edit -&gt; Project Settings -&gt; Input Manager，可以看到 Horizontal 和 Vertical 两个元素，里面都包含了一系列的参数设置。</p><p>可以添加、修改、删除一些元素，填好 Name（按键名）、Positive Button（正向）、Negative Button（反向）就可以通过 Input.GetAxis 获取按键输入啦。</p><p><img src="/../images/unity-input-system/Snipaste_2023-10-05_13-53-12.png"></p><p>此外，还有 Input.GetAxisRaw，它和 Input.GetAxis 的区别是，它的返回值是 -1 0 1 三个整数，而 Input.GetAxis 会逐渐从 0 到 1 或 -1 进行变化，有一个缓慢增速的过程。</p><p>除了 Input.GetKeyDown，还有 Input.GetButtonDown，它们都可以获取 Input Manager 设置的轴键，而 GetKeyDown 可以额外通过 KeyCode 枚举变量获取按键，GetButtonDown 则只能获取轴键（GetAxis 同理）。</p><h2 id="二、鼠标按键"><a href="#二、鼠标按键" class="headerlink" title="二、鼠标按键"></a>二、鼠标按键</h2><p>鼠标的三个按键也都是通过 Input 类的接口来监听。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Update</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (Input.GetMouseButtonDown(<span class="hljs-number">0</span>))<br>    &#123;<br>        Debug.Log(<span class="hljs-string">&quot;按下鼠标左键&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (Input.GetMouseButtonDown(<span class="hljs-number">1</span>))<br>    &#123;<br>        Debug.Log(<span class="hljs-string">&quot;按下鼠标右键&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (Input.GetMouseButtonDown(<span class="hljs-number">2</span>))<br>    &#123;<br>        Debug.Log(<span class="hljs-string">&quot;按下鼠标中键&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>鼠标在屏幕上移动时，也同样可以获取到移动的坐标偏移量。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Update</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">float</span> x = Input.GetAxis(<span class="hljs-string">&quot;Mouse X&quot;</span>);<br>    <span class="hljs-built_in">float</span> y = Input.GetAxis(<span class="hljs-string">&quot;Mouse Y&quot;</span>);<br>    Debug.Log(<span class="hljs-string">$&quot;mouse x = <span class="hljs-subst">&#123;x&#125;</span> y = <span class="hljs-subst">&#123;y&#125;</span>&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h2><p>下面列出了一些常用的按键接口。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-comment">// 键盘</span><br>Input.GetKey(KeyCode.W)           <span class="hljs-comment">// 按住 W 键持续返回 true, 松开后返回 false</span><br>Input.GetKeyDown(KeyCode.W)       <span class="hljs-comment">// 按下 W 键返回 true，按住也只会返回 false</span><br>Input.GetKeyUp(KeyCode.W)         <span class="hljs-comment">// 抬起 W 键返回 true</span><br><br><span class="hljs-comment">// 注：这里的 Jump 需要在 Input Manager 里设置一个名称为 Jump 的轴键</span><br>Input.GetButton(<span class="hljs-string">&quot;Jump&quot;</span>)           <span class="hljs-comment">// 按住自定义的键持续返回 true, 松开后返回 false</span><br>Input.GetButtonDown(<span class="hljs-string">&quot;Jump&quot;</span>)       <span class="hljs-comment">// 按下自定义的键返回 true，按住也只会返回 false</span><br>Input.GetButtonUp(<span class="hljs-string">&quot;Jump&quot;</span>)         <span class="hljs-comment">// 抬起自定义的键返回 true</span><br><br>Input.GetAxis(<span class="hljs-string">&quot;Horizontal&quot;</span>)       <span class="hljs-comment">// AD 或左右方向键的偏移量 (从 0 到 1 变化，或从 0 到 -1 变化)</span><br>Input.GetAxis(<span class="hljs-string">&quot;Vertical&quot;</span>)         <span class="hljs-comment">// WS 或上下方向键的偏移量 (从 0 到 1 变化，或从 0 到 -1 变化)</span><br>    <br>Input.GetAxisRaw(<span class="hljs-string">&quot;Horizontal&quot;</span>)    <span class="hljs-comment">// AD 或左右方向键的偏移量 (-1 0 1)</span><br>Input.GetAxisRaw(<span class="hljs-string">&quot;Vertical&quot;</span>)      <span class="hljs-comment">// WS 或上下方向键的偏移量 (-1 0 1)</span><br><br><br><span class="hljs-comment">// 鼠标 0: 左键  1: 右键  2: 中键</span><br>Input.GetMouseButton(<span class="hljs-number">0</span>)       <span class="hljs-comment">// 按住鼠标左键</span><br>Input.GetMouseButtonDown(<span class="hljs-number">1</span>)   <span class="hljs-comment">// 按下鼠标右键</span><br>Input.GetMouseButtonUp(<span class="hljs-number">2</span>)     <span class="hljs-comment">// 抬起鼠标中键</span><br><br>Input.GetAxis(<span class="hljs-string">&quot;Mouse X&quot;</span>)      <span class="hljs-comment">// 鼠标水平方向移动的偏移量</span><br>Input.GetAxis(<span class="hljs-string">&quot;Mouse Y&quot;</span>)      <span class="hljs-comment">// 鼠标垂直方向移动的偏移量</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Unity3D</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Unity3D 移动游戏物体</title>
    <link href="/2023/09/12/unity-move-gameobject/"/>
    <url>/2023/09/12/unity-move-gameobject/</url>
    
    <content type="html"><![CDATA[<p>在 unity 中，一个很基础的需求是移动游戏物体。</p><p>移动物体的方式有很多种，本质上都是对 Transform 组件的 Position 属性进行修改。</p><span id="more"></span><h2 id="一、直接修改-position"><a href="#一、直接修改-position" class="headerlink" title="一、直接修改 position"></a>一、直接修改 position</h2><p>修改自身的位置：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c#">transform.position = <span class="hljs-keyword">new</span> Vector3(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure><p>当前物体就会出现在指定的坐标位置。</p><p>修改引用物体的位置：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> Transform other;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>&#123;<br>    other.position = <span class="hljs-keyword">new</span> Vector3(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="二、Translate"><a href="#二、Translate" class="headerlink" title="二、Translate"></a>二、Translate</h2><p>unity 提供了 transform.Translate() 函数，用于移动游戏物体。</p><p>下面的例子是让当前物体沿着 X 轴正方向持续移动。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-built_in">float</span> speed = <span class="hljs-number">5f</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Update</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>&#123;<br>    transform.Translate(Vector3.right * speed * Time.deltaTime, Space.World);<br>&#125;<br></code></pre></td></tr></table></figure><p>Translate 函数的第一个参数，就是移动的方向和距离，使用一个向量作为输入。</p><p>可以看到，这里使用了物体的右方向（Vector3.right），定义了一个速度（speed），乘上增量时间修正（Time.deltaTime），作为最终的移动向量。</p><p>为什么要乘上 Time.deltaTime 呢？</p><p>这是因为 Update 函数每秒的执行次数是根据设备的性能来决定的。如果当前帧率是 60，那么 Update 函数每秒执行 60 次；如果帧率是 30，则执行 30 次。那么，物体的移动速度就不稳定了。</p><p>为了保持物体在不同帧率下，都是同样的移动速度，Time.deltaTime 作为一个变量，就发挥作用了。</p><ul><li>在 60 帧的情况下，Time.deltaTime 的值为 1&#x2F;60，Update 执行了 60 次，最终 1 秒移动了 Vector3.right * speed 的距离。</li><li>在 30 帧的情况下，Time.deltaTime 的值为 1&#x2F;30，Update 执行了 30 次，最终 1 秒移动了 Vector3.right * speed 的距离。</li></ul><p>第二个参数是坐标系，默认是使用物体自身的局部坐标系，也可以指定使用世界坐标系（Space.World）。</p><h2 id="三、刚体"><a href="#三、刚体" class="headerlink" title="三、刚体"></a>三、刚体</h2><p>给物体挂上刚体组件（Rigidbody），修改 velocity 属性，让物体在指定的方向产生移动速度。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-built_in">float</span> speed = <span class="hljs-number">5f</span>;<br><span class="hljs-keyword">public</span> Rigidbody rigidbody;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>&#123;<br>    rigidbody.velocity = Vector3.right * speed;<br>&#125;<br></code></pre></td></tr></table></figure><p>刚体的速度只需要设置一次，就会持续不断地移动。</p><p>（注：刚体默认是受到重力影响，会往下掉落。如果想要让物体不受重力影响，可以取消勾选刚体组件上的 Use Gravity 选项。）</p><p>当然，在实际项目中，这个速度需要不断地进行调整，不会只在 Start 设置一次。</p><p>对于物理组件来说，通常会使用 FixedUpdate 去控制物理逻辑，对于一些按键输入，则可以使用 Update 控制。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Update</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// 方向键左右的输入，取值为 -1, 0, 1</span><br>    <span class="hljs-built_in">float</span> horizontal = Input.GetAxisRaw(<span class="hljs-string">&quot;Horizontal&quot;</span>);<br>    rigidbody.velocity = Vector3.right * horizontal * speed;<br>&#125;<br></code></pre></td></tr></table></figure><p>现在物体就可以通过方向键进行左右移动了。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Unity3D</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>回顾博客</title>
    <link href="/2023/09/10/review-blog/"/>
    <url>/2023/09/10/review-blog/</url>
    
    <content type="html"><![CDATA[<p>已经有好久好久没有更新博客了。</p><p>我又回来看看它了。</p><span id="more"></span><p>最近经常看别人的博客，看到好多知识和有意思的想法，然后就会联想到自己以前建立的博客，感慨这两年间都没有再写上一篇博客。</p><p>其实平常都有在小米笔记上写一些工作日志、周志，还有偶尔的一些情绪感悟。</p><p>可能是因为手机上随时可以写，随时可以查看，就渐渐地遗忘了网页的博客吧。</p><p>而且我的主站是用 Notion 搭建的个人空间，博客对我来说，似乎确实没有太大的作用。</p><hr><p>回想当初，刚接触的编程语言是前端三件套（HTML、CSS、JavaScript），职业方向也是想着往 Web 前端开发工程师的路径走，只是由于自己的迷茫和懒惰，也有兴趣低迷的原因，导致这条路并没有走太远。</p><p>后来因为参加比赛，选择了做游戏，就一路走向了 Unity3D 客户端开发工程师。</p><p>那时候还是很纠结，是要做前端还是游戏。不过，听从了师兄的建议，尝试去做一个 Web 项目，最基本的，就是搭建一个博客。其实也算不上做项目吧，毕竟用了博客框架，看些入门教程就搭起来了，然后就是写文章。师兄也建议我去写一个 todolist 应用，不过那时候比赛很忙，后来也没写了。</p><p>最开始我写的博客，是全英文的。因为我想起来，以前师兄给我看过他的博客，也是全英文的。我觉得这样的写作方式可以一边积累博客一边熟练使用英语，所以就硬着头皮要求自己这样写了。当然，就坚持了两篇。</p><p>后面放弃了前端，也就遗忘了博客。</p><hr><p>第二次回来看博客，是 2021 年初的时候了。</p><p>那时候辞职考研失败，一切百废待兴，总觉得应该做点什么，并且需要记录一下自己的成长，让自己有一个全新的开始，所以就想起了博客。</p><p>那时候确实很兴奋地在写，还做了几个简单的小游戏，打包成 WebGL，捣鼓了很多天，终于可以在博客上预览了。</p><p>然后年初找工作，上班之后，就没时间没精力来写了。</p><hr><p>时间一晃，2023 年了。</p><p>这两年间也并不是一直有在工作，也换过几家公司，休息过几段时间。</p><p>现在，在新公司做了快七个月了，状态不是很好。说不出来什么原因，就是对工作内容和日常对接感到很无趣。</p><p>有自己的原因，也有其他人的原因。</p><p>总之，我需要找点事情来缓解一下自己的无趣。</p><hr><p>今天是 9 月 10 号，周日。</p><p>我参考了几个大佬的博客，很喜欢一个用 Jekyll 生成，Chirpy 主题的博客页面。</p><p>然后我捣鼓了一天 Ruby，安装 gem、bundler、jekyll，勉强看到了同样效果的页面，但是已经被 bundle 在命令行窗口半天都不响应给气晕了。</p><p>魔法上网、换镜像源，都很难制服这个 bundle，然后想想，还是 hexo 简单好用。</p><p>姑且用 hexo 写一篇简短的博客，来延续这个封印了两年的小空间吧。</p><hr><p>今天也给自己做的 hexo 主题美化了一下，做成了左边固定，右边滚动的结构。删除了很多没有用的元素，力求简洁。不过总感觉有点空，后续想到什么好玩的点子，再想办法加进来吧。</p>]]></content>
    
    
    
    <tags>
      
      <tag>随记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Tetris</title>
    <link href="/2021/04/20/Tetris/"/>
    <url>/2021/04/20/Tetris/</url>
    
    <content type="html"><![CDATA[<p>俄罗斯方块项目演示。</p><p><a href="../../../../WebGL/Tetris/index.html">Tetris</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>WebGL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TheRestOfThePlanet</title>
    <link href="/2021/04/08/TheRestOfThePlanet/"/>
    <url>/2021/04/08/TheRestOfThePlanet/</url>
    
    <content type="html"><![CDATA[<p>星球余生项目演示。</p><p><a href="../../../../WebGL/TheRestOfThePlanet/index.html">TheRestOfThePlanet</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>WebGL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ZerosSmartGrowth</title>
    <link href="/2021/02/17/ZerosSmartGrowth/"/>
    <url>/2021/02/17/ZerosSmartGrowth/</url>
    
    <content type="html"><![CDATA[<p>Zero 的智能成长项目演示。</p><p><a href="../../../../WebGL/ZerosSmartGrowth/index.html">ZerosSmartGrowth</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>WebGL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PickGifts</title>
    <link href="/2021/02/03/PickGifts/"/>
    <url>/2021/02/03/PickGifts/</url>
    
    <content type="html"><![CDATA[<p>挑选礼物项目演示。</p><p><a href="../../../../WebGL/PickGifts/index.html">PickGifts</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>WebGL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GreedySnake</title>
    <link href="/2021/01/27/GreedySnake/"/>
    <url>/2021/01/27/GreedySnake/</url>
    
    <content type="html"><![CDATA[<p>贪吃蛇项目演示。</p><p><a href="../../../../WebGL/GreedySnake/index.html">GreedySnake</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>WebGL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo-Link</title>
    <link href="/2021/01/27/Hexo-Link/"/>
    <url>/2021/01/27/Hexo-Link/</url>
    
    <content type="html"><![CDATA[<p>在文章中引入超链接，直接在 Typora 中写</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">[GreedySnake](..<span class="hljs-regexp">/WebGL/</span>GreedySnake/index.html)<br></code></pre></td></tr></table></figure><p>这里的文件夹层级是，_posts 和 WebGL 都放在 source 里。</p><p>和插入图片一样，首页显示了链接，并且可以正常打开，而文章页面却不能正常打开，找不到页面。</p><p>同样是路径的问题。</p><span id="more"></span><p>在 Hexo-Image 这篇文章中，我使用了 hexo-renderer-marked 这个插件修改网站发布后的图片的路径。</p><p>不过，超链接这一块，我还没有找到合适的插件去修正。</p><p>所以这里就先用一个土方法，自己在路径前加上很多个 ..&#x2F; 。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">[GreedySnake](..<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/../</span>WebGL<span class="hljs-regexp">/GreedySnake/i</span>ndex.html)<br></code></pre></td></tr></table></figure><p>加多少个，要看文件夹的层级，根据实际情况去选择。这里我加上了三个 ..&#x2F; ，因为我的文章页面的上级目录，有年月日三个层级。</p><p>这样，文章页面的超链接路径就会回到根目录下去找 WebGL 这个文件夹，而主页同样是在根目录下找，因为根目录已经没有上级目录了，所以加多少个 ..&#x2F; 也没关系（好像有点矛盾了）。</p><p>不过，我觉得这个方法并不是最好的，以后估计会找到更好的解决方案吧。</p><p>另外，超链接的路径里不能有空格，如果有空格，超链接会变成 p 标签。</p><p>还有一个问题，就是 index.html 在发布时会被渲染，导致页面出现某些问题。比如，我打开的链接是 Unity WebGL 的页面，这个页面会直接在我的网站背景上显示，而不是打开一个新的页面。</p><p><img src="/../images/HexoLink/page_overlap.png" alt="页面重叠"></p><p>所以还需要去到 config.yml 文件里，找到 skip_render，让一些页面跳过渲染。</p><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs haml">skip_render:<br>  -<span class="ruby"> <span class="hljs-string">&#x27;README.md&#x27;</span></span><br><span class="ruby">  - <span class="hljs-string">&#x27;WebGL/GreedySnake/*.html&#x27;</span></span><br></code></pre></td></tr></table></figure><p>参数前加的连字符 - 是 yml 的数组写法。这里我添加了 GreedySnake 下的所有 html 文件。</p><p>清理一下数据库，清理之前，如果 public 文件夹下的有需要保存的东西，比如 README.md，需要先备份一下，因为清理的命令也会把 public 文件夹给删除。</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>hexo clean<br></code></pre></td></tr></table></figure><p>重新启动本地服务器，会发现，WebGL 页面已经在新页面打开了。</p><p><img src="/../images/HexoLink/new_page.png" alt="打开新页面"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo-Image</title>
    <link href="/2021/01/27/Hexo-Image/"/>
    <url>/2021/01/27/Hexo-Image/</url>
    
    <content type="html"><![CDATA[<p>在写文章的过程中，有时需要插入图片。</p><p>如果直接在 Markdown 文件中使用相对路径引用图片，当网站发布时，首页显示了图片，文章页面却不会显示图片。</p><p>经过一番探索和尝试，我使用以下的方法插入图片。</p><span id="more"></span><p>首先，在 source 文件夹下创建一个 images 文件夹。</p><p>为了便于分类，在 images 文件夹下，还有一个 Hexo 文件夹，表示这个文件夹下的图片是 Hexo.md 这篇文章使用的。</p><p><img src="/../images/HexoImage/imagesHexo.png" alt="Hexo文章里的图片"></p><p>接着，在 Typora 编辑器中插入图片，例如</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">![创建仓库](..<span class="hljs-regexp">/images/</span>Hexo/repository.png)<br></code></pre></td></tr></table></figure><p>在输入图片路径时，要使用 &#x2F; 而不是 \，虽然两种写法在 Typora 编辑器中都可以显示图片，但是在 Hexo 发布时却会导致路径出现问题。</p><p>另外，图片和文件夹的名称也不能带有连字符 - ，因为这个符号同样会让图片显示不出来。</p><p>然后，安装一个插件。这个插件也是为了让文章被渲染后的图片路径变得正常。</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">$ npm install hexo-renderer-marked <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure><p>在 config.yml 里配置一下，找到 Writing 这个标题下，新增字段</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">marked:</span><br>  <span class="hljs-attr">prependRoot:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>还要检查一下 URL 这个标题下，root 字段是否是一个斜杠</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">root:</span> /<br></code></pre></td></tr></table></figure><p>这个 prependRoot 字段的作用是，在图片的路径前，加上 root 设置的路径。</p><p>在这里，因为我设置的图片路径是</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">![创建仓库](..<span class="hljs-regexp">/images/</span>Hexo/repository.png)<br></code></pre></td></tr></table></figure><p>按照上述的配置，生成的页面的图片路径就会变成</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">![创建仓库](<span class="hljs-regexp">/../im</span>ages<span class="hljs-regexp">/Hexo/</span>repository.png)<br></code></pre></td></tr></table></figure><p>原本发布后，文章页面的图片路径应该是</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">4000</span><span class="hljs-regexp">/2021/</span><span class="hljs-number">01</span><span class="hljs-regexp">/26/im</span>ages<span class="hljs-regexp">/Hexo/</span>repository.png<br></code></pre></td></tr></table></figure><p>就是路径的问题导致文章页面的图片显示不出来，而配置后的路径则是</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">4000</span><span class="hljs-regexp">/images/</span>Hexo/repository.png<br></code></pre></td></tr></table></figure><p>路径正确，图片也就正常地显示出来了。</p><p>不过此处有个小问题，就是按照上述流程配置后，文章的图片还是显示不出来，经过测试发现，需要在文章里写一次</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--more--&gt;</span> // 首页会出现 Read More 的按钮，隐藏后面的内容<br></code></pre></td></tr></table></figure><p>然后神奇的是，图片正常显示了。</p><p>之后，即使把这个代码去掉，图片也是正常显示的。</p><p>可能是这个插件的某个地方出了问题吧。</p><p>如果直接写</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--more--&gt;</span><br></code></pre></td></tr></table></figure><p>也是显示不出来的，还是需要先安装插件，配置 config.yml，再写 Read More 的代码才行。</p><p>最后，生成一下页面。</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>hexo g<br></code></pre></td></tr></table></figure><p>在本地测试一下，可以看到图片已经显示出来了。</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>hexo s<br></code></pre></td></tr></table></figure><p><img src="/../images/HexoImage/imagesTest.png" alt="本地测试"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo-Config</title>
    <link href="/2021/01/27/Hexo-Config/"/>
    <url>/2021/01/27/Hexo-Config/</url>
    
    <content type="html"><![CDATA[<p>在根目录下，有个叫 _config.yml 的文件，用文本编辑器打开，可以看到很多配置字段。</p><span id="more"></span><h1 id="Site"><a href="#Site" class="headerlink" title="Site"></a>Site</h1><table><thead><tr><th>字段</th><th>描述</th><th>作用</th></tr></thead><tbody><tr><td>title</td><td>网站的标题</td><td>默认会显示在网站顶部</td></tr><tr><td>subtitle</td><td>网站的副标题</td><td>默认会显示在标题下方</td></tr><tr><td>description</td><td>网站的描述</td><td>没有显示，跟搜索引擎有关</td></tr><tr><td>keywords</td><td>网站的关键词</td><td>没有显示，跟搜索引擎有关</td></tr><tr><td>author</td><td>作者</td><td>默认会显示在网站底部</td></tr><tr><td>language</td><td>网站的语言，使用 2 个字符的代码描述，中文是 zh</td><td>没有显示，跟搜索引擎有关</td></tr><tr><td>timezone</td><td>网站的时区，Hexo会默认使用计算机上的设置</td><td>没有显示，跟搜索引擎有关</td></tr></tbody></table><h1 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h1><table><thead><tr><th>字段</th><th>描述</th><th>作用</th></tr></thead><tbody><tr><td>url</td><td>网站的 URL</td><td>如果网站在域名下的一个子目录里，则需要设置为 https:&#x2F;&#x2F;网址&#x2F;子目录&#x2F;</td></tr><tr><td>root</td><td>网站的根目录</td><td>如果网站在域名下的一个子目录里，则需要设置为 &#x2F;子目录&#x2F;</td></tr><tr><td>permalink</td><td>文章的永久链接格式</td><td>public 文件夹和网址的层级格式</td></tr><tr><td>permalink_defaults</td><td>永久链接格式的默认值</td><td>为 permalink 设置默认值</td></tr><tr><td>pretty_urls</td><td>美化永久链接</td><td>可以让 URL 更简洁</td></tr><tr><td>pretty_urls.trailing_index</td><td>链接尾部的 index.html</td><td>设置为 false 可以让链接尾部的 index.html 不显示</td></tr><tr><td>pretty_urls.trailing_html</td><td>链接尾部的 .html</td><td>设置为 false 可以让链接尾部的 .html 不显示</td></tr></tbody></table><h1 id="Directory"><a href="#Directory" class="headerlink" title="Directory"></a>Directory</h1><table><thead><tr><th>字段</th><th>描述</th><th>作用</th></tr></thead><tbody><tr><td>source_dir</td><td>资源文件夹</td><td>存放文章、图片等资源</td></tr><tr><td>public_dir</td><td>Hexo 发布的文件夹</td><td>可以看到发布后的静态页面文件</td></tr><tr><td>tag_dir</td><td>标签文件夹</td><td>给文章设置标签后，会多出一个标签文件夹，网站的侧边栏也会多出两栏标签导航栏</td></tr><tr><td>archive_dir</td><td>档案文件夹</td><td>默认按照月份将文章归档</td></tr><tr><td>category_dir</td><td>分类文件夹</td><td>跟标签文件夹差不多，同样在文章的顶部进行设置</td></tr><tr><td>code_dir</td><td>代码文件夹</td><td>存放代码</td></tr><tr><td>i18n_dir</td><td>国际化文件夹</td><td>跟语言相关</td></tr><tr><td>skip_render</td><td>跳过渲染，将路径下的文件直接拷贝到 public 文件夹下</td><td>可以在发布时，将一些资源原封不动地拷贝到 public 文件夹，避免渲染后出现问题，比如 README.md 文件</td></tr></tbody></table><h1 id="Writing"><a href="#Writing" class="headerlink" title="Writing"></a>Writing</h1><table><thead><tr><th>字段</th><th>描述</th><th>作用</th></tr></thead><tbody><tr><td>new_post_name</td><td>新建文章的名称格式，默认是 title.md</td><td>新建文章后生成的文件名会是 标题.md 的格式</td></tr><tr><td>default_layout</td><td>新建文章的默认布局，默认是 post</td><td>新建文章时使用的模板</td></tr><tr><td>titlecase</td><td>将标题转换成首字母大写的标题</td><td></td></tr><tr><td>external_link</td><td>外部链接</td><td></td></tr><tr><td>external_link.enable</td><td>是否在新标签页打开外部链接</td><td></td></tr><tr><td>external_link.field</td><td>对整个网站还是当前文章生效</td><td></td></tr><tr><td>external_link.exclude</td><td>排除哪些域名</td><td></td></tr><tr><td>filename_case</td><td>把文章的名称改为小写（1）或大写（2），默认不改（0）</td><td></td></tr><tr><td>render_drafts</td><td>是否渲染草稿</td><td>设置为 true 后，将会显示通过草稿模板创建的文章</td></tr><tr><td>post_asset_folder</td><td>是否启用资源文件夹</td><td>设置为 true 后，新建文章的同时，会在文章同级目录下生成一个同名文件夹存放资源</td></tr><tr><td>relative_link</td><td>是否把链接改为根目录的相对路径</td><td></td></tr><tr><td>future</td><td>是否显示未来日期的文章</td><td>设置为 false 后，将不会显示未来日期的文章</td></tr><tr><td>highlight</td><td>代码块设置</td><td></td></tr><tr><td>highlight.enable</td><td></td><td></td></tr><tr><td>highlight.line_number</td><td></td><td></td></tr><tr><td>highlight.auto_detect</td><td></td><td></td></tr><tr><td>highlight.tab_replace</td><td></td><td></td></tr><tr><td>highlight.wrap</td><td></td><td></td></tr><tr><td>highlight.hljs</td><td></td><td></td></tr><tr><td>prismjs</td><td>代码块设置</td><td></td></tr><tr><td>prismjs.enable</td><td></td><td></td></tr><tr><td>prismjs.preprocess</td><td></td><td></td></tr><tr><td>prismjs.line_number</td><td></td><td></td></tr><tr><td>prismjs.tab_replace</td><td></td><td></td></tr></tbody></table><h1 id="Home-page-setting"><a href="#Home-page-setting" class="headerlink" title="Home page setting"></a>Home page setting</h1><table><thead><tr><th>字段</th><th>描述</th><th>作用</th></tr></thead><tbody><tr><td>index_generator</td><td>主页设置</td><td></td></tr><tr><td>index_generator.path</td><td>主页的路径</td><td></td></tr><tr><td>index_generator.per_page</td><td>每页显示的文章数目</td><td></td></tr><tr><td>index_generator.order_by</td><td>文章排序</td><td></td></tr></tbody></table><h1 id="Category-Tag"><a href="#Category-Tag" class="headerlink" title="Category &amp; Tag"></a>Category &amp; Tag</h1><table><thead><tr><th>字段</th><th>描述</th><th>作用</th></tr></thead><tbody><tr><td>default_category</td><td>默认分类</td><td></td></tr><tr><td>category_map</td><td>分类别名</td><td></td></tr><tr><td>tag_map</td><td>标签别名</td><td></td></tr></tbody></table><h1 id="Metadata-elements"><a href="#Metadata-elements" class="headerlink" title="Metadata elements"></a>Metadata elements</h1><table><thead><tr><th>字段</th><th>描述</th><th>作用</th></tr></thead><tbody><tr><td>meta_generator</td><td>是否在页面头部插入 meta 标签</td><td></td></tr></tbody></table><h1 id="Date-Time-format"><a href="#Date-Time-format" class="headerlink" title="Date &#x2F; Time format"></a>Date &#x2F; Time format</h1><table><thead><tr><th>字段</th><th>描述</th><th>作用</th></tr></thead><tbody><tr><td>date_format</td><td>日期格式</td><td></td></tr><tr><td>time_format</td><td>时间格式</td><td></td></tr><tr><td>updated_option</td><td>如果文章中没有指定创建日期，就会使用更新日期</td><td></td></tr></tbody></table><h1 id="Pagination"><a href="#Pagination" class="headerlink" title="Pagination"></a>Pagination</h1><table><thead><tr><th>字段</th><th>描述</th><th>作用</th></tr></thead><tbody><tr><td>per_page</td><td>文章分页时，每页的文章数目</td><td></td></tr><tr><td>pagination_dir</td><td>分页的目录</td><td></td></tr></tbody></table><h1 id="Include-Exclude-file-s"><a href="#Include-Exclude-file-s" class="headerlink" title="Include &#x2F; Exclude file(s)"></a>Include &#x2F; Exclude file(s)</h1><table><thead><tr><th>字段</th><th>描述</th><th>作用</th></tr></thead><tbody><tr><td>include</td><td>包括的文件</td><td>Hexo 会将这个路径下的文件拷贝到 source 文件夹下</td></tr><tr><td>exclude</td><td>不包括的文件</td><td>Hexo 会将这个路径下的文件排除在外</td></tr><tr><td>ignore</td><td>忽略的文件</td><td>Hexo 不会对这些文件进行操作</td></tr></tbody></table><h1 id="Extensions"><a href="#Extensions" class="headerlink" title="Extensions"></a>Extensions</h1><table><thead><tr><th>字段</th><th>描述</th><th>作用</th></tr></thead><tbody><tr><td>theme</td><td>主题</td><td>网站显示的样式</td></tr></tbody></table><h1 id="Deployment"><a href="#Deployment" class="headerlink" title="Deployment"></a>Deployment</h1><table><thead><tr><th>字段</th><th>描述</th><th>作用</th></tr></thead><tbody><tr><td>deploy</td><td>部署设置</td><td></td></tr><tr><td>deploy.type</td><td>部署类型，默认是 git</td><td></td></tr><tr><td>deploy.repo</td><td>部署地址，github 远程仓库地址</td><td>将发布后的文件部署到相应的 Github 地址</td></tr><tr><td>deploy.branch</td><td>部署分支</td><td>将发布后的文件部署到相应的 Github 地址的一个分支下</td></tr></tbody></table>]]></content>
    
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo</title>
    <link href="/2021/01/26/Hexo/"/>
    <url>/2021/01/26/Hexo/</url>
    
    <content type="html"><![CDATA[<p>Hexo 是一个网站框架，可以快速地搭建一个属于自己的网站。</p><p>下面介绍一下我的搭建过程。</p><span id="more"></span><h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><ul><li>注册一个 Github 账号并创建远程仓库</li><li>安装 Git</li><li>安装 node.js</li><li>配置 SSH Key</li></ul><h2 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h2><p>Github 官网：<a href="https://github.com/">https://github.com/</a></p><p>点击右上角的 sign up 注册一个账号。</p><p>登录后，在 Github 上 new 一个 repository，名字叫做：github昵称 + github.io。比如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">weikunou</span><span class="hljs-selector-class">.github</span><span class="hljs-selector-class">.io</span><br></code></pre></td></tr></table></figure><p><img src="/../images/Hexo/repository.png" alt="创建仓库"></p><p>创建好之后，点击分支按钮，输入 source，创建一个新的分支，用于存储源文件。</p><p><img src="/../images/Hexo/source.png" alt="创建source分支"></p><p>而默认的 main 分支是用来存储发布后的静态页面文件的。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>Git 官网： <a href="https://git-scm.com/">https://git-scm.com/</a></p><p>Node.js 官网：<a href="https://nodejs.org/zh-cn/">https://nodejs.org/zh-cn/</a></p><h2 id="SSH-Key"><a href="#SSH-Key" class="headerlink" title="SSH Key"></a>SSH Key</h2><p>这个是用来提交代码到远程仓库的密钥，可以安全地将本地文件上传到 Github 服务器。</p><p>打开 Git Bash，输入如下代码，先检查一下本机是否已经有 SSH Key：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">$ <span class="hljs-keyword">cd</span> ~<span class="hljs-string">/.ssh</span><br></code></pre></td></tr></table></figure><p>如果提示 No such file or directory 则说明没有 SSH Key。</p><p>那么，输入如下代码创建 SSH Key：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>ssh-keygen -t rsa -C <span class="hljs-string">&quot;注册 Github 的邮箱地址&quot;</span><br></code></pre></td></tr></table></figure><p>如果保持默认设置，可以直接连续按回车键。完成配置后，打开 C 盘里的用户文件夹，可以看到一个 .ssh 的文件夹，用文本编辑器打开 id_rsa.pub，复制所有的内容。</p><p>回到 Github 主页，点击右上角的头像，点击 Settings，进入设置页面，找到 SSH and GPG keys，点击 New SSH key 按钮，Title 可以随意起，把复制的内容粘贴到 Key 的文本框内，最后点击 Add SSH key。</p><p><img src="/../images/Hexo/ssh.png" alt="ssh"></p><p>然后，测试一下是否配置成功。回到 Git Bash 面板，输入代码：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>ssh -T git<span class="hljs-variable">@github</span>.com<br></code></pre></td></tr></table></figure><p>如果有提示</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">Hi weikunou! You<span class="hljs-symbol">&#x27;ve</span> successfully authenticated, but GitHub does <span class="hljs-keyword">not</span> provide shell <span class="hljs-keyword">access</span>.<br></code></pre></td></tr></table></figure><p>就说明已经配置成功了。</p><p>另外，还需要配置一下 Git 的用户名和邮箱，用来记录每次提交代码的人是谁。</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs verilog">$ git <span class="hljs-keyword">config</span> --<span class="hljs-keyword">global</span> user<span class="hljs-variable">.name</span> <span class="hljs-string">&quot;github 用户名&quot;</span><br>$ git <span class="hljs-keyword">config</span> --<span class="hljs-keyword">global</span> user<span class="hljs-variable">.email</span> <span class="hljs-string">&quot;github 注册邮箱&quot;</span><br></code></pre></td></tr></table></figure><h1 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h1><h2 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h2><p>在 Git Bash 窗口（或者 cmd 命令提示符窗口），输入</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">$ npm <span class="hljs-keyword">install</span> -g hexo<br></code></pre></td></tr></table></figure><p>就安装好了 Hexo。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>在电脑的某个盘上准备好要存放 Hexo 的文件夹，比如 myblog。</p><p>然后在 Git Bash 窗口下转到目录，比如 D 盘上的 Projects 文件夹下的 myblog 子文件夹。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ cd <span class="hljs-regexp">/d/</span>Projects/myblog<br></code></pre></td></tr></table></figure><p>然后执行初始化命令。如果文件夹不是空的，则会报错，需要保持 myblog 是一个空文件夹。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">$ hexo <span class="hljs-keyword">init</span><br></code></pre></td></tr></table></figure><p>此时 myblog 文件夹下就有了一些文件。耐心等待一段时间，Hexo 会自动安装 node_modules 依赖包，如果没有发现这个文件夹，那么可以输入</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">$ npm <span class="hljs-keyword">install</span><br></code></pre></td></tr></table></figure><p>手动安装 node_modules 依赖包。</p><p>接下来，执行</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">$ hexo <span class="hljs-keyword">server</span><br></code></pre></td></tr></table></figure><p>启动服务，然后打开浏览器，在地址栏输入 http:&#x2F;&#x2F; localhost:4000&#x2F; 即可在本地预览网站。</p><h2 id="写作"><a href="#写作" class="headerlink" title="写作"></a>写作</h2><p>执行</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">$ hexo <span class="hljs-keyword">new</span> <span class="hljs-string">&quot;About-me&quot;</span><br></code></pre></td></tr></table></figure><p>hexo 会在 source&#x2F;_posts 文件夹下生成一个新的 About-me.md 文件，打开这个文件，就可以开始写作啦。</p><p>这里推荐一款 Markdown 写作软件，<a href="https://www.typora.io/">Typora</a>。</p><h2 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h2><p>安装一个插件</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">$ npm install hexo-deployer-git <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure><p>用文本编辑器打开 Hexo 文件夹下的 _config.yml，在最下面的 deploy 参数下，填写远程仓库的名称和分支。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-attribute">deploy</span>:<br>  <span class="hljs-attribute">type</span>: git<br>  <span class="hljs-attribute">repo</span>: <span class="hljs-attribute">https</span>:<span class="hljs-comment">//github.com/Github 用户名/Github 项目名</span><br>  <span class="hljs-attribute">branch</span>: main<br></code></pre></td></tr></table></figure><p>执行命令</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>hexo deploy<br></code></pre></td></tr></table></figure><p>就将项目发布成静态页面并上传到 Github 项目的 main 分支下了。</p><p>现在，只要在浏览器输入</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>Github项目名称/<br></code></pre></td></tr></table></figure><p>就可以访问个人网站啦。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
